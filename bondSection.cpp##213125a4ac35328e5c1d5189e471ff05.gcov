        -:    0:Source:/home/jag/projects/pq/src/input/topologyFileReader/bondSection.cpp
        -:    0:Graph:.build/src/input/topologyFileReader/CMakeFiles/topologyFileReader.dir/bondSection.cpp.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:/*****************************************************************************
        -:    2:<GPL_HEADER>
        -:    3:
        -:    4:    PQ
        -:    5:    Copyright (C) 2023-now  Jakob Gamper
        -:    6:
        -:    7:    This program is free software: you can redistribute it and/or modify
        -:    8:    it under the terms of the GNU General Public License as published by
        -:    9:    the Free Software Foundation, either version 3 of the License, or
        -:   10:    (at your option) any later version.
        -:   11:
        -:   12:    This program is distributed in the hope that it will be useful,
        -:   13:    but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   14:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   15:    GNU General Public License for more details.
        -:   16:
        -:   17:    You should have received a copy of the GNU General Public License
        -:   18:    along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   19:
        -:   20:<GPL_HEADER>
        -:   21:******************************************************************************/
        -:   22:
        -:   23:#include "bondSection.hpp"
        -:   24:
        -:   25:#include "bondForceField.hpp"    // for BondForceField
        -:   26:#include "engine.hpp"            // for Engine
        -:   27:#include "exceptions.hpp"        // for TopologyException
        -:   28:#include "forceFieldClass.hpp"   // for ForceField
        -:   29:#include "simulationBox.hpp"     // for SimulationBox
        -:   30:
        -:   31:#include <format>   // for format
        -:   32:#include <string>   // for stoul, string, operator==, char_traits
        -:   33:#include <vector>   // for vector
        -:   34:
        -:   35:using namespace input::topology;
        -:   36:
        -:   37:/**
        -:   38: * @brief processes the bond section of the topology file
        -:   39: *
        -:   40: * @details one line consists of 3 or 4 elements:
        -:   41: * 1. atom index 1
        -:   42: * 2. atom index 2
        -:   43: * 3. bond type
        -:   44: * 4. linker marked with a '*'
        -:   45: *
        -:   46: * @param line
        -:   47: * @param engine
        -:   48: *
        -:   49: * @throws customException::TopologyException if number of elements in line is not 3 or 4
        -:   50: * @throws customException::TopologyException if atom indices are the same (=same atoms)
        -:   51: * @throws customException::TopologyException if forth element is not a '*'
        -:   52: */
function input::topology::BondSection::processSection(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, engine::Engine&) called 0 returned 0% blocks executed 0%
    #####:   53:void BondSection::processSection(std::vector<std::string> &lineElements, engine::Engine &engine)
        -:   54:{
    #####:   55:    if (lineElements.size() != 3 && lineElements.size() != 4)
    %%%%%:   55-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:   55-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:   55-block  2
    %%%%%:   55-block  3
    %%%%%:   55-block  4
branch  6 never executed (fallthrough)
branch  7 never executed
    #####:   56:        throw customException::TopologyException(std::format(
    %%%%%:   56-block  0
call    0 never executed
    $$$$$:   56-block  1
call    1 never executed
    $$$$$:   56-block  2
        -:   57:            "Wrong number of arguments in topology file bond section at line {} - number of elements has to be 3 or 4!",
    #####:   58:            _lineNumber));
    %%%%%:   58-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:   58-block  1
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
call    8 never executed
    $$$$$:   58-block  2
call    9 never executed
        -:   59:
    #####:   60:    const auto atom1    = stoul(lineElements[0]);
    %%%%%:   60-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:   61:    const auto atom2    = stoul(lineElements[1]);
    %%%%%:   61-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:   62:    const auto bondType = stoul(lineElements[2]);
    %%%%%:   62-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:   63:    auto       isLinker = false;
        -:   64:
    #####:   65:    if (4 == lineElements.size())
    %%%%%:   65-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:   66:    {
    #####:   67:        if (lineElements[3] == "*")
    %%%%%:   67-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:   67-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    #####:   68:            isLinker = true;
    %%%%%:   68-block  0
        -:   69:        else
        -:   70:            throw customException::TopologyException(
    #####:   71:                std::format("Forth entry in topology file in bond section has to be a \'*\' or empty at line {}!", _lineNumber));
    %%%%%:   71-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:   71-block  1
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%:   71-block  2
call    8 never executed
call    9 never executed
    $$$$$:   71-block  3
call   10 never executed
    $$$$$:   71-block  4
    $$$$$:   71-block  5
call   11 never executed
        -:   72:    }
        -:   73:
    #####:   74:    if (atom1 == atom2)
    %%%%%:   74-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:   75:        throw customException::TopologyException(
    #####:   76:            std::format("Topology file shake section at line {} - atoms cannot be the same!", _lineNumber));
    %%%%%:   76-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:   76-block  1
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%:   76-block  2
call    8 never executed
call    9 never executed
    $$$$$:   76-block  3
call   10 never executed
    $$$$$:   76-block  4
    $$$$$:   76-block  5
call   11 never executed
        -:   77:
    #####:   78:    const auto [molecule1, atomIndex1] = engine.getSimulationBox().findMoleculeByAtomIndex(atom1);
    %%%%%:   78-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:   78-block  1
call    4 never executed
call    5 never executed
    #####:   79:    const auto [molecule2, atomIndex2] = engine.getSimulationBox().findMoleculeByAtomIndex(atom2);
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:   79-block  0
call    4 never executed
call    5 never executed
        -:   80:
    #####:   81:    auto bondForceField = forceField::BondForceField(molecule1, molecule2, atomIndex1, atomIndex2, bondType);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   82:    bondForceField.setIsLinker(isLinker);
    %%%%%:   82-block  0
call    0 never executed
        -:   83:
    #####:   84:    engine.getForceField().addBond(bondForceField);
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:   85:}
    %%%%%:   85-block  0
call    0 never executed
    $$$$$:   85-block  1
call    1 never executed
        -:   86:
        -:   87:/**
        -:   88: * @brief checks if bond sections ends normally
        -:   89: *
        -:   90: * @param endedNormal
        -:   91: *
        -:   92: * @throws customException::TopologyException if endedNormal is false
        -:   93: */
function input::topology::BondSection::endedNormally(bool) const called 0 returned 0% blocks executed 0%
    #####:   94:void BondSection::endedNormally(bool endedNormal) const
        -:   95:{
    #####:   96:    if (!endedNormal)
    %%%%%:   96-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:   97:        throw customException::TopologyException(
    #####:   98:            std::format("Topology file bond section at line {} - no end of section found!", _lineNumber));
    %%%%%:   98-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:   98-block  1
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%:   98-block  2
call    8 never executed
call    9 never executed
    $$$$$:   98-block  3
call   10 never executed
    $$$$$:   98-block  4
    $$$$$:   98-block  5
call   11 never executed
    #####:   99:}
    %%%%%:   99-block  0
