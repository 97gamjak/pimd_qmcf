        -:    0:Source:/home/jag/projects/pq/src/potential/potentialCellList.cpp
        -:    0:Graph:.build/src/potential/CMakeFiles/potential.dir/potentialCellList.cpp.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:/*****************************************************************************
        -:    2:<GPL_HEADER>
        -:    3:
        -:    4:    PQ
        -:    5:    Copyright (C) 2023-now  Jakob Gamper
        -:    6:
        -:    7:    This program is free software: you can redistribute it and/or modify
        -:    8:    it under the terms of the GNU General Public License as published by
        -:    9:    the Free Software Foundation, either version 3 of the License, or
        -:   10:    (at your option) any later version.
        -:   11:
        -:   12:    This program is distributed in the hope that it will be useful,
        -:   13:    but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   14:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   15:    GNU General Public License for more details.
        -:   16:
        -:   17:    You should have received a copy of the GNU General Public License
        -:   18:    along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   19:
        -:   20:<GPL_HEADER>
        -:   21:******************************************************************************/
        -:   22:
        -:   23:#include "cell.hpp"           // for Cell, simulationBox
        -:   24:#include "celllist.hpp"       // for CellList
        -:   25:#include "physicalData.hpp"   // for PhysicalData
        -:   26:#include "potential.hpp"
        -:   27:#include "simulationBox.hpp"   // for SimulationBox
        -:   28:
        -:   29:#include <cstddef>   // for size_t
        -:   30:#include <vector>    // for vector
        -:   31:
        -:   32:using namespace potential;
        -:   33:
        -:   34:/**
        -:   35: * @brief calculates forces, coulombic and non-coulombic energy for cell list routine
        -:   36: *
        -:   37: * @details first loops over all possible combinations of molecules within the same cell, then over all possible molecule
        -:   38: * combinations between adjacent cells. For the second loop over different cells, it is necessary to check if the two
        -:   39: * molecules are the same to avoid double counting. Due to the cutoff criterion which is based on atoms a molecule can be
        -:   40: * found in more than only one cell.
        -:   41: *
        -:   42: * @param simBox
        -:   43: * @param physicalData
        -:   44: * @param cellList
        -:   45: */
function potential::PotentialCellList::calculateForces(simulationBox::SimulationBox&, physicalData::PhysicalData&, simulationBox::CellList&) called 0 returned 0% blocks executed 0%
    #####:   46:inline void PotentialCellList::calculateForces(simulationBox::SimulationBox &simBox,
        -:   47:                                               physicalData::PhysicalData   &physicalData,
        -:   48:                                               simulationBox::CellList      &cellList)
        -:   49:{
    #####:   50:    const auto box = simBox.getBoxPtr();
    %%%%%:   50-block  0
call    0 never executed
        -:   51:
    #####:   52:    double totalCoulombEnergy    = 0.0;
    #####:   53:    double totalNonCoulombEnergy = 0.0;
        -:   54:
    #####:   55:    for (const auto &cell1 : cellList.getCells())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:   55-block  0
call    3 never executed
call    4 never executed
    %%%%%:   55-block  1
call    5 never executed
    %%%%%:   55-block  2
call    6 never executed
    %%%%%:   55-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed (fallthrough)
        -:   56:    {
    #####:   57:        const auto numberOfMolecules = cell1.getNumberOfMolecules();
call    0 never executed
        -:   58:
    #####:   59:        for (size_t mol1 = 0; mol1 < numberOfMolecules; ++mol1)
    %%%%%:   59-block  0
    %%%%%:   59-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
        -:   60:        {
    #####:   61:            auto *molecule1 = cell1.getMolecule(mol1);
    %%%%%:   61-block  0
call    0 never executed
        -:   62:
    #####:   63:            for (size_t mol2 = 0; mol2 < mol1; ++mol2)
    %%%%%:   63-block  0
    %%%%%:   63-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
        -:   64:            {
    #####:   65:                auto *molecule2 = cell1.getMolecule(mol2);
    %%%%%:   65-block  0
call    0 never executed
        -:   66:
    #####:   67:                for (const size_t atom1 : cell1.getAtomIndices(mol1))
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%:   67-block  0
call    3 never executed
    %%%%%:   67-block  1
call    4 never executed
    %%%%%:   67-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed (fallthrough)
        -:   68:                {
    #####:   69:                    for (const size_t atom2 : cell1.getAtomIndices(mol2))
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%:   69-block  0
call    3 never executed
    %%%%%:   69-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
        -:   70:                    {
    #####:   71:                        const auto [coulombEnergy, nonCoulombEnergy] =
    %%%%%:   71-block  0
call    0 never executed
call    1 never executed
    #####:   72:                            calculateSingleInteraction(*box, *molecule1, *molecule2, atom1, atom2);
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:   73:
    #####:   74:                        totalCoulombEnergy    += coulombEnergy;
    #####:   75:                        totalNonCoulombEnergy += nonCoulombEnergy;
call    0 never executed
        -:   76:                    }
        -:   77:                }
        -:   78:            }
        -:   79:        }
    #####:   80:    }
    %%%%%:   80-block  0
call    0 never executed
    $$$$$:   80-block  1
call    1 never executed
    #####:   81:    for (const auto &cell1 : cellList.getCells())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:   81-block  0
call    3 never executed
call    4 never executed
    %%%%%:   81-block  1
call    5 never executed
call    6 never executed
    %%%%%:   81-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed (fallthrough)
        -:   82:    {
    #####:   83:        const auto numberOfMoleculesInCell_i = cell1.getNumberOfMolecules();
call    0 never executed
        -:   84:
    #####:   85:        for (const auto *cell2 : cell1.getNeighbourCells())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:   85-block  0
call    3 never executed
call    4 never executed
    %%%%%:   85-block  1
call    5 never executed
    %%%%%:   85-block  2
call    6 never executed
    %%%%%:   85-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed (fallthrough)
        -:   86:        {
    #####:   87:            const auto numberOfMoleculesInCell_j = cell2->getNumberOfMolecules();
call    0 never executed
        -:   88:
    #####:   89:            for (size_t mol1 = 0; mol1 < numberOfMoleculesInCell_i; ++mol1)
    %%%%%:   89-block  0
    %%%%%:   89-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
        -:   90:            {
    #####:   91:                auto *molecule1 = cell1.getMolecule(mol1);
    %%%%%:   91-block  0
call    0 never executed
        -:   92:
    #####:   93:                for (const auto atom1 : cell1.getAtomIndices(mol1))
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%:   93-block  0
call    3 never executed
    %%%%%:   93-block  1
call    4 never executed
    %%%%%:   93-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed (fallthrough)
        -:   94:                {
    #####:   95:                    for (size_t mol2 = 0; mol2 < numberOfMoleculesInCell_j; ++mol2)
    %%%%%:   95-block  0
    %%%%%:   95-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
        -:   96:                    {
    #####:   97:                        auto *molecule2 = cell2->getMolecule(mol2);
    %%%%%:   97-block  0
call    0 never executed
        -:   98:
    #####:   99:                        if (molecule1 == molecule2)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  100:                            continue;
    %%%%%:  100-block  0
        -:  101:
    #####:  102:                        for (const auto atom2 : cell2->getAtomIndices(mol2))
    %%%%%:  102-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%:  102-block  1
call    3 never executed
    %%%%%:  102-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
        -:  103:                        {
    #####:  104:                            const auto [coulombEnergy, nonCoulombEnergy] =
    %%%%%:  104-block  0
call    0 never executed
call    1 never executed
    #####:  105:                                calculateSingleInteraction(*box, *molecule1, *molecule2, atom1, atom2);
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  106:
    #####:  107:                            totalCoulombEnergy    += coulombEnergy;
    #####:  108:                            totalNonCoulombEnergy += nonCoulombEnergy;
call    0 never executed
        -:  109:                        }
        -:  110:                    }
        -:  111:                }
        -:  112:            }
    #####:  113:        }
    %%%%%:  113-block  0
call    0 never executed
    $$$$$:  113-block  1
call    1 never executed
    #####:  114:    }
    %%%%%:  114-block  0
call    0 never executed
    $$$$$:  114-block  1
call    1 never executed
        -:  115:
    #####:  116:    physicalData.setCoulombEnergy(totalCoulombEnergy);
call    0 never executed
    #####:  117:    physicalData.setNonCoulombEnergy(totalNonCoulombEnergy);
call    0 never executed
    #####:  118:}
call    0 never executed
    $$$$$:  118-block  0
call    1 never executed
