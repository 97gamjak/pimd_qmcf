        -:    0:Source:/home/jag/software/gcc-13.1.0/install/include/c++/13.1.0/format
        -:    0:Graph:.build/src/input/topologyFileReader/CMakeFiles/topologyFileReader.dir/bondSection.cpp.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:// <format> Formatting -*- C++ -*-
        -:    2:
        -:    3:// Copyright The GNU Toolchain Authors.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file include/format
        -:   26: *  This is a Standard C++ Library header.
        -:   27: */
        -:   28:
        -:   29:#ifndef _GLIBCXX_FORMAT
        -:   30:#define _GLIBCXX_FORMAT 1
        -:   31:
        -:   32:#pragma GCC system_header
        -:   33:
        -:   34:#include <bits/requires_hosted.h> // for std::string
        -:   35:
        -:   36:#if __cplusplus >= 202002L
        -:   37:
        -:   38:#include <array>
        -:   39:#include <charconv>
        -:   40:#include <concepts>
        -:   41:#include <limits>
        -:   42:#include <locale>
        -:   43:#include <optional>
        -:   44:#include <span>
        -:   45:#include <string_view>
        -:   46:#include <string>
        -:   47:#include <variant>	       // monostate (TODO: move to bits/utility.h?)
        -:   48:#include <bits/ranges_base.h>  // input_range, range_reference_t
        -:   49:#include <bits/ranges_algobase.h> // ranges::copy
        -:   50:#include <bits/stl_iterator.h> // back_insert_iterator
        -:   51:#include <bits/stl_pair.h>     // __is_pair
        -:   52:#include <bits/utility.h>      // tuple_size_v
        -:   53:#include <ext/numeric_traits.h> // __int_traits
        -:   54:
        -:   55:#if !__has_builtin(__builtin_toupper)
        -:   56:# include <cctype>
        -:   57:#endif
        -:   58:
        -:   59:namespace std _GLIBCXX_VISIBILITY(default)
        -:   60:{
        -:   61:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   62:
        -:   63:// 201907 Text Formatting, Integration of chrono, printf corner cases.
        -:   64:// 202106 std::format improvements.
        -:   65:// 202110 Fixing locale handling in chrono formatters, generator-like types.
        -:   66:// 202207 Encodings in localized formatting of chrono, basic-format-string.
        -:   67:#define __cpp_lib_format 202106L
        -:   68:
        -:   69:#if __cplusplus > 202002L
        -:   70:// 202207 P2286R8 Formatting Ranges
        -:   71:// 202207 P2585R1 Improving default container formatting
        -:   72:// TODO: #define __cpp_lib_format_ranges 202207L
        -:   73:#endif
        -:   74:
        -:   75:  // [format.context], class template basic_format_context
        -:   76:  template<typename _Out, typename _CharT> class basic_format_context;
        -:   77:
        -:   78:/// @cond undocumented
        -:   79:namespace __format
        -:   80:{
        -:   81:  // Type-erased character sink.
        -:   82:  template<typename _CharT> struct _Sink;
        -:   83:  // Output iterator that writes to a type-erase character sink.
        -:   84:  template<typename _CharT>
        -:   85:    class _Sink_iter;
        -:   86:} // namespace __format
        -:   87:/// @endcond
        -:   88:
        -:   89:  using format_context
        -:   90:    = basic_format_context<__format::_Sink_iter<char>, char>;
        -:   91:  using wformat_context
        -:   92:    = basic_format_context<__format::_Sink_iter<wchar_t>, wchar_t>;
        -:   93:
        -:   94:  // [format.args], class template basic_format_args
        -:   95:  template<typename _Context> class basic_format_args;
        -:   96:  using format_args = basic_format_args<format_context>;
        -:   97:  using wformat_args = basic_format_args<wformat_context>;
        -:   98:
        -:   99:  // [format.arguments], arguments
        -:  100:  // [format.arg], class template basic_format_arg
        -:  101:  template<typename _Context>
        -:  102:    class basic_format_arg;
        -:  103:
        -:  104:  // [format.fmt.string], class template basic_format_string
        -:  105:
        -:  106:  /** A compile-time checked format string for the specified argument types.
        -:  107:   *
        -:  108:   * @since C++23 but available as an extension in C++20.
        -:  109:   */
        -:  110:  template<typename _CharT, typename... _Args>
        -:  111:    struct basic_format_string
        -:  112:    {
        -:  113:      template<typename _Tp>
        -:  114:	requires convertible_to<const _Tp&, basic_string_view<_CharT>>
        -:  115:	consteval
        -:  116:	basic_format_string(const _Tp& __s);
        -:  117:
        -:  118:      [[__gnu__::__always_inline__]]
        -:  119:      constexpr basic_string_view<_CharT>
        -:  120:      get() const noexcept
    #####:  121:      { return _M_str; }
        -:  122:
        -:  123:    private:
        -:  124:      basic_string_view<_CharT> _M_str;
        -:  125:    };
        -:  126:
        -:  127:  template<typename... _Args>
        -:  128:    using format_string = basic_format_string<char, type_identity_t<_Args>...>;
        -:  129:
        -:  130:  template<typename... _Args>
        -:  131:    using wformat_string
        -:  132:      = basic_format_string<wchar_t, type_identity_t<_Args>...>;
        -:  133:
        -:  134:  // [format.formatter], formatter
        -:  135:
        -:  136:  /// The primary template of std::formatter is disabled.
        -:  137:  template<typename _Tp, typename _CharT = char>
        -:  138:    struct formatter
        -:  139:    {
        -:  140:      formatter() = delete; // No std::formatter specialization for this type.
        -:  141:      formatter(const formatter&) = delete;
        -:  142:      formatter& operator=(const formatter&) = delete;
        -:  143:    };
        -:  144:
        -:  145:  // [format.error], class format_error
        -:  146:  class format_error : public runtime_error
        -:  147:  {
        -:  148:  public:
        -:  149:    explicit format_error(const string& __what) : runtime_error(__what) { }
function std::format_error::format_error(char const*) called 0 returned 0% blocks executed 0%
    #####:  150:    explicit format_error(const char* __what) : runtime_error(__what) { }
    %%%%%:  150-block  0
call    0 never executed
        -:  151:  };
        -:  152:
        -:  153:  /// @cond undocumented
        -:  154:  [[noreturn]]
        -:  155:  inline void
function std::__throw_format_error(char const*) called 0 returned 0% blocks executed 0%
    #####:  156:  __throw_format_error(const char* __what)
    #####:  157:  { _GLIBCXX_THROW_OR_ABORT(format_error(__what)); }
    %%%%%:  157-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  157-block  1
call    4 never executed
    $$$$$:  157-block  2
call    5 never executed
        -:  158:
        -:  159:namespace __format
        -:  160:{
        -:  161:  // XXX use named functions for each constexpr error?
        -:  162:
        -:  163:  [[noreturn]]
        -:  164:  inline void
function std::__format::__unmatched_left_brace_in_format_string() called 0 returned 0% blocks executed 0%
    #####:  165:  __unmatched_left_brace_in_format_string()
    #####:  166:  { __throw_format_error("format error: unmatched '{' in format string"); }
        -:  167:
        -:  168:  [[noreturn]]
        -:  169:  inline void
function std::__format::__unmatched_right_brace_in_format_string() called 0 returned 0% blocks executed 0%
    #####:  170:  __unmatched_right_brace_in_format_string()
    #####:  171:  { __throw_format_error("format error: unmatched '}' in format string"); }
        -:  172:
        -:  173:  [[noreturn]]
        -:  174:  inline void
function std::__format::__conflicting_indexing_in_format_string() called 0 returned 0% blocks executed 0%
    #####:  175:  __conflicting_indexing_in_format_string()
    #####:  176:  { __throw_format_error("format error: conflicting indexing style in format string"); }
        -:  177:
        -:  178:  [[noreturn]]
        -:  179:  inline void
function std::__format::__invalid_arg_id_in_format_string() called 0 returned 0% blocks executed 0%
    #####:  180:  __invalid_arg_id_in_format_string()
    #####:  181:  { __throw_format_error("format error: invalid arg-id in format string"); }
        -:  182:
        -:  183:  [[noreturn]]
        -:  184:  inline void
function std::__format::__failed_to_parse_format_spec() called 0 returned 0% blocks executed 0%
    #####:  185:  __failed_to_parse_format_spec()
    #####:  186:  { __throw_format_error("format error: failed to parse format-spec"); }
        -:  187:} // namespace __format
        -:  188:/// @endcond
        -:  189:
        -:  190:  // [format.parse.ctx], class template basic_format_parse_context
        -:  191:  template<typename _CharT> class basic_format_parse_context;
        -:  192:  using format_parse_context = basic_format_parse_context<char>;
        -:  193:  using wformat_parse_context = basic_format_parse_context<wchar_t>;
        -:  194:
        -:  195:  template<typename _CharT>
        -:  196:    class basic_format_parse_context
        -:  197:    {
        -:  198:    public:
        -:  199:      using char_type = _CharT;
        -:  200:      using const_iterator = typename basic_string_view<_CharT>::const_iterator;
        -:  201:      using iterator = const_iterator;
        -:  202:
        -:  203:      constexpr explicit
function std::basic_format_parse_context<char>::basic_format_parse_context(std::basic_string_view<char, std::char_traits<char> >, unsigned long) called 0 returned 0% blocks executed 0%
    #####:  204:      basic_format_parse_context(basic_string_view<_CharT> __fmt,
        -:  205:				 size_t __num_args = 0) noexcept
    #####:  206:      : _M_begin(__fmt.begin()), _M_end(__fmt.end()), _M_num_args(__num_args)
    %%%%%:  206-block  0
call    0 never executed
call    1 never executed
    #####:  207:      { }
        -:  208:
        -:  209:      basic_format_parse_context(const basic_format_parse_context&) = delete;
        -:  210:      void operator=(const basic_format_parse_context&) = delete;
        -:  211:
function std::basic_format_parse_context<char>::begin() const called 0 returned 0% blocks executed 0%
    #####:  212:      constexpr const_iterator begin() const noexcept { return _M_begin; }
    %%%%%:  212-block  0
function std::basic_format_parse_context<char>::end() const called 0 returned 0% blocks executed 0%
    #####:  213:      constexpr const_iterator end() const noexcept { return _M_end; }
    %%%%%:  213-block  0
        -:  214:
        -:  215:      constexpr void
function std::basic_format_parse_context<char>::advance_to(char const*) called 0 returned 0% blocks executed 0%
    #####:  216:      advance_to(const_iterator __it) noexcept
    #####:  217:      { _M_begin = __it; }
        -:  218:
        -:  219:      constexpr size_t
function std::basic_format_parse_context<char>::next_arg_id() called 0 returned 0% blocks executed 0%
    #####:  220:      next_arg_id()
        -:  221:      {
    #####:  222:	if (_M_indexing == _Manual)
    %%%%%:  222-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  223:	  __format::__conflicting_indexing_in_format_string();
    %%%%%:  223-block  0
call    0 never executed
    #####:  224:	_M_indexing = _Auto;
        -:  225:
        -:  226:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  227:	// 3825. Missing compile-time argument id check in next_arg_id
    #####:  228:	if (std::is_constant_evaluated())
    %%%%%:  228-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  229:	  if (_M_next_arg_id == _M_num_args)
    %%%%%:  229-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  230:	    __format::__invalid_arg_id_in_format_string();
    %%%%%:  230-block  0
call    0 never executed
    #####:  231:	return _M_next_arg_id++;
    %%%%%:  231-block  0
        -:  232:      }
        -:  233:
        -:  234:      constexpr void
function std::basic_format_parse_context<char>::check_arg_id(unsigned long) called 0 returned 0% blocks executed 0%
    #####:  235:      check_arg_id(size_t __id)
        -:  236:      {
    #####:  237:	if (_M_indexing == _Auto)
    %%%%%:  237-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  238:	  __format::__conflicting_indexing_in_format_string();
    %%%%%:  238-block  0
call    0 never executed
    #####:  239:	_M_indexing = _Manual;
        -:  240:
    #####:  241:	if (std::is_constant_evaluated())
    %%%%%:  241-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  242:	  if (__id >= _M_num_args)
    %%%%%:  242-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  243:	    __format::__invalid_arg_id_in_format_string();
    %%%%%:  243-block  0
call    0 never executed
    #####:  244:      }
        -:  245:
        -:  246:    private:
        -:  247:      iterator _M_begin;
        -:  248:      iterator _M_end;
        -:  249:      enum _Indexing { _Unknown, _Manual, _Auto };
        -:  250:      _Indexing _M_indexing = _Unknown;
        -:  251:      size_t _M_next_arg_id = 0;
        -:  252:      size_t _M_num_args;
        -:  253:    };
        -:  254:
        -:  255:/// @cond undocumented
        -:  256:  template<typename _Tp, template<typename...> class _Class>
        -:  257:    static constexpr bool __is_specialization_of = false;
        -:  258:  template<template<typename...> class _Class, typename... _Args>
        -:  259:    static constexpr bool __is_specialization_of<_Class<_Args...>, _Class>
        -:  260:      = true;
        -:  261:
        -:  262:namespace __format
        -:  263:{
        -:  264:  // pre: first != last
        -:  265:  template<typename _CharT>
        -:  266:    constexpr pair<unsigned short, const _CharT*>
function std::pair<unsigned short, char const*> std::__format::__parse_integer<char>(char const*, char const*) called 0 returned 0% blocks executed 0%
    #####:  267:    __parse_integer(const _CharT* __first, const _CharT* __last)
        -:  268:    {
    #####:  269:      if (__first == __last)
    %%%%%:  269-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  270:	__builtin_unreachable();
    %%%%%:  270-block  0
call    0 never executed
        -:  271:
        -:  272:      // TODO: use this loop unconditionally?
        -:  273:      // Most integers used for arg-id, width or precision will be small.
    #####:  274:      if (is_constant_evaluated())
    %%%%%:  274-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  275:	{
    #####:  276:	  auto __next = __first;
    #####:  277:	  unsigned short __val = 0;
    #####:  278:	  while (__next != __last && '0' <= *__next && *__next <= '9')
    %%%%%:  278-block  0
    %%%%%:  278-block  1
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  278-block  2
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  278-block  3
branch  4 never executed
branch  5 never executed (fallthrough)
        -:  279:	    {
    #####:  280:	      __val = (__val * 10) + (*__next - '0'); // TODO check overflow?
    #####:  281:	      ++__next;
    %%%%%:  281-block  0
        -:  282:	    }
    #####:  283:	  if (__next == __first)
    %%%%%:  283-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  284:	    return {0, nullptr};
    %%%%%:  284-block  0
call    0 never executed
    %%%%%:  284-block  1
    #####:  285:	  return {__val, __next};
    %%%%%:  285-block  0
call    0 never executed
    %%%%%:  285-block  1
        -:  286:	}
        -:  287:
    #####:  288:      unsigned short __val = 0;
        -:  289:      if constexpr (is_same_v<_CharT, char>)
        -:  290:	{
    #####:  291:	  auto [ptr, ec] = std::from_chars(__first, __last, __val);
    %%%%%:  291-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  292:	  if (ec == errc{})
    %%%%%:  292-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  293:	    return {__val, ptr};
    %%%%%:  293-block  0
call    0 never executed
    %%%%%:  293-block  1
    #####:  294:	  return {0, nullptr};
    %%%%%:  294-block  0
call    0 never executed
    %%%%%:  294-block  1
        -:  295:	}
        -:  296:      else
        -:  297:	{
        -:  298:	  constexpr int __n = 32;
        -:  299:	  char __buf[__n]{};
        -:  300:	  for (int __i = 0; __i < __n && __first != __last; ++__i)
        -:  301:	    __buf[__i] = __first[__i];
        -:  302:	  auto [__v, __ptr] = __format::__parse_integer(__buf, __buf + __n);
        -:  303:	  return {__v, __first + (__ptr - __buf)};
        -:  304:	}
        -:  305:    }
        -:  306:
        -:  307:  template<typename _CharT>
        -:  308:    constexpr pair<unsigned short, const _CharT*>
function std::pair<unsigned short, char const*> std::__format::__parse_arg_id<char>(char const*, char const*) called 0 returned 0% blocks executed 0%
    #####:  309:    __parse_arg_id(const _CharT* __first, const _CharT* __last)
        -:  310:    {
    #####:  311:      if (__first == __last)
    %%%%%:  311-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  312:	__builtin_unreachable();
    %%%%%:  312-block  0
call    0 never executed
        -:  313:
    #####:  314:      if (*__first == '0')
    %%%%%:  314-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  315:	return {0, __first + 1}; // No leading zeros allowed, so '0...' == 0
    %%%%%:  315-block  0
call    0 never executed
    %%%%%:  315-block  1
        -:  316:
    #####:  317:      if ('1' <= *__first && *__first <= '9')
    %%%%%:  317-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  317-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        -:  318:	{
    #####:  319:	  const unsigned short __id = *__first - '0';
    #####:  320:	  const auto __next = __first + 1;
        -:  321:	  // Optimize for most likely case of single digit arg-id.
    #####:  322:	  if (__next == __last || !('0' <= *__next && *__next <= '9'))
    %%%%%:  322-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  322-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  322-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    #####:  323:	    return {__id, __next};
    %%%%%:  323-block  0
call    0 never executed
    %%%%%:  323-block  1
        -:  324:	  else
    #####:  325:	    return __format::__parse_integer(__first, __last);
    %%%%%:  325-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  325-block  1
        -:  326:	}
    #####:  327:      return {0, nullptr};
    %%%%%:  327-block  0
call    0 never executed
    %%%%%:  327-block  1
        -:  328:    }
        -:  329:
        -:  330:  enum _Pres_type {
        -:  331:    _Pres_none = 0, // Default type (not valid for integer presentation types).
        -:  332:    // Presentation types for integral types (including bool and charT).
        -:  333:    _Pres_d = 1, _Pres_b, _Pres_B, _Pres_o, _Pres_x, _Pres_X, _Pres_c,
        -:  334:    // Presentation types for floating-point types.
        -:  335:    _Pres_a = 1, _Pres_A, _Pres_e, _Pres_E, _Pres_f, _Pres_g, _Pres_G,
        -:  336:    _Pres_p = 0, _Pres_P,   // For pointers.
        -:  337:    _Pres_s = 0,            // For strings and bool.
        -:  338:    _Pres_esc = 0xf,        // For strings and charT.
        -:  339:  };
        -:  340:
        -:  341:  enum _Align {
        -:  342:    _Align_default,
        -:  343:    _Align_left,
        -:  344:    _Align_right,
        -:  345:    _Align_centre,
        -:  346:  };
        -:  347:
        -:  348:  enum _Sign {
        -:  349:    _Sign_default,
        -:  350:    _Sign_plus,
        -:  351:    _Sign_minus,  // XXX does this need to be distinct from _Sign_default?
        -:  352:    _Sign_space,
        -:  353:  };
        -:  354:
        -:  355:  enum _WidthPrec {
        -:  356:    _WP_none,    // No width/prec specified.
        -:  357:    _WP_value,   // Fixed width/prec specified.
        -:  358:    _WP_from_arg // Use a formatting argument for width/prec.
        -:  359:  };
        -:  360:
        -:  361:  template<typename _Context>
        -:  362:    size_t
        -:  363:    __int_from_arg(const basic_format_arg<_Context>& __arg);
        -:  364:
function std::__format::__is_digit(char) called 0 returned 0% blocks executed 0%
    #####:  365:  constexpr bool __is_digit(char __c)
    #####:  366:  { return std::__detail::__from_chars_alnum_to_val(__c) < 10; }
    %%%%%:  366-block  0
call    0 never executed
        -:  367:
function std::__format::__is_xdigit(char) called 0 returned 0% blocks executed 0%
    #####:  368:  constexpr bool __is_xdigit(char __c)
    #####:  369:  { return std::__detail::__from_chars_alnum_to_val(__c) < 16; }
    %%%%%:  369-block  0
call    0 never executed
        -:  370:
        -:  371:  template<typename _CharT>
        -:  372:    struct _Spec
        -:  373:    {
        -:  374:      _Align     _M_align : 2;
        -:  375:      _Sign      _M_sign : 2;
        -:  376:      unsigned   _M_alt : 1;
        -:  377:      unsigned   _M_localized : 1;
        -:  378:      unsigned   _M_zero_fill : 1;
        -:  379:      _WidthPrec _M_width_kind : 2;
        -:  380:      _WidthPrec _M_prec_kind : 2;
        -:  381:      _Pres_type _M_type : 4;
        -:  382:      unsigned short _M_width;
        -:  383:      unsigned short _M_prec;
        -:  384:      _CharT _M_fill = ' ';
        -:  385:
        -:  386:      using iterator = typename basic_string_view<_CharT>::iterator;
        -:  387:
        -:  388:      static constexpr _Align
function std::__format::_Spec<char>::_S_align(char) called 0 returned 0% blocks executed 0%
    #####:  389:      _S_align(_CharT __c) noexcept
        -:  390:      {
    #####:  391:	switch (__c)
    %%%%%:  391-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  392:	{
    #####:  393:	  case '<': return _Align_left;
    %%%%%:  393-block  0
    #####:  394:	  case '>': return _Align_right;
    %%%%%:  394-block  0
    #####:  395:	  case '^': return _Align_centre;
    %%%%%:  395-block  0
    #####:  396:	  default: return _Align_default;
    %%%%%:  396-block  0
        -:  397:	}
        -:  398:      }
        -:  399:
        -:  400:      // pre: __first != __last
        -:  401:      constexpr iterator
function std::__format::_Spec<char>::_M_parse_fill_and_align(char const*, char const*) called 0 returned 0% blocks executed 0%
    #####:  402:      _M_parse_fill_and_align(iterator __first, iterator __last) noexcept
        -:  403:      {
    #####:  404:	if (*__first != '{')
    %%%%%:  404-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  405:	  {
        -:  406:	    // TODO: accept any UCS scalar value as fill character.
        -:  407:	    // If narrow source encoding is UTF-8 then accept multibyte char.
    #####:  408:	    if (__last - __first >= 2)
    %%%%%:  408-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  409:	      {
    #####:  410:		if (_Align __align = _S_align(__first[1]))
    %%%%%:  410-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  411:		  {
    #####:  412:		    _M_fill = *__first;
    #####:  413:		    _M_align = __align;
    #####:  414:		    return __first + 2;
    %%%%%:  414-block  0
        -:  415:		  }
        -:  416:	      }
        -:  417:
    #####:  418:	    if (_Align __align = _S_align(__first[0]))
    %%%%%:  418-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  419:	      {
    #####:  420:		_M_fill = ' ';
    #####:  421:		_M_align = __align;
    #####:  422:		return __first + 1;
    %%%%%:  422-block  0
        -:  423:	      }
        -:  424:	  }
    #####:  425:	return __first;
    %%%%%:  425-block  0
        -:  426:      }
        -:  427:
        -:  428:      static constexpr _Sign
function std::__format::_Spec<char>::_S_sign(char) called 0 returned 0% blocks executed 0%
    #####:  429:      _S_sign(_CharT __c) noexcept
        -:  430:      {
    #####:  431:	switch (__c)
    %%%%%:  431-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  432:	{
    #####:  433:	  case '+': return _Sign_plus;
    %%%%%:  433-block  0
    #####:  434:	  case '-': return _Sign_minus;
    %%%%%:  434-block  0
    #####:  435:	  case ' ': return _Sign_space;
    %%%%%:  435-block  0
    #####:  436:	  default:  return _Sign_default;
    %%%%%:  436-block  0
        -:  437:	}
        -:  438:      }
        -:  439:
        -:  440:      // pre: __first != __last
        -:  441:      constexpr iterator
function std::__format::_Spec<char>::_M_parse_sign(char const*, char const*) called 0 returned 0% blocks executed 0%
    #####:  442:      _M_parse_sign(iterator __first, iterator) noexcept
        -:  443:      {
    #####:  444:	if (_Sign __sign = _S_sign(*__first))
    %%%%%:  444-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  445:	  {
    #####:  446:	    _M_sign = __sign;
    #####:  447:	    return __first + 1;
    %%%%%:  447-block  0
        -:  448:	  }
    #####:  449:	return __first;
    %%%%%:  449-block  0
        -:  450:      }
        -:  451:
        -:  452:      // pre: *__first is valid
        -:  453:      constexpr iterator
function std::__format::_Spec<char>::_M_parse_alternate_form(char const*, char const*) called 0 returned 0% blocks executed 0%
    #####:  454:      _M_parse_alternate_form(iterator __first, iterator) noexcept
        -:  455:      {
    #####:  456:	if (*__first == '#')
    %%%%%:  456-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  457:	  {
    #####:  458:	    _M_alt = true;
    #####:  459:	    ++__first;
    %%%%%:  459-block  0
        -:  460:	  }
    #####:  461:	return __first;
    %%%%%:  461-block  0
        -:  462:      }
        -:  463:
        -:  464:      // pre: __first != __last
        -:  465:      constexpr iterator
function std::__format::_Spec<char>::_M_parse_zero_fill(char const*, char const*) called 0 returned 0% blocks executed 0%
    #####:  466:      _M_parse_zero_fill(iterator __first, iterator /* __last */) noexcept
        -:  467:      {
    #####:  468:	if (*__first == '0')
    %%%%%:  468-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  469:	  {
    #####:  470:	    _M_zero_fill = true;
    #####:  471:	    ++__first;
    %%%%%:  471-block  0
        -:  472:	  }
    #####:  473:	return __first;
    %%%%%:  473-block  0
        -:  474:      }
        -:  475:
        -:  476:      // pre: __first != __last
        -:  477:      static constexpr iterator
function std::__format::_Spec<char>::_S_parse_width_or_precision(char const*, char const*, unsigned short&, bool&, std::basic_format_parse_context<char>&) called 0 returned 0% blocks executed 0%
    #####:  478:      _S_parse_width_or_precision(iterator __first, iterator __last,
        -:  479:				  unsigned short& __val, bool& __arg_id,
        -:  480:				  basic_format_parse_context<_CharT>& __pc)
        -:  481:      {
    #####:  482:	if (__format::__is_digit(*__first))
    %%%%%:  482-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  483:	  {
    #####:  484:	    auto [__v, __ptr] = __format::__parse_integer(__first, __last);
    %%%%%:  484-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  484-block  1
call    3 never executed
call    4 never executed
    #####:  485:	    if (!__ptr)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  486:	      __throw_format_error("format error: invalid width or precision "
    %%%%%:  486-block  0
call    0 never executed
        -:  487:				   "in format-spec");
    #####:  488:	    __first = __ptr;
    #####:  489:	    __val = __v;
    %%%%%:  489-block  0
        -:  490:	  }
    #####:  491:	else if (*__first == '{')
    %%%%%:  491-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  492:	  {
    #####:  493:	    __arg_id = true;
    #####:  494:	    ++__first;
    #####:  495:	    if (__first == __last)
    %%%%%:  495-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  496:	      __format::__unmatched_left_brace_in_format_string();
    %%%%%:  496-block  0
call    0 never executed
    #####:  497:	    if (*__first == '}')
    %%%%%:  497-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  498:	      __val = __pc.next_arg_id();
    %%%%%:  498-block  0
call    0 never executed
        -:  499:	    else
        -:  500:	      {
    #####:  501:		auto [__v, __ptr] = __format::__parse_arg_id(__first, __last);
    %%%%%:  501-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  501-block  1
call    3 never executed
call    4 never executed
    #####:  502:		if (__ptr == nullptr || __ptr == __last || *__ptr != '}')
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  502-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  502-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    #####:  503:		  __format::__invalid_arg_id_in_format_string();
    %%%%%:  503-block  0
call    0 never executed
    #####:  504:		__first = __ptr;
    #####:  505:		__pc.check_arg_id(__v);
    %%%%%:  505-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  506:		__val = __v;
    %%%%%:  506-block  0
        -:  507:	      }
    #####:  508:	    ++__first; // past the '}'
    %%%%%:  508-block  0
        -:  509:	  }
    #####:  510:	return __first;
    %%%%%:  510-block  0
    %%%%%:  510-block  1
        -:  511:      }
        -:  512:
        -:  513:      // pre: __first != __last
        -:  514:      constexpr iterator
function std::__format::_Spec<char>::_M_parse_width(char const*, char const*, std::basic_format_parse_context<char>&) called 0 returned 0% blocks executed 0%
    #####:  515:      _M_parse_width(iterator __first, iterator __last,
        -:  516:		     basic_format_parse_context<_CharT>& __pc)
        -:  517:      {
    #####:  518:	bool __arg_id = false;
    #####:  519:	if (*__first == '0')
    %%%%%:  519-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  520:	  __throw_format_error("format error: width must be non-zero in "
    %%%%%:  520-block  0
call    0 never executed
        -:  521:			       "format string");
    #####:  522:	auto __next = _S_parse_width_or_precision(__first, __last, _M_width,
    %%%%%:  522-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  523:						  __arg_id, __pc);
    #####:  524:	if (__next != __first)
    %%%%%:  524-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  525:	  _M_width_kind = __arg_id ? _WP_from_arg : _WP_value;
    %%%%%:  525-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  525-block  1
    %%%%%:  525-block  2
    %%%%%:  525-block  3
    #####:  526:	return __next;
    %%%%%:  526-block  0
    %%%%%:  526-block  1
        -:  527:      }
        -:  528:
        -:  529:      // pre: __first != __last
        -:  530:      constexpr iterator
function std::__format::_Spec<char>::_M_parse_precision(char const*, char const*, std::basic_format_parse_context<char>&) called 0 returned 0% blocks executed 0%
    #####:  531:      _M_parse_precision(iterator __first, iterator __last,
        -:  532:			 basic_format_parse_context<_CharT>& __pc)
        -:  533:      {
    #####:  534:	if (__first[0] != '.')
    %%%%%:  534-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  535:	  return __first;
    %%%%%:  535-block  0
        -:  536:
    #####:  537:	++__first;
    #####:  538:	bool __arg_id = false;
    #####:  539:	auto __next = _S_parse_width_or_precision(__first, __last, _M_prec,
    %%%%%:  539-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  540:						  __arg_id, __pc);
    #####:  541:	if (__next == __first)
    %%%%%:  541-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  542:	  __throw_format_error("format error: missing precision after '.' in "
    %%%%%:  542-block  0
call    0 never executed
        -:  543:			       "format string");
    #####:  544:	_M_prec_kind = __arg_id ? _WP_from_arg : _WP_value;
    %%%%%:  544-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  544-block  1
    %%%%%:  544-block  2
    #####:  545:	return __next;
    %%%%%:  545-block  0
        -:  546:      }
        -:  547:
        -:  548:      // pre: __first != __last
        -:  549:      constexpr iterator
function std::__format::_Spec<char>::_M_parse_locale(char const*, char const*) called 0 returned 0% blocks executed 0%
    #####:  550:      _M_parse_locale(iterator __first, iterator /* __last */) noexcept
        -:  551:      {
    #####:  552:	if (*__first == 'L')
    %%%%%:  552-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  553:	  {
    #####:  554:	    _M_localized = true;
    #####:  555:	    ++__first;
    %%%%%:  555-block  0
        -:  556:	  }
    #####:  557:	return __first;
    %%%%%:  557-block  0
        -:  558:      }
        -:  559:
        -:  560:      template<typename _Context>
        -:  561:	size_t
function unsigned long std::__format::_Spec<char>::_M_get_width<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####:  562:	_M_get_width(_Context& __ctx) const
        -:  563:	{
    #####:  564:	  size_t __width = 0;
    #####:  565:	  if (_M_width_kind == _WP_value)
    %%%%%:  565-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  566:	    __width = _M_width;
    %%%%%:  566-block  0
    #####:  567:	  else if (_M_width_kind == _WP_from_arg)
    %%%%%:  567-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  568:	    __width = __format::__int_from_arg(__ctx.arg(_M_width));
    %%%%%:  568-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  568-block  1
    #####:  569:	  return __width;
    %%%%%:  569-block  0
    %%%%%:  569-block  1
        -:  570:	}
        -:  571:
        -:  572:      template<typename _Context>
        -:  573:	size_t
function unsigned long std::__format::_Spec<char>::_M_get_precision<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####:  574:	_M_get_precision(_Context& __ctx) const
        -:  575:	{
    #####:  576:	  size_t __prec = -1;
    #####:  577:	  if (_M_prec_kind == _WP_value)
    %%%%%:  577-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  578:	    __prec = _M_prec;
    %%%%%:  578-block  0
    #####:  579:	  else if (_M_prec_kind == _WP_from_arg)
    %%%%%:  579-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  580:	    __prec = __format::__int_from_arg(__ctx.arg(_M_prec));
    %%%%%:  580-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  580-block  1
    #####:  581:	  return __prec;
    %%%%%:  581-block  0
    %%%%%:  581-block  1
        -:  582:	}
        -:  583:    };
        -:  584:
        -:  585:  template<typename _Int>
        -:  586:    inline char*
    #####:  587:    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
        -:  588:    {
    #####:  589:      if (__i < 0)
    #####:  590:	*__dest = '-';
    #####:  591:      else if (__sign == _Sign_plus)
    #####:  592:	*__dest = '+';
    #####:  593:      else if (__sign == _Sign_space)
    #####:  594:	*__dest = ' ';
        -:  595:      else
    #####:  596:	++__dest;
    #####:  597:      return __dest;
        -:  598:    }
------------------
char* std::__format::__put_sign<unsigned char>(unsigned char, std::__format::_Sign, char*):
function char* std::__format::__put_sign<unsigned char>(unsigned char, std::__format::_Sign, char*) called 0 returned 0% blocks executed 0%
    #####:  587:    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
    %%%%%:  587-block  0
        -:  588:    {
        -:  589:      if (__i < 0)
        -:  590:	*__dest = '-';
    #####:  591:      else if (__sign == _Sign_plus)
    %%%%%:  591-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  592:	*__dest = '+';
    %%%%%:  592-block  0
    #####:  593:      else if (__sign == _Sign_space)
    %%%%%:  593-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  594:	*__dest = ' ';
    %%%%%:  594-block  0
        -:  595:      else
    #####:  596:	++__dest;
    %%%%%:  596-block  0
    #####:  597:      return __dest;
    %%%%%:  597-block  0
        -:  598:    }
------------------
char* std::__format::__put_sign<char>(char, std::__format::_Sign, char*):
function char* std::__format::__put_sign<char>(char, std::__format::_Sign, char*) called 0 returned 0% blocks executed 0%
    #####:  587:    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
        -:  588:    {
    #####:  589:      if (__i < 0)
    %%%%%:  589-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  590:	*__dest = '-';
    %%%%%:  590-block  0
    #####:  591:      else if (__sign == _Sign_plus)
    %%%%%:  591-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  592:	*__dest = '+';
    %%%%%:  592-block  0
    #####:  593:      else if (__sign == _Sign_space)
    %%%%%:  593-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  594:	*__dest = ' ';
    %%%%%:  594-block  0
        -:  595:      else
    #####:  596:	++__dest;
    %%%%%:  596-block  0
    #####:  597:      return __dest;
    %%%%%:  597-block  0
        -:  598:    }
------------------
char* std::__format::__put_sign<unsigned __int128>(unsigned __int128, std::__format::_Sign, char*):
function char* std::__format::__put_sign<unsigned __int128>(unsigned __int128, std::__format::_Sign, char*) called 0 returned 0% blocks executed 0%
    #####:  587:    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
    %%%%%:  587-block  0
        -:  588:    {
        -:  589:      if (__i < 0)
        -:  590:	*__dest = '-';
    #####:  591:      else if (__sign == _Sign_plus)
    %%%%%:  591-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  592:	*__dest = '+';
    %%%%%:  592-block  0
    #####:  593:      else if (__sign == _Sign_space)
    %%%%%:  593-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  594:	*__dest = ' ';
    %%%%%:  594-block  0
        -:  595:      else
    #####:  596:	++__dest;
    %%%%%:  596-block  0
    #####:  597:      return __dest;
    %%%%%:  597-block  0
        -:  598:    }
------------------
char* std::__format::__put_sign<__int128>(__int128, std::__format::_Sign, char*):
function char* std::__format::__put_sign<__int128>(__int128, std::__format::_Sign, char*) called 0 returned 0% blocks executed 0%
    #####:  587:    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
        -:  588:    {
    #####:  589:      if (__i < 0)
    %%%%%:  589-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  590:	*__dest = '-';
    %%%%%:  590-block  0
    #####:  591:      else if (__sign == _Sign_plus)
    %%%%%:  591-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  592:	*__dest = '+';
    %%%%%:  592-block  0
    #####:  593:      else if (__sign == _Sign_space)
    %%%%%:  593-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  594:	*__dest = ' ';
    %%%%%:  594-block  0
        -:  595:      else
    #####:  596:	++__dest;
    %%%%%:  596-block  0
    #####:  597:      return __dest;
    %%%%%:  597-block  0
        -:  598:    }
------------------
char* std::__format::__put_sign<unsigned long long>(unsigned long long, std::__format::_Sign, char*):
function char* std::__format::__put_sign<unsigned long long>(unsigned long long, std::__format::_Sign, char*) called 0 returned 0% blocks executed 0%
    #####:  587:    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
    %%%%%:  587-block  0
        -:  588:    {
        -:  589:      if (__i < 0)
        -:  590:	*__dest = '-';
    #####:  591:      else if (__sign == _Sign_plus)
    %%%%%:  591-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  592:	*__dest = '+';
    %%%%%:  592-block  0
    #####:  593:      else if (__sign == _Sign_space)
    %%%%%:  593-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  594:	*__dest = ' ';
    %%%%%:  594-block  0
        -:  595:      else
    #####:  596:	++__dest;
    %%%%%:  596-block  0
    #####:  597:      return __dest;
    %%%%%:  597-block  0
        -:  598:    }
------------------
char* std::__format::__put_sign<long long>(long long, std::__format::_Sign, char*):
function char* std::__format::__put_sign<long long>(long long, std::__format::_Sign, char*) called 0 returned 0% blocks executed 0%
    #####:  587:    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
        -:  588:    {
    #####:  589:      if (__i < 0)
    %%%%%:  589-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  590:	*__dest = '-';
    %%%%%:  590-block  0
    #####:  591:      else if (__sign == _Sign_plus)
    %%%%%:  591-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  592:	*__dest = '+';
    %%%%%:  592-block  0
    #####:  593:      else if (__sign == _Sign_space)
    %%%%%:  593-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  594:	*__dest = ' ';
    %%%%%:  594-block  0
        -:  595:      else
    #####:  596:	++__dest;
    %%%%%:  596-block  0
    #####:  597:      return __dest;
    %%%%%:  597-block  0
        -:  598:    }
------------------
char* std::__format::__put_sign<unsigned int>(unsigned int, std::__format::_Sign, char*):
function char* std::__format::__put_sign<unsigned int>(unsigned int, std::__format::_Sign, char*) called 0 returned 0% blocks executed 0%
    #####:  587:    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
    %%%%%:  587-block  0
        -:  588:    {
        -:  589:      if (__i < 0)
        -:  590:	*__dest = '-';
    #####:  591:      else if (__sign == _Sign_plus)
    %%%%%:  591-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  592:	*__dest = '+';
    %%%%%:  592-block  0
    #####:  593:      else if (__sign == _Sign_space)
    %%%%%:  593-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  594:	*__dest = ' ';
    %%%%%:  594-block  0
        -:  595:      else
    #####:  596:	++__dest;
    %%%%%:  596-block  0
    #####:  597:      return __dest;
    %%%%%:  597-block  0
        -:  598:    }
------------------
char* std::__format::__put_sign<int>(int, std::__format::_Sign, char*):
function char* std::__format::__put_sign<int>(int, std::__format::_Sign, char*) called 0 returned 0% blocks executed 0%
    #####:  587:    __put_sign(_Int __i, _Sign __sign, char* __dest) noexcept
        -:  588:    {
    #####:  589:      if (__i < 0)
    %%%%%:  589-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  590:	*__dest = '-';
    %%%%%:  590-block  0
    #####:  591:      else if (__sign == _Sign_plus)
    %%%%%:  591-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  592:	*__dest = '+';
    %%%%%:  592-block  0
    #####:  593:      else if (__sign == _Sign_space)
    %%%%%:  593-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  594:	*__dest = ' ';
    %%%%%:  594-block  0
        -:  595:      else
    #####:  596:	++__dest;
    %%%%%:  596-block  0
    #####:  597:      return __dest;
    %%%%%:  597-block  0
        -:  598:    }
------------------
        -:  599:
        -:  600:  // Write STR to OUT (and do so efficiently if OUT is a _Sink_iter).
        -:  601:  template<typename _Out, typename _CharT>
        -:  602:    requires output_iterator<_Out, const _CharT&>
        -:  603:    inline _Out
function std::__format::_Sink_iter<char> std::__format::__write<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >) called 0 returned 0% blocks executed 0%
    #####:  604:    __write(_Out __out, basic_string_view<_CharT> __str)
        -:  605:    {
        -:  606:      if constexpr (is_same_v<_Out, _Sink_iter<_CharT>>)
        -:  607:	{
    #####:  608:	  if (__str.size())
    %%%%%:  608-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  609:	    __out = __str;
    %%%%%:  609-block  0
        -:  610:	}
        -:  611:      else
        -:  612:	for (_CharT __c : __str)
        -:  613:	  *__out++ = __c;
    #####:  614:      return __out;
    %%%%%:  614-block  0
        -:  615:    }
        -:  616:
        -:  617:  // Write STR to OUT with NFILL copies of FILL_CHAR specified by ALIGN.
        -:  618:  // pre: __align != _Align_default
        -:  619:  template<typename _Out, typename _CharT>
        -:  620:    _Out
function std::__format::_Sink_iter<char> std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char) called 0 returned 0% blocks executed 0%
    #####:  621:    __write_padded(_Out __out, basic_string_view<_CharT> __str,
        -:  622:		   _Align __align, size_t __nfill, _CharT __fill_char)
        -:  623:    {
    #####:  624:      const size_t __buflen = 0x20;
        -:  625:      _CharT __padding_chars[__buflen];
    #####:  626:      basic_string_view<_CharT> __padding{__padding_chars, __buflen};
    %%%%%:  626-block  0
call    0 never executed
        -:  627:
function std::__format::__write_padded<std::__format::_Sink_iter<char>, char>(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::__format::_Align, unsigned long, char)::{lambda(unsigned long, std::__format::_Sink_iter<char>&)#1}::operator()(unsigned long, std::__format::_Sink_iter<char>&) const called 0 returned 0% blocks executed 0%
    #####:  628:      auto __pad = [&__padding] (size_t __n, _Out& __o) {
    #####:  629:	if (__n == 0)
    %%%%%:  629-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  630:	  return;
    %%%%%:  630-block  0
    #####:  631:	while (__n > __padding.size())
    %%%%%:  631-block  0
    %%%%%:  631-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -:  632:	  {
    #####:  633:	    __o = __format::__write(std::move(__o), __padding);
    %%%%%:  633-block  0
call    0 never executed
call    1 never executed
    #####:  634:	    __n -= __padding.size();
call    0 never executed
        -:  635:	  }
    #####:  636:	if (__n != 0)
    %%%%%:  636-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  637:	  __o = __format::__write(std::move(__o), __padding.substr(0, __n));
    %%%%%:  637-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  638:      };
        -:  639:
        -:  640:      size_t __l, __r, __max;
    #####:  641:      if (__align == _Align_centre)
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  642:	{
    #####:  643:	  __l = __nfill / 2;
    #####:  644:	  __r = __l + (__nfill & 1);
    #####:  645:	  __max = __r;
    %%%%%:  645-block  0
        -:  646:	}
    #####:  647:      else if (__align == _Align_right)
    %%%%%:  647-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  648:	{
    #####:  649:	  __l = __nfill;
    #####:  650:	  __r = 0;
    #####:  651:	  __max = __l;
    %%%%%:  651-block  0
        -:  652:	}
        -:  653:      else
        -:  654:	{
    #####:  655:	  __l = 0;
    #####:  656:	  __r = __nfill;
    #####:  657:	  __max = __r;
    %%%%%:  657-block  0
        -:  658:	}
    #####:  659:      if (__max < __buflen)
    %%%%%:  659-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  660:	__padding.remove_suffix(__buflen - __max);
    %%%%%:  660-block  0
call    0 never executed
        -:  661:      else
    #####:  662:	__max = __buflen;
    %%%%%:  662-block  0
    #####:  663:      char_traits<_CharT>::assign(__padding_chars, __max, __fill_char);
    %%%%%:  663-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  664:
    #####:  665:      __pad(__l, __out);
    %%%%%:  665-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  666:      __out = __format::__write(std::move(__out), __str);
    %%%%%:  666-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  667:      __pad(__r, __out);
    %%%%%:  667-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  668:
    #####:  669:      return __out;
    %%%%%:  669-block  0
    %%%%%:  669-block  1
        -:  670:    }
        -:  671:
        -:  672:  // Write STR to OUT, with alignment and padding as determined by SPEC.
        -:  673:  // pre: __spec._M_align != _Align_default || __align != _Align_default
        -:  674:  template<typename _CharT, typename _Out>
        -:  675:    _Out
function std::__format::_Sink_iter<char> std::__format::__write_padded_as_spec<char, std::__format::_Sink_iter<char> >(std::basic_string_view<std::type_identity<char>::type, std::char_traits<std::type_identity<char>::type> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::__format::_Spec<char> const&, std::__format::_Align) called 0 returned 0% blocks executed 0%
    #####:  676:    __write_padded_as_spec(basic_string_view<type_identity_t<_CharT>> __str,
        -:  677:			   size_t __estimated_width,
        -:  678:			   basic_format_context<_Out, _CharT>& __fc,
        -:  679:			   const _Spec<_CharT>& __spec,
        -:  680:			   _Align __align = _Align_left)
        -:  681:    {
    #####:  682:      size_t __width = __spec._M_get_width(__fc);
    %%%%%:  682-block  0
call    0 never executed
        -:  683:
    #####:  684:      if (__width <= __estimated_width)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  685:	return __format::__write(__fc.out(), __str);
    %%%%%:  685-block  0
call    0 never executed
call    1 never executed
        -:  686:
    #####:  687:      const size_t __nfill = __width - __estimated_width;
        -:  688:
    #####:  689:      if (__spec._M_align)
    %%%%%:  689-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  690:	__align = __spec._M_align;
    %%%%%:  690-block  0
        -:  691:
    #####:  692:      return __format::__write_padded(__fc.out(), __str, __align, __nfill,
call    0 never executed
    #####:  693:				      __spec._M_fill);
    %%%%%:  693-block  0
call    0 never executed
        -:  694:    }
        -:  695:
        -:  696:  // A lightweight optional<locale>.
        -:  697:  struct _Optional_locale
        -:  698:  {
        -:  699:    [[__gnu__::__always_inline__]]
    #####:  700:    _Optional_locale() : _M_dummy(), _M_hasval(false) { }
    %%%%%:  700-block  0
    %%%%%:  700-block  1
    %%%%%:  700-block  2
    %%%%%:  700-block  3
        -:  701:
function std::__format::_Optional_locale::_Optional_locale(std::locale const&) called 0 returned 0% blocks executed 0%
    #####:  702:    _Optional_locale(const locale& __loc) noexcept
    #####:  703:    : _M_loc(__loc), _M_hasval(true)
    %%%%%:  703-block  0
call    0 never executed
    #####:  704:    { }
        -:  705:
        -:  706:    _Optional_locale(const _Optional_locale& __l) noexcept
        -:  707:    : _M_dummy(), _M_hasval(__l._M_hasval)
        -:  708:    {
        -:  709:      if (_M_hasval)
        -:  710:	std::construct_at(&_M_loc, __l._M_loc);
        -:  711:    }
        -:  712:
        -:  713:    _Optional_locale&
        -:  714:    operator=(const _Optional_locale& __l) noexcept
        -:  715:    {
        -:  716:      if (_M_hasval)
        -:  717:	{
        -:  718:	  if (__l._M_hasval)
        -:  719:	    _M_loc = __l._M_loc;
        -:  720:	  else
        -:  721:	    {
        -:  722:	      _M_loc.~locale();
        -:  723:	      _M_hasval = false;
        -:  724:	    }
        -:  725:	}
        -:  726:      else if (__l._M_hasval)
        -:  727:	{
        -:  728:	  std::construct_at(&_M_loc, __l._M_loc);
        -:  729:	  _M_hasval = true;
        -:  730:	}
        -:  731:      return *this;
        -:  732:    }
        -:  733:
function std::__format::_Optional_locale::~_Optional_locale() called 0 returned 0% blocks executed 0%
    #####:  734:    ~_Optional_locale() { if (_M_hasval) _M_loc.~locale(); }
    %%%%%:  734-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  734-block  1
call    2 never executed
        -:  735:
        -:  736:    _Optional_locale&
function std::__format::_Optional_locale::operator=(std::locale&&) called 0 returned 0% blocks executed 0%
    #####:  737:    operator=(locale&& __loc) noexcept
        -:  738:    {
    #####:  739:      if (_M_hasval)
    %%%%%:  739-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  740:	_M_loc = std::move(__loc);
    %%%%%:  740-block  0
call    0 never executed
call    1 never executed
        -:  741:      else
        -:  742:	{
    #####:  743:	  std::construct_at(&_M_loc, std::move(__loc));
    %%%%%:  743-block  0
call    0 never executed
call    1 never executed
    #####:  744:	  _M_hasval = true;
        -:  745:	}
    #####:  746:      return *this;
    %%%%%:  746-block  0
        -:  747:    }
        -:  748:
        -:  749:    const locale&
function std::__format::_Optional_locale::value() called 0 returned 0% blocks executed 0%
    #####:  750:    value() noexcept
        -:  751:    {
    #####:  752:      if (!_M_hasval)
    %%%%%:  752-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  753:	{
    #####:  754:	  std::construct_at(&_M_loc);
    %%%%%:  754-block  0
call    0 never executed
    #####:  755:	  _M_hasval = true;
        -:  756:	}
    #####:  757:      return _M_loc;
    %%%%%:  757-block  0
        -:  758:    }
        -:  759:
        -:  760:    bool has_value() const noexcept { return _M_hasval; }
        -:  761:
        -:  762:    union {
        -:  763:      char _M_dummy = '\0';
        -:  764:      std::locale _M_loc;
        -:  765:    };
        -:  766:    bool _M_hasval = false;
        -:  767:  };
        -:  768:
        -:  769:  template<typename _CharT>
        -:  770:    concept __char = same_as<_CharT, char> || same_as<_CharT, wchar_t>;
        -:  771:
        -:  772:  template<__char _CharT>
        -:  773:    struct __formatter_str
        -:  774:    {
        -:  775:      constexpr typename basic_format_parse_context<_CharT>::iterator
function std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&) called 0 returned 0% blocks executed 0%
    #####:  776:      parse(basic_format_parse_context<_CharT>& __pc)
        -:  777:      {
    #####:  778:	auto __first = __pc.begin();
    %%%%%:  778-block  0
call    0 never executed
    #####:  779:	const auto __last = __pc.end();
call    0 never executed
    #####:  780:	_Spec<_CharT> __spec{};
        -:  781:
function std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)::{lambda()#1}::operator()() const called 0 returned 0% blocks executed 0%
    #####:  782:	auto __finalize = [this, &__spec] {
    #####:  783:	  _M_spec = __spec;
        -:  784:	};
        -:  785:
function std::__format::__formatter_str<char>::parse(std::basic_format_parse_context<char>&)::{lambda()#2}::operator()() const called 0 returned 0% blocks executed 0%
    #####:  786:	auto __finished = [&] {
    #####:  787:	  if (__first == __last || *__first == '}')
    %%%%%:  787-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  787-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        -:  788:	    {
    #####:  789:	      __finalize();
    %%%%%:  789-block  0
call    0 never executed
    #####:  790:	      return true;
        -:  791:	    }
    #####:  792:	  return false;
    %%%%%:  792-block  0
        -:  793:	};
        -:  794:
    #####:  795:	if (__finished())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  796:	  return __first;
    %%%%%:  796-block  0
        -:  797:
    #####:  798:	__first = __spec._M_parse_fill_and_align(__first, __last);
    %%%%%:  798-block  0
call    0 never executed
    #####:  799:	if (__finished())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  800:	  return __first;
    %%%%%:  800-block  0
        -:  801:
    #####:  802:	__first = __spec._M_parse_width(__first, __last, __pc);
    %%%%%:  802-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  803:	if (__finished())
    %%%%%:  803-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  804:	  return __first;
    %%%%%:  804-block  0
        -:  805:
    #####:  806:	__first = __spec._M_parse_precision(__first, __last, __pc);
    %%%%%:  806-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  807:	if (__finished())
    %%%%%:  807-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  808:	  return __first;
    %%%%%:  808-block  0
        -:  809:
    #####:  810:	if (*__first == 's')
    %%%%%:  810-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  811:	  ++__first;
    %%%%%:  811-block  0
        -:  812:#if __cpp_lib_format_ranges
        -:  813:	else if (*__first == '?')
        -:  814:	  {
        -:  815:	    __spec._M_type = _Pres_esc;
        -:  816:	    ++__first;
        -:  817:	  }
        -:  818:#endif
        -:  819:
    #####:  820:	if (__finished())
    %%%%%:  820-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  821:	  return __first;
    %%%%%:  821-block  0
        -:  822:
    #####:  823:	__format::__failed_to_parse_format_spec();
    %%%%%:  823-block  0
call    0 never executed
        -:  824:      }
        -:  825:
        -:  826:      template<typename _Out>
        -:  827:	_Out
function std::__format::_Sink_iter<char> std::__format::__formatter_str<char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####:  828:	format(basic_string_view<_CharT> __s,
        -:  829:	       basic_format_context<_Out, _CharT>& __fc) const
        -:  830:	{
    #####:  831:	  if (_M_spec._M_type == _Pres_esc)
    %%%%%:  831-block  0
        -:  832:	    {
        -:  833:	      // TODO: C++20 escaped string presentation
        -:  834:	    }
        -:  835:
    #####:  836:	  if (_M_spec._M_width_kind == _WP_none
    %%%%%:  836-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  837:		&& _M_spec._M_prec_kind == _WP_none)
    %%%%%:  837-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  838:	    return __format::__write(__fc.out(), __s);
    %%%%%:  838-block  0
call    0 never executed
call    1 never executed
        -:  839:
    #####:  840:	  size_t __estimated_width = __s.size(); // TODO: Unicode-aware estim.
    %%%%%:  840-block  0
call    0 never executed
        -:  841:
    #####:  842:	  if (_M_spec._M_prec_kind != _WP_none)
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  843:	    {
    #####:  844:	      size_t __prec = _M_spec._M_get_precision(__fc);
    %%%%%:  844-block  0
call    0 never executed
    #####:  845:	      if (__estimated_width > __prec)
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  846:		{
    #####:  847:		  __s = __s.substr(0, __prec); // TODO: do not split code points
    %%%%%:  847-block  0
call    0 never executed
    #####:  848:		  __estimated_width = __prec;
        -:  849:		}
        -:  850:	    }
        -:  851:
    #####:  852:	  return __format::__write_padded_as_spec(__s, __estimated_width,
    #####:  853:						  __fc, _M_spec);
    %%%%%:  853-block  0
call    0 never executed
        -:  854:	}
        -:  855:
        -:  856:#if __cpp_lib_format_ranges
        -:  857:      constexpr void
        -:  858:      set_debug_format() noexcept
        -:  859:      { _M_spec._M_type = _Pres_esc; }
        -:  860:#endif
        -:  861:
        -:  862:    private:
        -:  863:      _Spec<_CharT> _M_spec{};
        -:  864:    };
        -:  865:
        -:  866:  template<__char _CharT>
        -:  867:    struct __formatter_int
        -:  868:    {
        -:  869:      // If no presentation type is specified, meaning of "none" depends
        -:  870:      // whether we are formatting an integer or a char or a bool.
        -:  871:      static constexpr _Pres_type _AsInteger = _Pres_d;
        -:  872:      static constexpr _Pres_type _AsBool = _Pres_s;
        -:  873:      static constexpr _Pres_type _AsChar = _Pres_c;
        -:  874:
        -:  875:      constexpr typename basic_format_parse_context<_CharT>::iterator
function std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type) called 0 returned 0% blocks executed 0%
    #####:  876:      _M_do_parse(basic_format_parse_context<_CharT>& __pc, _Pres_type __type)
        -:  877:      {
    #####:  878:	_Spec<_CharT> __spec{};
    #####:  879:	__spec._M_type = __type;
        -:  880:
    #####:  881:	const auto __last = __pc.end();
    %%%%%:  881-block  0
call    0 never executed
    #####:  882:	auto __first = __pc.begin();
call    0 never executed
        -:  883:
function std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)::{lambda()#1}::operator()() const called 0 returned 0% blocks executed 0%
    #####:  884:	auto __finalize = [this, &__spec] {
    #####:  885:	  _M_spec = __spec;
        -:  886:	};
        -:  887:
function std::__format::__formatter_int<char>::_M_do_parse(std::basic_format_parse_context<char>&, std::__format::_Pres_type)::{lambda()#2}::operator()() const called 0 returned 0% blocks executed 0%
    #####:  888:	auto __finished = [&] {
    #####:  889:	  if (__first == __last || *__first == '}')
    %%%%%:  889-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  889-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        -:  890:	    {
    #####:  891:	      __finalize();
    %%%%%:  891-block  0
call    0 never executed
    #####:  892:	      return true;
        -:  893:	    }
    #####:  894:	  return false;
    %%%%%:  894-block  0
        -:  895:	};
        -:  896:
    #####:  897:	if (__finished())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  898:	  return __first;
    %%%%%:  898-block  0
        -:  899:
    #####:  900:	__first = __spec._M_parse_fill_and_align(__first, __last);
    %%%%%:  900-block  0
call    0 never executed
    #####:  901:	if (__finished())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  902:	  return __first;
    %%%%%:  902-block  0
        -:  903:
    #####:  904:	__first = __spec._M_parse_sign(__first, __last);
    %%%%%:  904-block  0
call    0 never executed
    #####:  905:	if (__finished())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  906:	  return __first;
    %%%%%:  906-block  0
        -:  907:
    #####:  908:	__first = __spec._M_parse_alternate_form(__first, __last);
    %%%%%:  908-block  0
call    0 never executed
    #####:  909:	if (__finished())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  910:	  return __first;
    %%%%%:  910-block  0
        -:  911:
    #####:  912:	__first = __spec._M_parse_zero_fill(__first, __last);
    %%%%%:  912-block  0
call    0 never executed
    #####:  913:	if (__finished())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  914:	  return __first;
    %%%%%:  914-block  0
        -:  915:
    #####:  916:	__first = __spec._M_parse_width(__first, __last, __pc);
    %%%%%:  916-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  917:	if (__finished())
    %%%%%:  917-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  918:	  return __first;
    %%%%%:  918-block  0
        -:  919:
    #####:  920:	__first = __spec._M_parse_locale(__first, __last);
    %%%%%:  920-block  0
call    0 never executed
    #####:  921:	if (__finished())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  922:	  return __first;
    %%%%%:  922-block  0
        -:  923:
    #####:  924:	switch (*__first)
    %%%%%:  924-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -:  925:	{
    #####:  926:	  case 'b':
    #####:  927:	    __spec._M_type = _Pres_b;
    #####:  928:	    ++__first;
    #####:  929:	    break;
    %%%%%:  929-block  0
    #####:  930:	  case 'B':
    #####:  931:	    __spec._M_type = _Pres_B;
    #####:  932:	    ++__first;
    #####:  933:	    break;
    %%%%%:  933-block  0
    #####:  934:	  case 'c':
        -:  935:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  936:	    // 3586. format should not print bool with 'c'
    #####:  937:	    if (__type != _AsBool)
    %%%%%:  937-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  938:	      {
    #####:  939:		__spec._M_type = _Pres_c;
    #####:  940:		++__first;
    %%%%%:  940-block  0
        -:  941:	      }
    #####:  942:	    break;
    %%%%%:  942-block  0
    #####:  943:	  case 'd':
    #####:  944:	    __spec._M_type = _Pres_d;
    #####:  945:	    ++__first;
    #####:  946:	    break;
    %%%%%:  946-block  0
    #####:  947:	  case 'o':
    #####:  948:	    __spec._M_type = _Pres_o;
    #####:  949:	    ++__first;
    #####:  950:	    break;
    %%%%%:  950-block  0
    #####:  951:	  case 'x':
    #####:  952:	    __spec._M_type = _Pres_x;
    #####:  953:	    ++__first;
    #####:  954:	    break;
    %%%%%:  954-block  0
    #####:  955:	  case 'X':
    #####:  956:	    __spec._M_type = _Pres_X;
    #####:  957:	    ++__first;
    #####:  958:	    break;
    %%%%%:  958-block  0
    #####:  959:	  case 's':
    #####:  960:	    if (__type == _AsBool)
    %%%%%:  960-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  961:	      {
    #####:  962:		__spec._M_type = _Pres_s; // same value (and meaning) as "none"
    #####:  963:		++__first;
    %%%%%:  963-block  0
        -:  964:	      }
    #####:  965:	    break;
    %%%%%:  965-block  0
        -:  966:#if __cpp_lib_format_ranges
        -:  967:	  case '?':
        -:  968:	    if (__type == _AsChar)
        -:  969:	      {
        -:  970:		__spec._M_type = _Pres_esc;
        -:  971:		++__first;
        -:  972:	      }
        -:  973:#endif
        -:  974:	    break;
        -:  975:	  }
        -:  976:
    #####:  977:	if (__finished())
    %%%%%:  977-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  978:	  return __first;
    %%%%%:  978-block  0
        -:  979:
    #####:  980:	__format::__failed_to_parse_format_spec();
    %%%%%:  980-block  0
call    0 never executed
        -:  981:      }
        -:  982:
        -:  983:      template<typename _Tp>
        -:  984:	constexpr typename basic_format_parse_context<_CharT>::iterator
    #####:  985:	_M_parse(basic_format_parse_context<_CharT>& __pc)
        -:  986:	{
        -:  987:	  if constexpr (is_same_v<_Tp, bool>)
        -:  988:	    {
    #####:  989:	      auto __end = _M_do_parse(__pc, _AsBool);
    #####:  990:	      if (_M_spec._M_type == _Pres_s)
    #####:  991:		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill)
    #####:  992:		  __throw_format_error("format error: format-spec contains "
        -:  993:				       "invalid formatting options for "
        -:  994:				       "'bool'");
    #####:  995:	      return __end;
        -:  996:	    }
        -:  997:	  else if constexpr (__char<_Tp>)
        -:  998:	    {
    #####:  999:	      auto __end = _M_do_parse(__pc, _AsChar);
    #####: 1000:	      if (_M_spec._M_type == _Pres_c || _M_spec._M_type == _Pres_esc)
    #####: 1001:		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill
        -: 1002:		      /* XXX should be invalid? || _M_spec._M_localized */)
    #####: 1003:		  __throw_format_error("format error: format-spec contains "
        -: 1004:				       "invalid formatting options for "
        -: 1005:				       "'charT'");
    #####: 1006:	      return __end;
        -: 1007:	    }
        -: 1008:	  else
    #####: 1009:	    return _M_do_parse(__pc, _AsInteger);
        -: 1010:	}
------------------
char const* std::__format::__formatter_int<char>::_M_parse<unsigned __int128>(std::basic_format_parse_context<char>&):
function char const* std::__format::__formatter_int<char>::_M_parse<unsigned __int128>(std::basic_format_parse_context<char>&) called 0 returned 0% blocks executed 0%
    #####:  985:	_M_parse(basic_format_parse_context<_CharT>& __pc)
        -:  986:	{
        -:  987:	  if constexpr (is_same_v<_Tp, bool>)
        -:  988:	    {
        -:  989:	      auto __end = _M_do_parse(__pc, _AsBool);
        -:  990:	      if (_M_spec._M_type == _Pres_s)
        -:  991:		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill)
        -:  992:		  __throw_format_error("format error: format-spec contains "
        -:  993:				       "invalid formatting options for "
        -:  994:				       "'bool'");
        -:  995:	      return __end;
        -:  996:	    }
        -:  997:	  else if constexpr (__char<_Tp>)
        -:  998:	    {
        -:  999:	      auto __end = _M_do_parse(__pc, _AsChar);
        -: 1000:	      if (_M_spec._M_type == _Pres_c || _M_spec._M_type == _Pres_esc)
        -: 1001:		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill
        -: 1002:		      /* XXX should be invalid? || _M_spec._M_localized */)
        -: 1003:		  __throw_format_error("format error: format-spec contains "
        -: 1004:				       "invalid formatting options for "
        -: 1005:				       "'charT'");
        -: 1006:	      return __end;
        -: 1007:	    }
        -: 1008:	  else
    #####: 1009:	    return _M_do_parse(__pc, _AsInteger);
    %%%%%: 1009-block  0
call    0 never executed
        -: 1010:	}
------------------
char const* std::__format::__formatter_int<char>::_M_parse<__int128>(std::basic_format_parse_context<char>&):
function char const* std::__format::__formatter_int<char>::_M_parse<__int128>(std::basic_format_parse_context<char>&) called 0 returned 0% blocks executed 0%
    #####:  985:	_M_parse(basic_format_parse_context<_CharT>& __pc)
        -:  986:	{
        -:  987:	  if constexpr (is_same_v<_Tp, bool>)
        -:  988:	    {
        -:  989:	      auto __end = _M_do_parse(__pc, _AsBool);
        -:  990:	      if (_M_spec._M_type == _Pres_s)
        -:  991:		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill)
        -:  992:		  __throw_format_error("format error: format-spec contains "
        -:  993:				       "invalid formatting options for "
        -:  994:				       "'bool'");
        -:  995:	      return __end;
        -:  996:	    }
        -:  997:	  else if constexpr (__char<_Tp>)
        -:  998:	    {
        -:  999:	      auto __end = _M_do_parse(__pc, _AsChar);
        -: 1000:	      if (_M_spec._M_type == _Pres_c || _M_spec._M_type == _Pres_esc)
        -: 1001:		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill
        -: 1002:		      /* XXX should be invalid? || _M_spec._M_localized */)
        -: 1003:		  __throw_format_error("format error: format-spec contains "
        -: 1004:				       "invalid formatting options for "
        -: 1005:				       "'charT'");
        -: 1006:	      return __end;
        -: 1007:	    }
        -: 1008:	  else
    #####: 1009:	    return _M_do_parse(__pc, _AsInteger);
    %%%%%: 1009-block  0
call    0 never executed
        -: 1010:	}
------------------
char const* std::__format::__formatter_int<char>::_M_parse<unsigned long long>(std::basic_format_parse_context<char>&):
function char const* std::__format::__formatter_int<char>::_M_parse<unsigned long long>(std::basic_format_parse_context<char>&) called 0 returned 0% blocks executed 0%
    #####:  985:	_M_parse(basic_format_parse_context<_CharT>& __pc)
        -:  986:	{
        -:  987:	  if constexpr (is_same_v<_Tp, bool>)
        -:  988:	    {
        -:  989:	      auto __end = _M_do_parse(__pc, _AsBool);
        -:  990:	      if (_M_spec._M_type == _Pres_s)
        -:  991:		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill)
        -:  992:		  __throw_format_error("format error: format-spec contains "
        -:  993:				       "invalid formatting options for "
        -:  994:				       "'bool'");
        -:  995:	      return __end;
        -:  996:	    }
        -:  997:	  else if constexpr (__char<_Tp>)
        -:  998:	    {
        -:  999:	      auto __end = _M_do_parse(__pc, _AsChar);
        -: 1000:	      if (_M_spec._M_type == _Pres_c || _M_spec._M_type == _Pres_esc)
        -: 1001:		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill
        -: 1002:		      /* XXX should be invalid? || _M_spec._M_localized */)
        -: 1003:		  __throw_format_error("format error: format-spec contains "
        -: 1004:				       "invalid formatting options for "
        -: 1005:				       "'charT'");
        -: 1006:	      return __end;
        -: 1007:	    }
        -: 1008:	  else
    #####: 1009:	    return _M_do_parse(__pc, _AsInteger);
    %%%%%: 1009-block  0
call    0 never executed
        -: 1010:	}
------------------
char const* std::__format::__formatter_int<char>::_M_parse<long long>(std::basic_format_parse_context<char>&):
function char const* std::__format::__formatter_int<char>::_M_parse<long long>(std::basic_format_parse_context<char>&) called 0 returned 0% blocks executed 0%
    #####:  985:	_M_parse(basic_format_parse_context<_CharT>& __pc)
        -:  986:	{
        -:  987:	  if constexpr (is_same_v<_Tp, bool>)
        -:  988:	    {
        -:  989:	      auto __end = _M_do_parse(__pc, _AsBool);
        -:  990:	      if (_M_spec._M_type == _Pres_s)
        -:  991:		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill)
        -:  992:		  __throw_format_error("format error: format-spec contains "
        -:  993:				       "invalid formatting options for "
        -:  994:				       "'bool'");
        -:  995:	      return __end;
        -:  996:	    }
        -:  997:	  else if constexpr (__char<_Tp>)
        -:  998:	    {
        -:  999:	      auto __end = _M_do_parse(__pc, _AsChar);
        -: 1000:	      if (_M_spec._M_type == _Pres_c || _M_spec._M_type == _Pres_esc)
        -: 1001:		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill
        -: 1002:		      /* XXX should be invalid? || _M_spec._M_localized */)
        -: 1003:		  __throw_format_error("format error: format-spec contains "
        -: 1004:				       "invalid formatting options for "
        -: 1005:				       "'charT'");
        -: 1006:	      return __end;
        -: 1007:	    }
        -: 1008:	  else
    #####: 1009:	    return _M_do_parse(__pc, _AsInteger);
    %%%%%: 1009-block  0
call    0 never executed
        -: 1010:	}
------------------
char const* std::__format::__formatter_int<char>::_M_parse<unsigned int>(std::basic_format_parse_context<char>&):
function char const* std::__format::__formatter_int<char>::_M_parse<unsigned int>(std::basic_format_parse_context<char>&) called 0 returned 0% blocks executed 0%
    #####:  985:	_M_parse(basic_format_parse_context<_CharT>& __pc)
        -:  986:	{
        -:  987:	  if constexpr (is_same_v<_Tp, bool>)
        -:  988:	    {
        -:  989:	      auto __end = _M_do_parse(__pc, _AsBool);
        -:  990:	      if (_M_spec._M_type == _Pres_s)
        -:  991:		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill)
        -:  992:		  __throw_format_error("format error: format-spec contains "
        -:  993:				       "invalid formatting options for "
        -:  994:				       "'bool'");
        -:  995:	      return __end;
        -:  996:	    }
        -:  997:	  else if constexpr (__char<_Tp>)
        -:  998:	    {
        -:  999:	      auto __end = _M_do_parse(__pc, _AsChar);
        -: 1000:	      if (_M_spec._M_type == _Pres_c || _M_spec._M_type == _Pres_esc)
        -: 1001:		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill
        -: 1002:		      /* XXX should be invalid? || _M_spec._M_localized */)
        -: 1003:		  __throw_format_error("format error: format-spec contains "
        -: 1004:				       "invalid formatting options for "
        -: 1005:				       "'charT'");
        -: 1006:	      return __end;
        -: 1007:	    }
        -: 1008:	  else
    #####: 1009:	    return _M_do_parse(__pc, _AsInteger);
    %%%%%: 1009-block  0
call    0 never executed
        -: 1010:	}
------------------
char const* std::__format::__formatter_int<char>::_M_parse<char>(std::basic_format_parse_context<char>&):
function char const* std::__format::__formatter_int<char>::_M_parse<char>(std::basic_format_parse_context<char>&) called 0 returned 0% blocks executed 0%
    #####:  985:	_M_parse(basic_format_parse_context<_CharT>& __pc)
        -:  986:	{
        -:  987:	  if constexpr (is_same_v<_Tp, bool>)
        -:  988:	    {
        -:  989:	      auto __end = _M_do_parse(__pc, _AsBool);
        -:  990:	      if (_M_spec._M_type == _Pres_s)
        -:  991:		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill)
        -:  992:		  __throw_format_error("format error: format-spec contains "
        -:  993:				       "invalid formatting options for "
        -:  994:				       "'bool'");
        -:  995:	      return __end;
        -:  996:	    }
        -:  997:	  else if constexpr (__char<_Tp>)
        -:  998:	    {
    #####:  999:	      auto __end = _M_do_parse(__pc, _AsChar);
    %%%%%:  999-block  0
call    0 never executed
    #####: 1000:	      if (_M_spec._M_type == _Pres_c || _M_spec._M_type == _Pres_esc)
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1000-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1001:		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill
    %%%%%: 1001-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1001-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1001-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
        -: 1002:		      /* XXX should be invalid? || _M_spec._M_localized */)
    #####: 1003:		  __throw_format_error("format error: format-spec contains "
    %%%%%: 1003-block  0
call    0 never executed
        -: 1004:				       "invalid formatting options for "
        -: 1005:				       "'charT'");
    #####: 1006:	      return __end;
    %%%%%: 1006-block  0
        -: 1007:	    }
        -: 1008:	  else
        -: 1009:	    return _M_do_parse(__pc, _AsInteger);
        -: 1010:	}
------------------
char const* std::__format::__formatter_int<char>::_M_parse<bool>(std::basic_format_parse_context<char>&):
function char const* std::__format::__formatter_int<char>::_M_parse<bool>(std::basic_format_parse_context<char>&) called 0 returned 0% blocks executed 0%
    #####:  985:	_M_parse(basic_format_parse_context<_CharT>& __pc)
        -:  986:	{
        -:  987:	  if constexpr (is_same_v<_Tp, bool>)
        -:  988:	    {
    #####:  989:	      auto __end = _M_do_parse(__pc, _AsBool);
    %%%%%:  989-block  0
call    0 never executed
    #####:  990:	      if (_M_spec._M_type == _Pres_s)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  991:		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill)
    %%%%%:  991-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  991-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  991-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    #####:  992:		  __throw_format_error("format error: format-spec contains "
    %%%%%:  992-block  0
call    0 never executed
        -:  993:				       "invalid formatting options for "
        -:  994:				       "'bool'");
    #####:  995:	      return __end;
    %%%%%:  995-block  0
        -:  996:	    }
        -:  997:	  else if constexpr (__char<_Tp>)
        -:  998:	    {
        -:  999:	      auto __end = _M_do_parse(__pc, _AsChar);
        -: 1000:	      if (_M_spec._M_type == _Pres_c || _M_spec._M_type == _Pres_esc)
        -: 1001:		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill
        -: 1002:		      /* XXX should be invalid? || _M_spec._M_localized */)
        -: 1003:		  __throw_format_error("format error: format-spec contains "
        -: 1004:				       "invalid formatting options for "
        -: 1005:				       "'charT'");
        -: 1006:	      return __end;
        -: 1007:	    }
        -: 1008:	  else
        -: 1009:	    return _M_do_parse(__pc, _AsInteger);
        -: 1010:	}
------------------
char const* std::__format::__formatter_int<char>::_M_parse<int>(std::basic_format_parse_context<char>&):
function char const* std::__format::__formatter_int<char>::_M_parse<int>(std::basic_format_parse_context<char>&) called 0 returned 0% blocks executed 0%
    #####:  985:	_M_parse(basic_format_parse_context<_CharT>& __pc)
        -:  986:	{
        -:  987:	  if constexpr (is_same_v<_Tp, bool>)
        -:  988:	    {
        -:  989:	      auto __end = _M_do_parse(__pc, _AsBool);
        -:  990:	      if (_M_spec._M_type == _Pres_s)
        -:  991:		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill)
        -:  992:		  __throw_format_error("format error: format-spec contains "
        -:  993:				       "invalid formatting options for "
        -:  994:				       "'bool'");
        -:  995:	      return __end;
        -:  996:	    }
        -:  997:	  else if constexpr (__char<_Tp>)
        -:  998:	    {
        -:  999:	      auto __end = _M_do_parse(__pc, _AsChar);
        -: 1000:	      if (_M_spec._M_type == _Pres_c || _M_spec._M_type == _Pres_esc)
        -: 1001:		if (_M_spec._M_sign || _M_spec._M_alt || _M_spec._M_zero_fill
        -: 1002:		      /* XXX should be invalid? || _M_spec._M_localized */)
        -: 1003:		  __throw_format_error("format error: format-spec contains "
        -: 1004:				       "invalid formatting options for "
        -: 1005:				       "'charT'");
        -: 1006:	      return __end;
        -: 1007:	    }
        -: 1008:	  else
    #####: 1009:	    return _M_do_parse(__pc, _AsInteger);
    %%%%%: 1009-block  0
call    0 never executed
        -: 1010:	}
------------------
        -: 1011:
        -: 1012:      template<typename _Int, typename _Out>
        -: 1013:	typename basic_format_context<_Out, _CharT>::iterator
    #####: 1014:	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
        -: 1015:	{
    #####: 1016:	  if (_M_spec._M_type == _Pres_c)
    #####: 1017:	    return _M_format_character(_S_to_character(__i), __fc);
        -: 1018:
        -: 1019:	  char __buf[sizeof(_Int) * __CHAR_BIT__ + 3];
    #####: 1020:	  to_chars_result __res{};
        -: 1021:
    #####: 1022:	  string_view __base_prefix;
        -: 1023:	  make_unsigned_t<_Int> __u;
    #####: 1024:	  if (__i < 0)
    #####: 1025:	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
        -: 1026:	  else
    #####: 1027:	    __u = __i;
        -: 1028:
    #####: 1029:	  char* __start = __buf + 3;
    #####: 1030:	  char* const __end = __buf + sizeof(__buf);
    #####: 1031:	  char* const __start_digits = __start;
        -: 1032:
    #####: 1033:	  switch (_M_spec._M_type)
        -: 1034:	  {
    #####: 1035:	    case _Pres_b:
        -: 1036:	    case _Pres_B:
    #####: 1037:	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    #####: 1038:	      __res = to_chars(__start, __end, __u, 2);
    #####: 1039:	      break;
        -: 1040:#if 0
        -: 1041:	    case _Pres_c:
        -: 1042:	      return _M_format_character(_S_to_character(__i), __fc);
        -: 1043:#endif
    #####: 1044:	    case _Pres_none:
        -: 1045:	      // Should not reach here with _Pres_none for bool or charT, so:
        -: 1046:	      [[fallthrough]];
        -: 1047:	    case _Pres_d:
    #####: 1048:	      __res = to_chars(__start, __end, __u, 10);
    #####: 1049:	      break;
    #####: 1050:	    case _Pres_o:
    #####: 1051:	      if (__i != 0)
    #####: 1052:		__base_prefix = "0";
    #####: 1053:	      __res = to_chars(__start, __end, __u, 8);
    #####: 1054:	      break;
    #####: 1055:	    case _Pres_x:
        -: 1056:	    case _Pres_X:
    #####: 1057:	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    #####: 1058:	      __res = to_chars(__start, __end, __u, 16);
    #####: 1059:	      if (_M_spec._M_type == _Pres_X)
    #####: 1060:		for (auto __p = __start; __p != __res.ptr; ++__p)
        -: 1061:#if __has_builtin(__builtin_toupper)
    #####: 1062:		  *__p = __builtin_toupper(*__p);
        -: 1063:#else
        -: 1064:		  *__p = std::toupper(*__p);
        -: 1065:#endif
    #####: 1066:	      break;
    #####: 1067:	    default:
    #####: 1068:	      __builtin_unreachable();
        -: 1069:	  }
        -: 1070:
    #####: 1071:	  if (_M_spec._M_alt && __base_prefix.size())
        -: 1072:	    {
    #####: 1073:	      __start -= __base_prefix.size();
    #####: 1074:	      __builtin_memcpy(__start, __base_prefix.data(),
        -: 1075:			       __base_prefix.size());
        -: 1076:	    }
    #####: 1077:	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
        -: 1078:
    #####: 1079:	  return _M_format_int(string_view(__start, __res.ptr - __start),
    #####: 1080:			       __start_digits - __start, __fc);
        -: 1081:	}
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned char, std::__format::_Sink_iter<char> >(unsigned char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1014:	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
        -: 1015:	{
    #####: 1016:	  if (_M_spec._M_type == _Pres_c)
    %%%%%: 1016-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1017:	    return _M_format_character(_S_to_character(__i), __fc);
    %%%%%: 1017-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1017-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1017-block  2
        -: 1018:
        -: 1019:	  char __buf[sizeof(_Int) * __CHAR_BIT__ + 3];
    #####: 1020:	  to_chars_result __res{};
        -: 1021:
    #####: 1022:	  string_view __base_prefix;
    %%%%%: 1022-block  0
        -: 1023:	  make_unsigned_t<_Int> __u;
        -: 1024:	  if (__i < 0)
        -: 1025:	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
        -: 1026:	  else
    #####: 1027:	    __u = __i;
        -: 1028:
    #####: 1029:	  char* __start = __buf + 3;
    #####: 1030:	  char* const __end = __buf + sizeof(__buf);
    #####: 1031:	  char* const __start_digits = __start;
        -: 1032:
    #####: 1033:	  switch (_M_spec._M_type)
    %%%%%: 1033-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1034:	  {
    #####: 1035:	    case _Pres_b:
        -: 1036:	    case _Pres_B:
    #####: 1037:	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    %%%%%: 1037-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1037-block  1
    %%%%%: 1037-block  2
    %%%%%: 1037-block  3
call    2 never executed
    #####: 1038:	      __res = to_chars(__start, __end, __u, 2);
call    0 never executed
    #####: 1039:	      break;
        -: 1040:#if 0
        -: 1041:	    case _Pres_c:
        -: 1042:	      return _M_format_character(_S_to_character(__i), __fc);
        -: 1043:#endif
    #####: 1044:	    case _Pres_none:
        -: 1045:	      // Should not reach here with _Pres_none for bool or charT, so:
        -: 1046:	      [[fallthrough]];
        -: 1047:	    case _Pres_d:
    #####: 1048:	      __res = to_chars(__start, __end, __u, 10);
    %%%%%: 1048-block  0
call    0 never executed
    #####: 1049:	      break;
    #####: 1050:	    case _Pres_o:
    #####: 1051:	      if (__i != 0)
    %%%%%: 1051-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1052:		__base_prefix = "0";
    %%%%%: 1052-block  0
call    0 never executed
    #####: 1053:	      __res = to_chars(__start, __end, __u, 8);
    %%%%%: 1053-block  0
call    0 never executed
    #####: 1054:	      break;
    #####: 1055:	    case _Pres_x:
        -: 1056:	    case _Pres_X:
    #####: 1057:	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    %%%%%: 1057-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1057-block  1
    %%%%%: 1057-block  2
    %%%%%: 1057-block  3
call    2 never executed
    #####: 1058:	      __res = to_chars(__start, __end, __u, 16);
call    0 never executed
    #####: 1059:	      if (_M_spec._M_type == _Pres_X)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1060:		for (auto __p = __start; __p != __res.ptr; ++__p)
    %%%%%: 1060-block  0
    %%%%%: 1060-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 1061:#if __has_builtin(__builtin_toupper)
    #####: 1062:		  *__p = __builtin_toupper(*__p);
    %%%%%: 1062-block  0
        -: 1063:#else
        -: 1064:		  *__p = std::toupper(*__p);
        -: 1065:#endif
    #####: 1066:	      break;
    %%%%%: 1066-block  0
    #####: 1067:	    default:
    #####: 1068:	      __builtin_unreachable();
    %%%%%: 1068-block  0
call    0 never executed
        -: 1069:	  }
        -: 1070:
    #####: 1071:	  if (_M_spec._M_alt && __base_prefix.size())
    %%%%%: 1071-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1071-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1071-block  2
    %%%%%: 1071-block  3
    %%%%%: 1071-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1072:	    {
    #####: 1073:	      __start -= __base_prefix.size();
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:	      __builtin_memcpy(__start, __base_prefix.data(),
call    0 never executed
call    1 never executed
        -: 1075:			       __base_prefix.size());
        -: 1076:	    }
    #####: 1077:	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    %%%%%: 1077-block  0
call    0 never executed
        -: 1078:
    #####: 1079:	  return _M_format_int(string_view(__start, __res.ptr - __start),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1079-block  0
    $$$$$: 1079-block  1
    #####: 1080:			       __start_digits - __start, __fc);
call    0 never executed
    %%%%%: 1080-block  0
        -: 1081:	}
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned __int128, std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1014:	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
        -: 1015:	{
    #####: 1016:	  if (_M_spec._M_type == _Pres_c)
    %%%%%: 1016-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1017:	    return _M_format_character(_S_to_character(__i), __fc);
    %%%%%: 1017-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1017-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1017-block  2
        -: 1018:
        -: 1019:	  char __buf[sizeof(_Int) * __CHAR_BIT__ + 3];
    #####: 1020:	  to_chars_result __res{};
        -: 1021:
    #####: 1022:	  string_view __base_prefix;
    %%%%%: 1022-block  0
        -: 1023:	  make_unsigned_t<_Int> __u;
        -: 1024:	  if (__i < 0)
        -: 1025:	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
        -: 1026:	  else
    #####: 1027:	    __u = __i;
        -: 1028:
    #####: 1029:	  char* __start = __buf + 3;
    #####: 1030:	  char* const __end = __buf + sizeof(__buf);
    #####: 1031:	  char* const __start_digits = __start;
        -: 1032:
    #####: 1033:	  switch (_M_spec._M_type)
    %%%%%: 1033-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1034:	  {
    #####: 1035:	    case _Pres_b:
        -: 1036:	    case _Pres_B:
    #####: 1037:	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    %%%%%: 1037-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1037-block  1
    %%%%%: 1037-block  2
    %%%%%: 1037-block  3
call    2 never executed
    #####: 1038:	      __res = to_chars(__start, __end, __u, 2);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1039:	      break;
    %%%%%: 1039-block  0
        -: 1040:#if 0
        -: 1041:	    case _Pres_c:
        -: 1042:	      return _M_format_character(_S_to_character(__i), __fc);
        -: 1043:#endif
    #####: 1044:	    case _Pres_none:
        -: 1045:	      // Should not reach here with _Pres_none for bool or charT, so:
        -: 1046:	      [[fallthrough]];
        -: 1047:	    case _Pres_d:
    #####: 1048:	      __res = to_chars(__start, __end, __u, 10);
    %%%%%: 1048-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1049:	      break;
    %%%%%: 1049-block  0
    #####: 1050:	    case _Pres_o:
    #####: 1051:	      if (__i != 0)
    %%%%%: 1051-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1052:		__base_prefix = "0";
    %%%%%: 1052-block  0
call    0 never executed
    #####: 1053:	      __res = to_chars(__start, __end, __u, 8);
    %%%%%: 1053-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1054:	      break;
    %%%%%: 1054-block  0
    #####: 1055:	    case _Pres_x:
        -: 1056:	    case _Pres_X:
    #####: 1057:	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    %%%%%: 1057-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1057-block  1
    %%%%%: 1057-block  2
    %%%%%: 1057-block  3
call    2 never executed
    #####: 1058:	      __res = to_chars(__start, __end, __u, 16);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1059:	      if (_M_spec._M_type == _Pres_X)
    %%%%%: 1059-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1060:		for (auto __p = __start; __p != __res.ptr; ++__p)
    %%%%%: 1060-block  0
    %%%%%: 1060-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 1061:#if __has_builtin(__builtin_toupper)
    #####: 1062:		  *__p = __builtin_toupper(*__p);
    %%%%%: 1062-block  0
        -: 1063:#else
        -: 1064:		  *__p = std::toupper(*__p);
        -: 1065:#endif
    #####: 1066:	      break;
    %%%%%: 1066-block  0
    #####: 1067:	    default:
    #####: 1068:	      __builtin_unreachable();
    %%%%%: 1068-block  0
call    0 never executed
        -: 1069:	  }
        -: 1070:
    #####: 1071:	  if (_M_spec._M_alt && __base_prefix.size())
    %%%%%: 1071-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1071-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1071-block  2
    %%%%%: 1071-block  3
    %%%%%: 1071-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1072:	    {
    #####: 1073:	      __start -= __base_prefix.size();
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:	      __builtin_memcpy(__start, __base_prefix.data(),
call    0 never executed
call    1 never executed
        -: 1075:			       __base_prefix.size());
        -: 1076:	    }
    #####: 1077:	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    %%%%%: 1077-block  0
call    0 never executed
        -: 1078:
    #####: 1079:	  return _M_format_int(string_view(__start, __res.ptr - __start),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1079-block  0
    $$$$$: 1079-block  1
    #####: 1080:			       __start_digits - __start, __fc);
call    0 never executed
    %%%%%: 1080-block  0
        -: 1081:	}
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<__int128, std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1014:	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
        -: 1015:	{
    #####: 1016:	  if (_M_spec._M_type == _Pres_c)
    %%%%%: 1016-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1017:	    return _M_format_character(_S_to_character(__i), __fc);
    %%%%%: 1017-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1017-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1017-block  2
        -: 1018:
        -: 1019:	  char __buf[sizeof(_Int) * __CHAR_BIT__ + 3];
    #####: 1020:	  to_chars_result __res{};
        -: 1021:
    #####: 1022:	  string_view __base_prefix;
        -: 1023:	  make_unsigned_t<_Int> __u;
    #####: 1024:	  if (__i < 0)
    %%%%%: 1024-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1025:	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
    %%%%%: 1025-block  0
        -: 1026:	  else
    #####: 1027:	    __u = __i;
    %%%%%: 1027-block  0
        -: 1028:
    #####: 1029:	  char* __start = __buf + 3;
    #####: 1030:	  char* const __end = __buf + sizeof(__buf);
    #####: 1031:	  char* const __start_digits = __start;
        -: 1032:
    #####: 1033:	  switch (_M_spec._M_type)
    %%%%%: 1033-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1034:	  {
    #####: 1035:	    case _Pres_b:
        -: 1036:	    case _Pres_B:
    #####: 1037:	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    %%%%%: 1037-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1037-block  1
    %%%%%: 1037-block  2
    %%%%%: 1037-block  3
call    2 never executed
    #####: 1038:	      __res = to_chars(__start, __end, __u, 2);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1039:	      break;
    %%%%%: 1039-block  0
        -: 1040:#if 0
        -: 1041:	    case _Pres_c:
        -: 1042:	      return _M_format_character(_S_to_character(__i), __fc);
        -: 1043:#endif
    #####: 1044:	    case _Pres_none:
        -: 1045:	      // Should not reach here with _Pres_none for bool or charT, so:
        -: 1046:	      [[fallthrough]];
        -: 1047:	    case _Pres_d:
    #####: 1048:	      __res = to_chars(__start, __end, __u, 10);
    %%%%%: 1048-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1049:	      break;
    %%%%%: 1049-block  0
    #####: 1050:	    case _Pres_o:
    #####: 1051:	      if (__i != 0)
    %%%%%: 1051-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1052:		__base_prefix = "0";
    %%%%%: 1052-block  0
call    0 never executed
    #####: 1053:	      __res = to_chars(__start, __end, __u, 8);
    %%%%%: 1053-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1054:	      break;
    %%%%%: 1054-block  0
    #####: 1055:	    case _Pres_x:
        -: 1056:	    case _Pres_X:
    #####: 1057:	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    %%%%%: 1057-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1057-block  1
    %%%%%: 1057-block  2
    %%%%%: 1057-block  3
call    2 never executed
    #####: 1058:	      __res = to_chars(__start, __end, __u, 16);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1059:	      if (_M_spec._M_type == _Pres_X)
    %%%%%: 1059-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1060:		for (auto __p = __start; __p != __res.ptr; ++__p)
    %%%%%: 1060-block  0
    %%%%%: 1060-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 1061:#if __has_builtin(__builtin_toupper)
    #####: 1062:		  *__p = __builtin_toupper(*__p);
    %%%%%: 1062-block  0
        -: 1063:#else
        -: 1064:		  *__p = std::toupper(*__p);
        -: 1065:#endif
    #####: 1066:	      break;
    %%%%%: 1066-block  0
    #####: 1067:	    default:
    #####: 1068:	      __builtin_unreachable();
    %%%%%: 1068-block  0
call    0 never executed
        -: 1069:	  }
        -: 1070:
    #####: 1071:	  if (_M_spec._M_alt && __base_prefix.size())
    %%%%%: 1071-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1071-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1071-block  2
    %%%%%: 1071-block  3
    %%%%%: 1071-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1072:	    {
    #####: 1073:	      __start -= __base_prefix.size();
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:	      __builtin_memcpy(__start, __base_prefix.data(),
call    0 never executed
call    1 never executed
        -: 1075:			       __base_prefix.size());
        -: 1076:	    }
    #####: 1077:	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    %%%%%: 1077-block  0
call    0 never executed
        -: 1078:
    #####: 1079:	  return _M_format_int(string_view(__start, __res.ptr - __start),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1079-block  0
    $$$$$: 1079-block  1
    #####: 1080:			       __start_digits - __start, __fc);
call    0 never executed
    %%%%%: 1080-block  0
        -: 1081:	}
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned long long, std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1014:	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
        -: 1015:	{
    #####: 1016:	  if (_M_spec._M_type == _Pres_c)
    %%%%%: 1016-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1017:	    return _M_format_character(_S_to_character(__i), __fc);
    %%%%%: 1017-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1017-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1017-block  2
        -: 1018:
        -: 1019:	  char __buf[sizeof(_Int) * __CHAR_BIT__ + 3];
    #####: 1020:	  to_chars_result __res{};
        -: 1021:
    #####: 1022:	  string_view __base_prefix;
    %%%%%: 1022-block  0
        -: 1023:	  make_unsigned_t<_Int> __u;
        -: 1024:	  if (__i < 0)
        -: 1025:	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
        -: 1026:	  else
    #####: 1027:	    __u = __i;
        -: 1028:
    #####: 1029:	  char* __start = __buf + 3;
    #####: 1030:	  char* const __end = __buf + sizeof(__buf);
    #####: 1031:	  char* const __start_digits = __start;
        -: 1032:
    #####: 1033:	  switch (_M_spec._M_type)
    %%%%%: 1033-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1034:	  {
    #####: 1035:	    case _Pres_b:
        -: 1036:	    case _Pres_B:
    #####: 1037:	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    %%%%%: 1037-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1037-block  1
    %%%%%: 1037-block  2
    %%%%%: 1037-block  3
call    2 never executed
    #####: 1038:	      __res = to_chars(__start, __end, __u, 2);
call    0 never executed
    #####: 1039:	      break;
        -: 1040:#if 0
        -: 1041:	    case _Pres_c:
        -: 1042:	      return _M_format_character(_S_to_character(__i), __fc);
        -: 1043:#endif
    #####: 1044:	    case _Pres_none:
        -: 1045:	      // Should not reach here with _Pres_none for bool or charT, so:
        -: 1046:	      [[fallthrough]];
        -: 1047:	    case _Pres_d:
    #####: 1048:	      __res = to_chars(__start, __end, __u, 10);
    %%%%%: 1048-block  0
call    0 never executed
    #####: 1049:	      break;
    #####: 1050:	    case _Pres_o:
    #####: 1051:	      if (__i != 0)
    %%%%%: 1051-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1052:		__base_prefix = "0";
    %%%%%: 1052-block  0
call    0 never executed
    #####: 1053:	      __res = to_chars(__start, __end, __u, 8);
    %%%%%: 1053-block  0
call    0 never executed
    #####: 1054:	      break;
    #####: 1055:	    case _Pres_x:
        -: 1056:	    case _Pres_X:
    #####: 1057:	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    %%%%%: 1057-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1057-block  1
    %%%%%: 1057-block  2
    %%%%%: 1057-block  3
call    2 never executed
    #####: 1058:	      __res = to_chars(__start, __end, __u, 16);
call    0 never executed
    #####: 1059:	      if (_M_spec._M_type == _Pres_X)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1060:		for (auto __p = __start; __p != __res.ptr; ++__p)
    %%%%%: 1060-block  0
    %%%%%: 1060-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 1061:#if __has_builtin(__builtin_toupper)
    #####: 1062:		  *__p = __builtin_toupper(*__p);
    %%%%%: 1062-block  0
        -: 1063:#else
        -: 1064:		  *__p = std::toupper(*__p);
        -: 1065:#endif
    #####: 1066:	      break;
    %%%%%: 1066-block  0
    #####: 1067:	    default:
    #####: 1068:	      __builtin_unreachable();
    %%%%%: 1068-block  0
call    0 never executed
        -: 1069:	  }
        -: 1070:
    #####: 1071:	  if (_M_spec._M_alt && __base_prefix.size())
    %%%%%: 1071-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1071-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1071-block  2
    %%%%%: 1071-block  3
    %%%%%: 1071-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1072:	    {
    #####: 1073:	      __start -= __base_prefix.size();
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:	      __builtin_memcpy(__start, __base_prefix.data(),
call    0 never executed
call    1 never executed
        -: 1075:			       __base_prefix.size());
        -: 1076:	    }
    #####: 1077:	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    %%%%%: 1077-block  0
call    0 never executed
        -: 1078:
    #####: 1079:	  return _M_format_int(string_view(__start, __res.ptr - __start),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1079-block  0
    $$$$$: 1079-block  1
    #####: 1080:			       __start_digits - __start, __fc);
call    0 never executed
    %%%%%: 1080-block  0
        -: 1081:	}
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<long long, std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1014:	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
        -: 1015:	{
    #####: 1016:	  if (_M_spec._M_type == _Pres_c)
    %%%%%: 1016-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1017:	    return _M_format_character(_S_to_character(__i), __fc);
    %%%%%: 1017-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1017-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1017-block  2
        -: 1018:
        -: 1019:	  char __buf[sizeof(_Int) * __CHAR_BIT__ + 3];
    #####: 1020:	  to_chars_result __res{};
        -: 1021:
    #####: 1022:	  string_view __base_prefix;
        -: 1023:	  make_unsigned_t<_Int> __u;
    #####: 1024:	  if (__i < 0)
    %%%%%: 1024-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1025:	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
    %%%%%: 1025-block  0
        -: 1026:	  else
    #####: 1027:	    __u = __i;
    %%%%%: 1027-block  0
        -: 1028:
    #####: 1029:	  char* __start = __buf + 3;
    #####: 1030:	  char* const __end = __buf + sizeof(__buf);
    #####: 1031:	  char* const __start_digits = __start;
        -: 1032:
    #####: 1033:	  switch (_M_spec._M_type)
    %%%%%: 1033-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1034:	  {
    #####: 1035:	    case _Pres_b:
        -: 1036:	    case _Pres_B:
    #####: 1037:	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    %%%%%: 1037-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1037-block  1
    %%%%%: 1037-block  2
    %%%%%: 1037-block  3
call    2 never executed
    #####: 1038:	      __res = to_chars(__start, __end, __u, 2);
call    0 never executed
    #####: 1039:	      break;
        -: 1040:#if 0
        -: 1041:	    case _Pres_c:
        -: 1042:	      return _M_format_character(_S_to_character(__i), __fc);
        -: 1043:#endif
    #####: 1044:	    case _Pres_none:
        -: 1045:	      // Should not reach here with _Pres_none for bool or charT, so:
        -: 1046:	      [[fallthrough]];
        -: 1047:	    case _Pres_d:
    #####: 1048:	      __res = to_chars(__start, __end, __u, 10);
    %%%%%: 1048-block  0
call    0 never executed
    #####: 1049:	      break;
    #####: 1050:	    case _Pres_o:
    #####: 1051:	      if (__i != 0)
    %%%%%: 1051-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1052:		__base_prefix = "0";
    %%%%%: 1052-block  0
call    0 never executed
    #####: 1053:	      __res = to_chars(__start, __end, __u, 8);
    %%%%%: 1053-block  0
call    0 never executed
    #####: 1054:	      break;
    #####: 1055:	    case _Pres_x:
        -: 1056:	    case _Pres_X:
    #####: 1057:	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    %%%%%: 1057-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1057-block  1
    %%%%%: 1057-block  2
    %%%%%: 1057-block  3
call    2 never executed
    #####: 1058:	      __res = to_chars(__start, __end, __u, 16);
call    0 never executed
    #####: 1059:	      if (_M_spec._M_type == _Pres_X)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1060:		for (auto __p = __start; __p != __res.ptr; ++__p)
    %%%%%: 1060-block  0
    %%%%%: 1060-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 1061:#if __has_builtin(__builtin_toupper)
    #####: 1062:		  *__p = __builtin_toupper(*__p);
    %%%%%: 1062-block  0
        -: 1063:#else
        -: 1064:		  *__p = std::toupper(*__p);
        -: 1065:#endif
    #####: 1066:	      break;
    %%%%%: 1066-block  0
    #####: 1067:	    default:
    #####: 1068:	      __builtin_unreachable();
    %%%%%: 1068-block  0
call    0 never executed
        -: 1069:	  }
        -: 1070:
    #####: 1071:	  if (_M_spec._M_alt && __base_prefix.size())
    %%%%%: 1071-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1071-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1071-block  2
    %%%%%: 1071-block  3
    %%%%%: 1071-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1072:	    {
    #####: 1073:	      __start -= __base_prefix.size();
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:	      __builtin_memcpy(__start, __base_prefix.data(),
call    0 never executed
call    1 never executed
        -: 1075:			       __base_prefix.size());
        -: 1076:	    }
    #####: 1077:	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    %%%%%: 1077-block  0
call    0 never executed
        -: 1078:
    #####: 1079:	  return _M_format_int(string_view(__start, __res.ptr - __start),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1079-block  0
    $$$$$: 1079-block  1
    #####: 1080:			       __start_digits - __start, __fc);
call    0 never executed
    %%%%%: 1080-block  0
        -: 1081:	}
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<unsigned int, std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1014:	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
        -: 1015:	{
    #####: 1016:	  if (_M_spec._M_type == _Pres_c)
    %%%%%: 1016-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1017:	    return _M_format_character(_S_to_character(__i), __fc);
    %%%%%: 1017-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1017-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1017-block  2
        -: 1018:
        -: 1019:	  char __buf[sizeof(_Int) * __CHAR_BIT__ + 3];
    #####: 1020:	  to_chars_result __res{};
        -: 1021:
    #####: 1022:	  string_view __base_prefix;
    %%%%%: 1022-block  0
        -: 1023:	  make_unsigned_t<_Int> __u;
        -: 1024:	  if (__i < 0)
        -: 1025:	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
        -: 1026:	  else
    #####: 1027:	    __u = __i;
        -: 1028:
    #####: 1029:	  char* __start = __buf + 3;
    #####: 1030:	  char* const __end = __buf + sizeof(__buf);
    #####: 1031:	  char* const __start_digits = __start;
        -: 1032:
    #####: 1033:	  switch (_M_spec._M_type)
    %%%%%: 1033-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1034:	  {
    #####: 1035:	    case _Pres_b:
        -: 1036:	    case _Pres_B:
    #####: 1037:	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    %%%%%: 1037-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1037-block  1
    %%%%%: 1037-block  2
    %%%%%: 1037-block  3
call    2 never executed
    #####: 1038:	      __res = to_chars(__start, __end, __u, 2);
call    0 never executed
    #####: 1039:	      break;
        -: 1040:#if 0
        -: 1041:	    case _Pres_c:
        -: 1042:	      return _M_format_character(_S_to_character(__i), __fc);
        -: 1043:#endif
    #####: 1044:	    case _Pres_none:
        -: 1045:	      // Should not reach here with _Pres_none for bool or charT, so:
        -: 1046:	      [[fallthrough]];
        -: 1047:	    case _Pres_d:
    #####: 1048:	      __res = to_chars(__start, __end, __u, 10);
    %%%%%: 1048-block  0
call    0 never executed
    #####: 1049:	      break;
    #####: 1050:	    case _Pres_o:
    #####: 1051:	      if (__i != 0)
    %%%%%: 1051-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1052:		__base_prefix = "0";
    %%%%%: 1052-block  0
call    0 never executed
    #####: 1053:	      __res = to_chars(__start, __end, __u, 8);
    %%%%%: 1053-block  0
call    0 never executed
    #####: 1054:	      break;
    #####: 1055:	    case _Pres_x:
        -: 1056:	    case _Pres_X:
    #####: 1057:	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    %%%%%: 1057-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1057-block  1
    %%%%%: 1057-block  2
    %%%%%: 1057-block  3
call    2 never executed
    #####: 1058:	      __res = to_chars(__start, __end, __u, 16);
call    0 never executed
    #####: 1059:	      if (_M_spec._M_type == _Pres_X)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1060:		for (auto __p = __start; __p != __res.ptr; ++__p)
    %%%%%: 1060-block  0
    %%%%%: 1060-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 1061:#if __has_builtin(__builtin_toupper)
    #####: 1062:		  *__p = __builtin_toupper(*__p);
    %%%%%: 1062-block  0
        -: 1063:#else
        -: 1064:		  *__p = std::toupper(*__p);
        -: 1065:#endif
    #####: 1066:	      break;
    %%%%%: 1066-block  0
    #####: 1067:	    default:
    #####: 1068:	      __builtin_unreachable();
    %%%%%: 1068-block  0
call    0 never executed
        -: 1069:	  }
        -: 1070:
    #####: 1071:	  if (_M_spec._M_alt && __base_prefix.size())
    %%%%%: 1071-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1071-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1071-block  2
    %%%%%: 1071-block  3
    %%%%%: 1071-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1072:	    {
    #####: 1073:	      __start -= __base_prefix.size();
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:	      __builtin_memcpy(__start, __base_prefix.data(),
call    0 never executed
call    1 never executed
        -: 1075:			       __base_prefix.size());
        -: 1076:	    }
    #####: 1077:	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    %%%%%: 1077-block  0
call    0 never executed
        -: 1078:
    #####: 1079:	  return _M_format_int(string_view(__start, __res.ptr - __start),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1079-block  0
    $$$$$: 1079-block  1
    #####: 1080:			       __start_digits - __start, __fc);
call    0 never executed
    %%%%%: 1080-block  0
        -: 1081:	}
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<int, std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1014:	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
        -: 1015:	{
    #####: 1016:	  if (_M_spec._M_type == _Pres_c)
    %%%%%: 1016-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1017:	    return _M_format_character(_S_to_character(__i), __fc);
    %%%%%: 1017-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1017-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1017-block  2
        -: 1018:
        -: 1019:	  char __buf[sizeof(_Int) * __CHAR_BIT__ + 3];
    #####: 1020:	  to_chars_result __res{};
        -: 1021:
    #####: 1022:	  string_view __base_prefix;
        -: 1023:	  make_unsigned_t<_Int> __u;
    #####: 1024:	  if (__i < 0)
    %%%%%: 1024-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1025:	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
    %%%%%: 1025-block  0
        -: 1026:	  else
    #####: 1027:	    __u = __i;
    %%%%%: 1027-block  0
        -: 1028:
    #####: 1029:	  char* __start = __buf + 3;
    #####: 1030:	  char* const __end = __buf + sizeof(__buf);
    #####: 1031:	  char* const __start_digits = __start;
        -: 1032:
    #####: 1033:	  switch (_M_spec._M_type)
    %%%%%: 1033-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1034:	  {
    #####: 1035:	    case _Pres_b:
        -: 1036:	    case _Pres_B:
    #####: 1037:	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    %%%%%: 1037-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1037-block  1
    %%%%%: 1037-block  2
    %%%%%: 1037-block  3
call    2 never executed
    #####: 1038:	      __res = to_chars(__start, __end, __u, 2);
call    0 never executed
    #####: 1039:	      break;
        -: 1040:#if 0
        -: 1041:	    case _Pres_c:
        -: 1042:	      return _M_format_character(_S_to_character(__i), __fc);
        -: 1043:#endif
    #####: 1044:	    case _Pres_none:
        -: 1045:	      // Should not reach here with _Pres_none for bool or charT, so:
        -: 1046:	      [[fallthrough]];
        -: 1047:	    case _Pres_d:
    #####: 1048:	      __res = to_chars(__start, __end, __u, 10);
    %%%%%: 1048-block  0
call    0 never executed
    #####: 1049:	      break;
    #####: 1050:	    case _Pres_o:
    #####: 1051:	      if (__i != 0)
    %%%%%: 1051-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1052:		__base_prefix = "0";
    %%%%%: 1052-block  0
call    0 never executed
    #####: 1053:	      __res = to_chars(__start, __end, __u, 8);
    %%%%%: 1053-block  0
call    0 never executed
    #####: 1054:	      break;
    #####: 1055:	    case _Pres_x:
        -: 1056:	    case _Pres_X:
    #####: 1057:	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    %%%%%: 1057-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1057-block  1
    %%%%%: 1057-block  2
    %%%%%: 1057-block  3
call    2 never executed
    #####: 1058:	      __res = to_chars(__start, __end, __u, 16);
call    0 never executed
    #####: 1059:	      if (_M_spec._M_type == _Pres_X)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1060:		for (auto __p = __start; __p != __res.ptr; ++__p)
    %%%%%: 1060-block  0
    %%%%%: 1060-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 1061:#if __has_builtin(__builtin_toupper)
    #####: 1062:		  *__p = __builtin_toupper(*__p);
    %%%%%: 1062-block  0
        -: 1063:#else
        -: 1064:		  *__p = std::toupper(*__p);
        -: 1065:#endif
    #####: 1066:	      break;
    %%%%%: 1066-block  0
    #####: 1067:	    default:
    #####: 1068:	      __builtin_unreachable();
    %%%%%: 1068-block  0
call    0 never executed
        -: 1069:	  }
        -: 1070:
    #####: 1071:	  if (_M_spec._M_alt && __base_prefix.size())
    %%%%%: 1071-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1071-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1071-block  2
    %%%%%: 1071-block  3
    %%%%%: 1071-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1072:	    {
    #####: 1073:	      __start -= __base_prefix.size();
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:	      __builtin_memcpy(__start, __base_prefix.data(),
call    0 never executed
call    1 never executed
        -: 1075:			       __base_prefix.size());
        -: 1076:	    }
    #####: 1077:	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    %%%%%: 1077-block  0
call    0 never executed
        -: 1078:
    #####: 1079:	  return _M_format_int(string_view(__start, __res.ptr - __start),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1079-block  0
    $$$$$: 1079-block  1
    #####: 1080:			       __start_digits - __start, __fc);
call    0 never executed
    %%%%%: 1080-block  0
        -: 1081:	}
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<char, std::__format::_Sink_iter<char> >(char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<char, std::__format::_Sink_iter<char> >(char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1014:	format(_Int __i, basic_format_context<_Out, _CharT>& __fc) const
        -: 1015:	{
    #####: 1016:	  if (_M_spec._M_type == _Pres_c)
    %%%%%: 1016-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1017:	    return _M_format_character(_S_to_character(__i), __fc);
    %%%%%: 1017-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1017-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1017-block  2
        -: 1018:
        -: 1019:	  char __buf[sizeof(_Int) * __CHAR_BIT__ + 3];
    #####: 1020:	  to_chars_result __res{};
        -: 1021:
    #####: 1022:	  string_view __base_prefix;
        -: 1023:	  make_unsigned_t<_Int> __u;
    #####: 1024:	  if (__i < 0)
    %%%%%: 1024-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1025:	    __u = -static_cast<make_unsigned_t<_Int>>(__i);
    %%%%%: 1025-block  0
        -: 1026:	  else
    #####: 1027:	    __u = __i;
    %%%%%: 1027-block  0
        -: 1028:
    #####: 1029:	  char* __start = __buf + 3;
    #####: 1030:	  char* const __end = __buf + sizeof(__buf);
    #####: 1031:	  char* const __start_digits = __start;
        -: 1032:
    #####: 1033:	  switch (_M_spec._M_type)
    %%%%%: 1033-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1034:	  {
    #####: 1035:	    case _Pres_b:
        -: 1036:	    case _Pres_B:
    #####: 1037:	      __base_prefix = _M_spec._M_type == _Pres_b ? "0b" : "0B";
    %%%%%: 1037-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1037-block  1
    %%%%%: 1037-block  2
    %%%%%: 1037-block  3
call    2 never executed
    #####: 1038:	      __res = to_chars(__start, __end, __u, 2);
call    0 never executed
    #####: 1039:	      break;
        -: 1040:#if 0
        -: 1041:	    case _Pres_c:
        -: 1042:	      return _M_format_character(_S_to_character(__i), __fc);
        -: 1043:#endif
    #####: 1044:	    case _Pres_none:
        -: 1045:	      // Should not reach here with _Pres_none for bool or charT, so:
        -: 1046:	      [[fallthrough]];
        -: 1047:	    case _Pres_d:
    #####: 1048:	      __res = to_chars(__start, __end, __u, 10);
    %%%%%: 1048-block  0
call    0 never executed
    #####: 1049:	      break;
    #####: 1050:	    case _Pres_o:
    #####: 1051:	      if (__i != 0)
    %%%%%: 1051-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1052:		__base_prefix = "0";
    %%%%%: 1052-block  0
call    0 never executed
    #####: 1053:	      __res = to_chars(__start, __end, __u, 8);
    %%%%%: 1053-block  0
call    0 never executed
    #####: 1054:	      break;
    #####: 1055:	    case _Pres_x:
        -: 1056:	    case _Pres_X:
    #####: 1057:	      __base_prefix = _M_spec._M_type == _Pres_x ? "0x" : "0X";
    %%%%%: 1057-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1057-block  1
    %%%%%: 1057-block  2
    %%%%%: 1057-block  3
call    2 never executed
    #####: 1058:	      __res = to_chars(__start, __end, __u, 16);
call    0 never executed
    #####: 1059:	      if (_M_spec._M_type == _Pres_X)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1060:		for (auto __p = __start; __p != __res.ptr; ++__p)
    %%%%%: 1060-block  0
    %%%%%: 1060-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 1061:#if __has_builtin(__builtin_toupper)
    #####: 1062:		  *__p = __builtin_toupper(*__p);
    %%%%%: 1062-block  0
        -: 1063:#else
        -: 1064:		  *__p = std::toupper(*__p);
        -: 1065:#endif
    #####: 1066:	      break;
    %%%%%: 1066-block  0
    #####: 1067:	    default:
    #####: 1068:	      __builtin_unreachable();
    %%%%%: 1068-block  0
call    0 never executed
        -: 1069:	  }
        -: 1070:
    #####: 1071:	  if (_M_spec._M_alt && __base_prefix.size())
    %%%%%: 1071-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1071-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1071-block  2
    %%%%%: 1071-block  3
    %%%%%: 1071-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1072:	    {
    #####: 1073:	      __start -= __base_prefix.size();
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:	      __builtin_memcpy(__start, __base_prefix.data(),
call    0 never executed
call    1 never executed
        -: 1075:			       __base_prefix.size());
        -: 1076:	    }
    #####: 1077:	  __start = __format::__put_sign(__i, _M_spec._M_sign, __start - 1);
    %%%%%: 1077-block  0
call    0 never executed
        -: 1078:
    #####: 1079:	  return _M_format_int(string_view(__start, __res.ptr - __start),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1079-block  0
    $$$$$: 1079-block  1
    #####: 1080:			       __start_digits - __start, __fc);
call    0 never executed
    %%%%%: 1080-block  0
        -: 1081:	}
------------------
        -: 1082:
        -: 1083:      template<typename _Out>
        -: 1084:	typename basic_format_context<_Out, _CharT>::iterator
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1085:	format(bool __i, basic_format_context<_Out, _CharT>& __fc) const
        -: 1086:	{
    #####: 1087:	  if (_M_spec._M_type == _Pres_c)
    %%%%%: 1087-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1088:	    return _M_format_character(static_cast<unsigned char>(__i), __fc);
    %%%%%: 1088-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1088-block  1
    #####: 1089:	  if (_M_spec._M_type != _Pres_s)
    %%%%%: 1089-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1090:	    return format(static_cast<unsigned char>(__i), __fc);
    %%%%%: 1090-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1090-block  1
        -: 1091:
    #####: 1092:	  basic_string<_CharT> __s;
    %%%%%: 1092-block  0
call    0 never executed
        -: 1093:	  size_t __est_width;
    #####: 1094:	  if (_M_spec._M_localized) [[unlikely]]
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1095:	    {
    #####: 1096:	      auto& __np = std::use_facet<numpunct<_CharT>>(__fc.locale());
    %%%%%: 1096-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1096-block  1
call    4 never executed
    $$$$$: 1096-block  2
call    5 never executed
    $$$$$: 1096-block  3
    #####: 1097:	      __s = __i ? __np.truename() : __np.falsename();
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1097-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 1097-block  1
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1097-block  2
call    8 never executed
call    9 never executed
    $$$$$: 1097-block  3
    #####: 1098:	      __est_width = __s.size(); // TODO Unicode-aware estimate
call    0 never executed
        -: 1099:	    }
        -: 1100:	  else
        -: 1101:	    {
        -: 1102:	      if constexpr (is_same_v<char, _CharT>)
    #####: 1103:		__s = __i ? "true" : "false";
    %%%%%: 1103-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1103-block  1
    %%%%%: 1103-block  2
    %%%%%: 1103-block  3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 1104:	      else
        -: 1105:		__s = __i ? L"true" : L"false";
    #####: 1106:	      __est_width = __s.size();
    %%%%%: 1106-block  0
call    0 never executed
        -: 1107:	    }
        -: 1108:
    #####: 1109:	  return __format::__write_padded_as_spec(__s, __est_width, __fc,
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1110:						  _M_spec);
    %%%%%: 1110-block  0
call    0 never executed
    %%%%%: 1110-block  1
    #####: 1111:	}
    %%%%%: 1111-block  0
call    0 never executed
    $$$$$: 1111-block  1
call    1 never executed
        -: 1112:
        -: 1113:      template<typename _Out>
        -: 1114:	typename basic_format_context<_Out, _CharT>::iterator
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_character<std::__format::_Sink_iter<char> >(char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1115:	_M_format_character(_CharT __c,
        -: 1116:		      basic_format_context<_Out, _CharT>& __fc) const
        -: 1117:	{
    #####: 1118:	  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);
    %%%%%: 1118-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1118-block  1
    %%%%%: 1118-block  2
    %%%%%: 1118-block  3
        -: 1119:	}
        -: 1120:
        -: 1121:      template<typename _Int>
        -: 1122:	static _CharT
    #####: 1123:	_S_to_character(_Int __i)
        -: 1124:	{
        -: 1125:	  using _Traits = __gnu_cxx::__int_traits<_CharT>;
        -: 1126:	  if constexpr (is_signed_v<_Int> == is_signed_v<_CharT>)
        -: 1127:	    {
    #####: 1128:	      if (_Traits::__min <= __i && __i <= _Traits::__max)
    #####: 1129:		return static_cast<_CharT>(__i);
        -: 1130:	    }
        -: 1131:	  else if constexpr (is_signed_v<_Int>)
        -: 1132:	    {
        -: 1133:	      if (__i >= 0 && make_unsigned_t<_Int>(__i) <= _Traits::__max)
        -: 1134:		return static_cast<_CharT>(__i);
        -: 1135:	    }
    #####: 1136:	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
    #####: 1137:	    return static_cast<_CharT>(__i);
    #####: 1138:	  __throw_format_error("format error: integer not representable as "
        -: 1139:			       "character");
        -: 1140:	}
------------------
char std::__format::__formatter_int<char>::_S_to_character<unsigned char>(unsigned char):
function char std::__format::__formatter_int<char>::_S_to_character<unsigned char>(unsigned char) called 0 returned 0% blocks executed 0%
    #####: 1123:	_S_to_character(_Int __i)
        -: 1124:	{
        -: 1125:	  using _Traits = __gnu_cxx::__int_traits<_CharT>;
        -: 1126:	  if constexpr (is_signed_v<_Int> == is_signed_v<_CharT>)
        -: 1127:	    {
        -: 1128:	      if (_Traits::__min <= __i && __i <= _Traits::__max)
        -: 1129:		return static_cast<_CharT>(__i);
        -: 1130:	    }
        -: 1131:	  else if constexpr (is_signed_v<_Int>)
        -: 1132:	    {
        -: 1133:	      if (__i >= 0 && make_unsigned_t<_Int>(__i) <= _Traits::__max)
        -: 1134:		return static_cast<_CharT>(__i);
        -: 1135:	    }
    #####: 1136:	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
    %%%%%: 1136-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1137:	    return static_cast<_CharT>(__i);
    %%%%%: 1137-block  0
    #####: 1138:	  __throw_format_error("format error: integer not representable as "
    %%%%%: 1138-block  0
call    0 never executed
        -: 1139:			       "character");
        -: 1140:	}
------------------
char std::__format::__formatter_int<char>::_S_to_character<unsigned __int128>(unsigned __int128):
function char std::__format::__formatter_int<char>::_S_to_character<unsigned __int128>(unsigned __int128) called 0 returned 0% blocks executed 0%
    #####: 1123:	_S_to_character(_Int __i)
        -: 1124:	{
        -: 1125:	  using _Traits = __gnu_cxx::__int_traits<_CharT>;
        -: 1126:	  if constexpr (is_signed_v<_Int> == is_signed_v<_CharT>)
        -: 1127:	    {
        -: 1128:	      if (_Traits::__min <= __i && __i <= _Traits::__max)
        -: 1129:		return static_cast<_CharT>(__i);
        -: 1130:	    }
        -: 1131:	  else if constexpr (is_signed_v<_Int>)
        -: 1132:	    {
        -: 1133:	      if (__i >= 0 && make_unsigned_t<_Int>(__i) <= _Traits::__max)
        -: 1134:		return static_cast<_CharT>(__i);
        -: 1135:	    }
    #####: 1136:	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
    %%%%%: 1136-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1137:	    return static_cast<_CharT>(__i);
    %%%%%: 1137-block  0
    #####: 1138:	  __throw_format_error("format error: integer not representable as "
    %%%%%: 1138-block  0
call    0 never executed
        -: 1139:			       "character");
        -: 1140:	}
------------------
char std::__format::__formatter_int<char>::_S_to_character<__int128>(__int128):
function char std::__format::__formatter_int<char>::_S_to_character<__int128>(__int128) called 0 returned 0% blocks executed 0%
    #####: 1123:	_S_to_character(_Int __i)
        -: 1124:	{
        -: 1125:	  using _Traits = __gnu_cxx::__int_traits<_CharT>;
        -: 1126:	  if constexpr (is_signed_v<_Int> == is_signed_v<_CharT>)
        -: 1127:	    {
        -: 1128:	      if (_Traits::__min <= __i && __i <= _Traits::__max)
        -: 1129:		return static_cast<_CharT>(__i);
        -: 1130:	    }
        -: 1131:	  else if constexpr (is_signed_v<_Int>)
        -: 1132:	    {
        -: 1133:	      if (__i >= 0 && make_unsigned_t<_Int>(__i) <= _Traits::__max)
        -: 1134:		return static_cast<_CharT>(__i);
        -: 1135:	    }
    #####: 1136:	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
    %%%%%: 1136-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1137:	    return static_cast<_CharT>(__i);
    %%%%%: 1137-block  0
    #####: 1138:	  __throw_format_error("format error: integer not representable as "
    %%%%%: 1138-block  0
call    0 never executed
        -: 1139:			       "character");
        -: 1140:	}
------------------
char std::__format::__formatter_int<char>::_S_to_character<unsigned long long>(unsigned long long):
function char std::__format::__formatter_int<char>::_S_to_character<unsigned long long>(unsigned long long) called 0 returned 0% blocks executed 0%
    #####: 1123:	_S_to_character(_Int __i)
        -: 1124:	{
        -: 1125:	  using _Traits = __gnu_cxx::__int_traits<_CharT>;
        -: 1126:	  if constexpr (is_signed_v<_Int> == is_signed_v<_CharT>)
        -: 1127:	    {
        -: 1128:	      if (_Traits::__min <= __i && __i <= _Traits::__max)
        -: 1129:		return static_cast<_CharT>(__i);
        -: 1130:	    }
        -: 1131:	  else if constexpr (is_signed_v<_Int>)
        -: 1132:	    {
        -: 1133:	      if (__i >= 0 && make_unsigned_t<_Int>(__i) <= _Traits::__max)
        -: 1134:		return static_cast<_CharT>(__i);
        -: 1135:	    }
    #####: 1136:	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
    %%%%%: 1136-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1137:	    return static_cast<_CharT>(__i);
    %%%%%: 1137-block  0
    #####: 1138:	  __throw_format_error("format error: integer not representable as "
    %%%%%: 1138-block  0
call    0 never executed
        -: 1139:			       "character");
        -: 1140:	}
------------------
char std::__format::__formatter_int<char>::_S_to_character<long long>(long long):
function char std::__format::__formatter_int<char>::_S_to_character<long long>(long long) called 0 returned 0% blocks executed 0%
    #####: 1123:	_S_to_character(_Int __i)
        -: 1124:	{
        -: 1125:	  using _Traits = __gnu_cxx::__int_traits<_CharT>;
        -: 1126:	  if constexpr (is_signed_v<_Int> == is_signed_v<_CharT>)
        -: 1127:	    {
    #####: 1128:	      if (_Traits::__min <= __i && __i <= _Traits::__max)
    %%%%%: 1128-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1128-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1129:		return static_cast<_CharT>(__i);
    %%%%%: 1129-block  0
        -: 1130:	    }
        -: 1131:	  else if constexpr (is_signed_v<_Int>)
        -: 1132:	    {
        -: 1133:	      if (__i >= 0 && make_unsigned_t<_Int>(__i) <= _Traits::__max)
        -: 1134:		return static_cast<_CharT>(__i);
        -: 1135:	    }
        -: 1136:	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
        -: 1137:	    return static_cast<_CharT>(__i);
    #####: 1138:	  __throw_format_error("format error: integer not representable as "
    %%%%%: 1138-block  0
call    0 never executed
        -: 1139:			       "character");
        -: 1140:	}
------------------
char std::__format::__formatter_int<char>::_S_to_character<unsigned int>(unsigned int):
function char std::__format::__formatter_int<char>::_S_to_character<unsigned int>(unsigned int) called 0 returned 0% blocks executed 0%
    #####: 1123:	_S_to_character(_Int __i)
        -: 1124:	{
        -: 1125:	  using _Traits = __gnu_cxx::__int_traits<_CharT>;
        -: 1126:	  if constexpr (is_signed_v<_Int> == is_signed_v<_CharT>)
        -: 1127:	    {
        -: 1128:	      if (_Traits::__min <= __i && __i <= _Traits::__max)
        -: 1129:		return static_cast<_CharT>(__i);
        -: 1130:	    }
        -: 1131:	  else if constexpr (is_signed_v<_Int>)
        -: 1132:	    {
        -: 1133:	      if (__i >= 0 && make_unsigned_t<_Int>(__i) <= _Traits::__max)
        -: 1134:		return static_cast<_CharT>(__i);
        -: 1135:	    }
    #####: 1136:	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
    %%%%%: 1136-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1137:	    return static_cast<_CharT>(__i);
    %%%%%: 1137-block  0
    #####: 1138:	  __throw_format_error("format error: integer not representable as "
    %%%%%: 1138-block  0
call    0 never executed
        -: 1139:			       "character");
        -: 1140:	}
------------------
char std::__format::__formatter_int<char>::_S_to_character<int>(int):
function char std::__format::__formatter_int<char>::_S_to_character<int>(int) called 0 returned 0% blocks executed 0%
    #####: 1123:	_S_to_character(_Int __i)
        -: 1124:	{
        -: 1125:	  using _Traits = __gnu_cxx::__int_traits<_CharT>;
        -: 1126:	  if constexpr (is_signed_v<_Int> == is_signed_v<_CharT>)
        -: 1127:	    {
    #####: 1128:	      if (_Traits::__min <= __i && __i <= _Traits::__max)
    %%%%%: 1128-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1128-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1129:		return static_cast<_CharT>(__i);
    %%%%%: 1129-block  0
        -: 1130:	    }
        -: 1131:	  else if constexpr (is_signed_v<_Int>)
        -: 1132:	    {
        -: 1133:	      if (__i >= 0 && make_unsigned_t<_Int>(__i) <= _Traits::__max)
        -: 1134:		return static_cast<_CharT>(__i);
        -: 1135:	    }
        -: 1136:	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
        -: 1137:	    return static_cast<_CharT>(__i);
    #####: 1138:	  __throw_format_error("format error: integer not representable as "
    %%%%%: 1138-block  0
call    0 never executed
        -: 1139:			       "character");
        -: 1140:	}
------------------
char std::__format::__formatter_int<char>::_S_to_character<char>(char):
function char std::__format::__formatter_int<char>::_S_to_character<char>(char) called 0 returned 0% blocks executed 0%
    #####: 1123:	_S_to_character(_Int __i)
        -: 1124:	{
        -: 1125:	  using _Traits = __gnu_cxx::__int_traits<_CharT>;
        -: 1126:	  if constexpr (is_signed_v<_Int> == is_signed_v<_CharT>)
        -: 1127:	    {
        -: 1128:	      if (_Traits::__min <= __i && __i <= _Traits::__max)
    #####: 1129:		return static_cast<_CharT>(__i);
    %%%%%: 1129-block  0
        -: 1130:	    }
        -: 1131:	  else if constexpr (is_signed_v<_Int>)
        -: 1132:	    {
        -: 1133:	      if (__i >= 0 && make_unsigned_t<_Int>(__i) <= _Traits::__max)
        -: 1134:		return static_cast<_CharT>(__i);
        -: 1135:	    }
        -: 1136:	  else if (__i <= make_unsigned_t<_CharT>(_Traits::__max))
        -: 1137:	    return static_cast<_CharT>(__i);
        -: 1138:	  __throw_format_error("format error: integer not representable as "
        -: 1139:			       "character");
        -: 1140:	}
------------------
        -: 1141:
        -: 1142:      template<typename _Out>
        -: 1143:	typename basic_format_context<_Out, _CharT>::iterator
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_int<char>::_M_format_int<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, unsigned long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1144:	_M_format_int(string_view __narrow_str, size_t __prefix_len,
        -: 1145:		      basic_format_context<_Out, _CharT>& __fc) const
        -: 1146:	{
    #####: 1147:	  size_t __width = _M_spec._M_get_width(__fc);
    %%%%%: 1147-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1147-block  1
        -: 1148:
        -: 1149:	  _Optional_locale __loc;
        -: 1150:
    #####: 1151:	  basic_string_view<_CharT> __str;
        -: 1152:	  if constexpr (is_same_v<char, _CharT>)
    #####: 1153:	    __str = __narrow_str;
        -: 1154:	  else
        -: 1155:	    {
        -: 1156:	      __loc = __fc.locale();
        -: 1157:	      auto& __ct = use_facet<ctype<_CharT>>(__loc.value());
        -: 1158:	      size_t __n = __narrow_str.size();
        -: 1159:	      auto __p = (_CharT*)__builtin_alloca(__n * sizeof(_CharT));
        -: 1160:	      __ct.widen(__narrow_str.data(), __narrow_str.data() + __n, __p);
        -: 1161:	      __str = {__p, __n};
        -: 1162:	    }
        -: 1163:
    #####: 1164:	  if (_M_spec._M_localized)
    %%%%%: 1164-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1165:	    {
        -: 1166:	      if constexpr (is_same_v<char, _CharT>)
    #####: 1167:		__loc = __fc.locale();
    %%%%%: 1167-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1168:	      const auto& __l = __loc.value();
call    0 never executed
    #####: 1169:	      if (__l.name() != "C")
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1169-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1169-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$: 1169-block  2
call    9 never executed
    $$$$$: 1169-block  3
        -: 1170:		{
    #####: 1171:		  auto& __np = use_facet<numpunct<_CharT>>(__l);
    %%%%%: 1171-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1172:		  string __grp = __np.grouping();
    %%%%%: 1172-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1173:		  if (!__grp.empty())
    %%%%%: 1173-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1174:		    {
    #####: 1175:		      size_t __n = __str.size() - __prefix_len;
    %%%%%: 1175-block  0
call    0 never executed
    #####: 1176:		      auto __p = (_CharT*)__builtin_alloca(2 * __n
        -: 1177:							     * sizeof(_CharT)
        -: 1178:							     + __prefix_len);
    #####: 1179:		      auto __s = __str.data();
call    0 never executed
    #####: 1180:		      char_traits<_CharT>::copy(__p, __s, __prefix_len);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1181:		      __s += __prefix_len;
    #####: 1182:		      auto __end = std::__add_grouping(__p + __prefix_len,
    %%%%%: 1182-block  0
call    0 never executed
    #####: 1183:						       __np.thousands_sep(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1183-block  0
call    3 never executed
    #####: 1184:						       __grp.data(),
call    0 never executed
        -: 1185:						       __grp.size(),
        -: 1186:						       __s, __s + __n);
    #####: 1187:		      __str = {__p, size_t(__end - __p)};
call    0 never executed
        -: 1188:		    }
    #####: 1189:		}
    %%%%%: 1189-block  0
call    0 never executed
    $$$$$: 1189-block  1
call    1 never executed
        -: 1190:	    }
        -: 1191:
    #####: 1192:	  if (__width <= __str.size())
    %%%%%: 1192-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1193:	    return __format::__write(__fc.out(), __str);
    %%%%%: 1193-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1193-block  1
        -: 1194:
    #####: 1195:	  _CharT __fill_char = _M_spec._M_fill;
    #####: 1196:	  _Align __align = _M_spec._M_align;
        -: 1197:
    #####: 1198:	  size_t __nfill = __width - __str.size();
    %%%%%: 1198-block  0
call    0 never executed
    #####: 1199:	  auto __out = __fc.out();
call    0 never executed
    #####: 1200:	  if (__align == _Align_default)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1201:	    {
    #####: 1202:	      __align = _Align_right;
    #####: 1203:	      if (_M_spec._M_zero_fill)
    %%%%%: 1203-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1204:		{
    #####: 1205:		  __fill_char = _CharT('0');
        -: 1206:		  // Write sign and base prefix before zero filling.
    #####: 1207:		  if (__prefix_len != 0)
    %%%%%: 1207-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1208:		    {
    #####: 1209:		      __out = __format::__write(std::move(__out),
    %%%%%: 1209-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1209-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 1210:						__str.substr(0, __prefix_len));
    #####: 1211:		      __str.remove_prefix(__prefix_len);
    %%%%%: 1211-block  0
call    0 never executed
        -: 1212:		    }
        -: 1213:		}
        -: 1214:	      else
    #####: 1215:		__fill_char = _CharT(' ');
    %%%%%: 1215-block  0
        -: 1216:	    }
    #####: 1217:	  return __format::__write_padded(std::move(__out), __str,
    %%%%%: 1217-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 1218:					  __align, __nfill, __fill_char);
    %%%%%: 1218-block  0
    #####: 1219:	}
    %%%%%: 1219-block  0
call    0 never executed
    $$$$$: 1219-block  1
call    1 never executed
        -: 1220:
        -: 1221:#if defined __SIZEOF_INT128__ && defined __STRICT_ANSI__
        -: 1222:      template<typename _Tp>
        -: 1223:	using make_unsigned_t
        -: 1224:	  = typename __conditional_t<(sizeof(_Tp) <= sizeof(long long)),
        -: 1225:				     std::make_unsigned<_Tp>,
        -: 1226:				     type_identity<unsigned __int128>>::type;
        -: 1227:
        -: 1228:      // std::to_chars is not overloaded for int128 in strict mode.
        -: 1229:      template<typename _Int>
        -: 1230:	static to_chars_result
    #####: 1231:	to_chars(char* __first, char* __last, _Int __value, int __base)
    #####: 1232:	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
------------------
std::to_chars_result std::__format::__formatter_int<char>::to_chars<unsigned __int128>(char*, char*, unsigned __int128, int):
function std::to_chars_result std::__format::__formatter_int<char>::to_chars<unsigned __int128>(char*, char*, unsigned __int128, int) called 0 returned 0% blocks executed 0%
    #####: 1231:	to_chars(char* __first, char* __last, _Int __value, int __base)
    #####: 1232:	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
    %%%%%: 1232-block  0
call    0 never executed
------------------
std::to_chars_result std::__format::__formatter_int<char>::to_chars<unsigned long long>(char*, char*, unsigned long long, int):
function std::to_chars_result std::__format::__formatter_int<char>::to_chars<unsigned long long>(char*, char*, unsigned long long, int) called 0 returned 0% blocks executed 0%
    #####: 1231:	to_chars(char* __first, char* __last, _Int __value, int __base)
    #####: 1232:	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
    %%%%%: 1232-block  0
call    0 never executed
------------------
std::to_chars_result std::__format::__formatter_int<char>::to_chars<unsigned int>(char*, char*, unsigned int, int):
function std::to_chars_result std::__format::__formatter_int<char>::to_chars<unsigned int>(char*, char*, unsigned int, int) called 0 returned 0% blocks executed 0%
    #####: 1231:	to_chars(char* __first, char* __last, _Int __value, int __base)
    #####: 1232:	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
    %%%%%: 1232-block  0
call    0 never executed
------------------
std::to_chars_result std::__format::__formatter_int<char>::to_chars<unsigned char>(char*, char*, unsigned char, int):
function std::to_chars_result std::__format::__formatter_int<char>::to_chars<unsigned char>(char*, char*, unsigned char, int) called 0 returned 0% blocks executed 0%
    #####: 1231:	to_chars(char* __first, char* __last, _Int __value, int __base)
    #####: 1232:	{ return std::__to_chars_i<_Int>(__first, __last, __value, __base); }
    %%%%%: 1232-block  0
call    0 never executed
------------------
        -: 1233:#endif
        -: 1234:
        -: 1235:      _Spec<_CharT> _M_spec{};
        -: 1236:    };
        -: 1237:
        -: 1238:  // Decide how 128-bit floating-point types should be formatted (or not).
        -: 1239:  // When supported, the typedef __format::__float128_t is the type that
        -: 1240:  // format arguments should be converted to for storage in basic_format_arg.
        -: 1241:  // Define the macro _GLIBCXX_FORMAT_F128 to say they're supported.
        -: 1242:  // _GLIBCXX_FORMAT_F128=1 means __float128, _Float128 etc. will be formatted
        -: 1243:  // by converting them to long double (or __ieee128 for powerpc64le).
        -: 1244:  // _GLIBCXX_FORMAT_F128=2 means basic_format_arg needs to enable explicit
        -: 1245:  // support for _Float128, rather than formatting it as another type.
        -: 1246:#undef _GLIBCXX_FORMAT_F128
        -: 1247:
        -: 1248:#ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT
        -: 1249:
        -: 1250:  // Format 128-bit floating-point types using __ieee128.
        -: 1251:  using __float128_t = __ieee128;
        -: 1252:# define _GLIBCXX_FORMAT_F128 1
        -: 1253:
        -: 1254:#ifdef __LONG_DOUBLE_IEEE128__
        -: 1255:  // These overloads exist in the library, but are not declared.
        -: 1256:  // Make them available as std::__format::to_chars.
        -: 1257:  to_chars_result
        -: 1258:  to_chars(char*, char*, __ibm128) noexcept
        -: 1259:    __asm("_ZSt8to_charsPcS_e");
        -: 1260:
        -: 1261:  to_chars_result
        -: 1262:  to_chars(char*, char*, __ibm128, chars_format) noexcept
        -: 1263:    __asm("_ZSt8to_charsPcS_eSt12chars_format");
        -: 1264:
        -: 1265:  to_chars_result
        -: 1266:  to_chars(char*, char*, __ibm128, chars_format, int) noexcept
        -: 1267:    __asm("_ZSt8to_charsPcS_eSt12chars_formati");
        -: 1268:#elif __cplusplus == 202002L
        -: 1269:  to_chars_result
        -: 1270:  to_chars(char*, char*, __ieee128) noexcept
        -: 1271:    __asm("_ZSt8to_charsPcS_u9__ieee128");
        -: 1272:
        -: 1273:  to_chars_result
        -: 1274:  to_chars(char*, char*, __ieee128, chars_format) noexcept
        -: 1275:    __asm("_ZSt8to_charsPcS_u9__ieee128St12chars_format");
        -: 1276:
        -: 1277:  to_chars_result
        -: 1278:  to_chars(char*, char*, __ieee128, chars_format, int) noexcept
        -: 1279:    __asm("_ZSt8to_charsPcS_u9__ieee128St12chars_formati");
        -: 1280:#endif
        -: 1281:
        -: 1282:#elif defined _GLIBCXX_LDOUBLE_IS_IEEE_BINARY128
        -: 1283:
        -: 1284:  // Format 128-bit floating-point types using long double.
        -: 1285:  using __float128_t = long double;
        -: 1286:# define _GLIBCXX_FORMAT_F128 1
        -: 1287:
        -: 1288:#elif __FLT128_DIG__ && defined(_GLIBCXX_HAVE_FLOAT128_MATH)
        -: 1289:
        -: 1290:  // Format 128-bit floating-point types using _Float128.
        -: 1291:  using __float128_t = _Float128;
        -: 1292:# define _GLIBCXX_FORMAT_F128 2
        -: 1293:
        -: 1294:# if __cplusplus == 202002L
        -: 1295:  // These overloads exist in the library, but are not declared for C++20.
        -: 1296:  // Make them available as std::__format::to_chars.
        -: 1297:  to_chars_result
        -: 1298:  to_chars(char*, char*, _Float128) noexcept
        -: 1299:#  if _GLIBCXX_INLINE_VERSION
        -: 1300:    __asm("_ZNSt3__88to_charsEPcS0_DF128_");
        -: 1301:#  else
        -: 1302:    __asm("_ZSt8to_charsPcS_DF128_");
        -: 1303:#  endif
        -: 1304:
        -: 1305:  to_chars_result
        -: 1306:  to_chars(char*, char*, _Float128, chars_format) noexcept
        -: 1307:#  if _GLIBCXX_INLINE_VERSION
        -: 1308:    __asm("_ZNSt3__88to_charsEPcS0_DF128_NS_12chars_formatE");
        -: 1309:#  else
        -: 1310:    __asm("_ZSt8to_charsPcS_DF128_St12chars_format");
        -: 1311:#  endif
        -: 1312:
        -: 1313:  to_chars_result
        -: 1314:  to_chars(char*, char*, _Float128, chars_format, int) noexcept
        -: 1315:#  if _GLIBCXX_INLINE_VERSION
        -: 1316:    __asm("_ZNSt3__88to_charsEPcS0_DF128_NS_12chars_formatEi");
        -: 1317:#  else
        -: 1318:    __asm("_ZSt8to_charsPcS_DF128_St12chars_formati");
        -: 1319:#  endif
        -: 1320:# endif
        -: 1321:#endif
        -: 1322:
        -: 1323:  using std::to_chars;
        -: 1324:
        -: 1325:  // We can format a floating-point type iff it is usable with to_chars.
        -: 1326:  template<typename _Tp>
        -: 1327:    concept __formattable_float = requires (_Tp __t, char* __p)
        -: 1328:    { __format::to_chars(__p, __p, __t, chars_format::scientific, 6); };
        -: 1329:
        -: 1330:  template<__char _CharT>
        -: 1331:    struct __formatter_fp
        -: 1332:    {
        -: 1333:      constexpr typename basic_format_parse_context<_CharT>::iterator
function std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&) called 0 returned 0% blocks executed 0%
    #####: 1334:      parse(basic_format_parse_context<_CharT>& __pc)
        -: 1335:      {
    #####: 1336:	_Spec<_CharT> __spec{};
    #####: 1337:	const auto __last = __pc.end();
    %%%%%: 1337-block  0
call    0 never executed
    #####: 1338:	auto __first = __pc.begin();
call    0 never executed
        -: 1339:
function std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)::{lambda()#1}::operator()() const called 0 returned 0% blocks executed 0%
    #####: 1340:	auto __finalize = [this, &__spec] {
    #####: 1341:	  _M_spec = __spec;
        -: 1342:	};
        -: 1343:
function std::__format::__formatter_fp<char>::parse(std::basic_format_parse_context<char>&)::{lambda()#2}::operator()() const called 0 returned 0% blocks executed 0%
    #####: 1344:	auto __finished = [&] {
    #####: 1345:	  if (__first == __last || *__first == '}')
    %%%%%: 1345-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1345-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 1346:	    {
    #####: 1347:	      __finalize();
    %%%%%: 1347-block  0
call    0 never executed
    #####: 1348:	      return true;
        -: 1349:	    }
    #####: 1350:	  return false;
    %%%%%: 1350-block  0
        -: 1351:	};
        -: 1352:
    #####: 1353:	if (__finished())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1354:	  return __first;
    %%%%%: 1354-block  0
        -: 1355:
    #####: 1356:	__first = __spec._M_parse_fill_and_align(__first, __last);
    %%%%%: 1356-block  0
call    0 never executed
    #####: 1357:	if (__finished())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1358:	  return __first;
    %%%%%: 1358-block  0
        -: 1359:
    #####: 1360:	__first = __spec._M_parse_sign(__first, __last);
    %%%%%: 1360-block  0
call    0 never executed
    #####: 1361:	if (__finished())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1362:	  return __first;
    %%%%%: 1362-block  0
        -: 1363:
    #####: 1364:	__first = __spec._M_parse_alternate_form(__first, __last);
    %%%%%: 1364-block  0
call    0 never executed
    #####: 1365:	if (__finished())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1366:	  return __first;
    %%%%%: 1366-block  0
        -: 1367:
    #####: 1368:	__first = __spec._M_parse_zero_fill(__first, __last);
    %%%%%: 1368-block  0
call    0 never executed
    #####: 1369:	if (__finished())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1370:	  return __first;
    %%%%%: 1370-block  0
        -: 1371:
    #####: 1372:	if (__first[0] != '.')
    %%%%%: 1372-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1373:	  {
    #####: 1374:	    __first = __spec._M_parse_width(__first, __last, __pc);
    %%%%%: 1374-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1375:	    if (__finished())
    %%%%%: 1375-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1376:	      return __first;
    %%%%%: 1376-block  0
        -: 1377:	  }
        -: 1378:
    #####: 1379:	__first = __spec._M_parse_precision(__first, __last, __pc);
    %%%%%: 1379-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1380:	if (__finished())
    %%%%%: 1380-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1381:	  return __first;
    %%%%%: 1381-block  0
        -: 1382:
    #####: 1383:	__first = __spec._M_parse_locale(__first, __last);
    %%%%%: 1383-block  0
call    0 never executed
    #####: 1384:	if (__finished())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1385:	  return __first;
    %%%%%: 1385-block  0
        -: 1386:
    #####: 1387:	switch (*__first)
    %%%%%: 1387-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1388:	{
    #####: 1389:	  case 'a':
    #####: 1390:	    __spec._M_type = _Pres_a;
    #####: 1391:	    ++__first;
    #####: 1392:	    break;
    %%%%%: 1392-block  0
    #####: 1393:	  case 'A':
    #####: 1394:	    __spec._M_type = _Pres_A;
    #####: 1395:	    ++__first;
    #####: 1396:	    break;
    %%%%%: 1396-block  0
    #####: 1397:	  case 'e':
    #####: 1398:	    __spec._M_type = _Pres_e;
    #####: 1399:	    ++__first;
    #####: 1400:	    break;
    %%%%%: 1400-block  0
    #####: 1401:	  case 'E':
    #####: 1402:	    __spec._M_type = _Pres_E;
    #####: 1403:	    ++__first;
    #####: 1404:	    break;
    %%%%%: 1404-block  0
    #####: 1405:	  case 'f':
        -: 1406:	  case 'F':
    #####: 1407:	    __spec._M_type = _Pres_f;
    #####: 1408:	    ++__first;
    #####: 1409:	    break;
    %%%%%: 1409-block  0
    #####: 1410:	  case 'g':
    #####: 1411:	    __spec._M_type = _Pres_g;
    #####: 1412:	    ++__first;
    #####: 1413:	    break;
    %%%%%: 1413-block  0
    #####: 1414:	  case 'G':
    #####: 1415:	    __spec._M_type = _Pres_G;
    #####: 1416:	    ++__first;
    #####: 1417:	    break;
    %%%%%: 1417-block  0
        -: 1418:	  }
        -: 1419:
    #####: 1420:	if (__finished())
    %%%%%: 1420-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1421:	  return __first;
    %%%%%: 1421-block  0
        -: 1422:
    #####: 1423:	__format::__failed_to_parse_format_spec();
    %%%%%: 1423-block  0
call    0 never executed
        -: 1424:      }
        -: 1425:
        -: 1426:      template<typename _Fp, typename _Out>
        -: 1427:	typename basic_format_context<_Out, _CharT>::iterator
    #####: 1428:	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
        -: 1429:	{
    #####: 1430:	  std::string __dynbuf;
        -: 1431:	  char __buf[128];
    #####: 1432:	  to_chars_result __res{};
        -: 1433:
    #####: 1434:	  size_t __prec = 6;
    #####: 1435:	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
    #####: 1436:	  if (__use_prec)
    #####: 1437:	    __prec = _M_spec._M_get_precision(__fc);
        -: 1438:
    #####: 1439:	  char* __start = __buf + 1; // reserve space for sign
    #####: 1440:	  char* __end = __buf + sizeof(__buf);
        -: 1441:
    #####: 1442:	  chars_format __fmt{};
    #####: 1443:	  bool __upper = false;
    #####: 1444:	  bool __trailing_zeros = false;
    #####: 1445:	  char __expc = 0;
        -: 1446:
    #####: 1447:	  switch (_M_spec._M_type)
        -: 1448:	  {
    #####: 1449:	    case _Pres_A:
    #####: 1450:	      __upper = true;
        -: 1451:	      [[fallthrough]];
    #####: 1452:	    case _Pres_a:
    #####: 1453:	      __expc = 'p';
    #####: 1454:	      __fmt = chars_format::hex;
    #####: 1455:	      break;
    #####: 1456:	    case _Pres_E:
    #####: 1457:	      __upper = true;
        -: 1458:	      [[fallthrough]];
    #####: 1459:	    case _Pres_e:
    #####: 1460:	      __expc = 'e';
    #####: 1461:	      __use_prec = true;
    #####: 1462:	      __fmt = chars_format::scientific;
    #####: 1463:	      break;
    #####: 1464:	    case _Pres_f:
    #####: 1465:	      __use_prec = true;
    #####: 1466:	      __fmt = chars_format::fixed;
    #####: 1467:	      break;
    #####: 1468:	    case _Pres_G:
    #####: 1469:	      __upper = true;
        -: 1470:	      [[fallthrough]];
    #####: 1471:	    case _Pres_g:
    #####: 1472:	      __trailing_zeros = true;
    #####: 1473:	      __expc = 'e';
    #####: 1474:	      __use_prec = true;
    #####: 1475:	      __fmt = chars_format::general;
    #####: 1476:	      break;
    #####: 1477:	    case _Pres_none:
    #####: 1478:	      if (__use_prec)
    #####: 1479:		__fmt = chars_format::general;
    #####: 1480:	      break;
        -: 1481:	  }
        -: 1482:
        -: 1483:	  // Write value into buffer using std::to_chars.
    #####: 1484:	  auto __to_chars = [&](char* __b, char* __e) {
    #####: 1485:	    if (__use_prec)
    %%%%%: 1485-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1485-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1485-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1485-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 1486:	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
    %%%%%: 1486-block  0
call    0 never executed
    %%%%%: 1486-block  1
call    1 never executed
    %%%%%: 1486-block  2
call    2 never executed
    %%%%%: 1486-block  3
call    3 never executed
    #####: 1487:	    else if (__fmt != chars_format{})
    %%%%%: 1487-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1487-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1487-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1487-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 1488:	      return __format::to_chars(__b, __e, __v, __fmt);
    %%%%%: 1488-block  0
call    0 never executed
    %%%%%: 1488-block  1
call    1 never executed
    %%%%%: 1488-block  2
call    2 never executed
    %%%%%: 1488-block  3
call    3 never executed
        -: 1489:	    else
    #####: 1490:	      return __format::to_chars(__b, __e, __v);
    %%%%%: 1490-block  0
call    0 never executed
    %%%%%: 1490-block  1
call    1 never executed
    %%%%%: 1490-block  2
call    2 never executed
    %%%%%: 1490-block  3
call    3 never executed
        -: 1491:	  };
        -: 1492:
        -: 1493:	  // First try using stack buffer.
    #####: 1494:	  __res = __to_chars(__start, __end);
        -: 1495:
    #####: 1496:	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
        -: 1497:	    {
        -: 1498:	      // If the buffer is too small it's probably because of a large
        -: 1499:	      // precision, or a very large value in fixed format.
    #####: 1500:	      size_t __guess =  __prec + sizeof(__buf);
    #####: 1501:	      if (__fmt == chars_format::fixed)
    #####: 1502:		__guess += max((int)__builtin_log10(__builtin_abs(__v)) / 2, 1);
    #####: 1503:	      __dynbuf.reserve(__guess);
        -: 1504:
        -: 1505:	      do
        -: 1506:		{
    #####: 1507:		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
        -: 1508:		  {
    #####: 1509:		    __res = __to_chars(__p + 1, __p + __n - 1);
    %%%%%: 1509-block  0
call    0 never executed
    %%%%%: 1509-block  1
call    1 never executed
    %%%%%: 1509-block  2
call    2 never executed
    %%%%%: 1509-block  3
call    3 never executed
    #####: 1510:		    return __res.ec == errc{} ? __res.ptr - __p : 0;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1510-block  0
    %%%%%: 1510-block  1
    %%%%%: 1510-block  2
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1510-block  3
    %%%%%: 1510-block  4
    %%%%%: 1510-block  5
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1510-block  6
    %%%%%: 1510-block  7
    %%%%%: 1510-block  8
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 1510-block  9
    %%%%%: 1510-block 10
    %%%%%: 1510-block 11
        -: 1511:		  };
        -: 1512:
    #####: 1513:		  _S_resize_and_overwrite(__dynbuf, __dynbuf.capacity() * 2,
        -: 1514:					  __overwrite);
    #####: 1515:		  __start = __dynbuf.data() + 1; // reserve space for sign
    #####: 1516:		  __end = __dynbuf.data() + __dynbuf.size();
        -: 1517:		}
    #####: 1518:	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
        -: 1519:	  }
        -: 1520:
        -: 1521:	  // Use uppercase for 'A', 'E', and 'G' formats.
    #####: 1522:	  if (__upper)
        -: 1523:	    {
    #####: 1524:	      for (char* __p = __start; __p != __res.ptr; ++__p)
    #####: 1525:		*__p = std::toupper(*__p);
    #####: 1526:	      __expc = std::toupper(__expc);
        -: 1527:	    }
        -: 1528:
        -: 1529:	  // Add sign for non-negative values.
    #####: 1530:	  if (!__builtin_signbit(__v))
        -: 1531:	    {
    #####: 1532:	      if (_M_spec._M_sign == _Sign_plus)
    #####: 1533:		*--__start = '+';
    #####: 1534:	      else if (_M_spec._M_sign == _Sign_space)
    #####: 1535:		*--__start = ' ';
        -: 1536:	    }
        -: 1537:
    #####: 1538:	  string_view __narrow_str(__start, __res.ptr - __start);
        -: 1539:
        -: 1540:	  // Use alternate form.
    #####: 1541:	  if (_M_spec._M_alt && __builtin_isfinite(__v))
        -: 1542:	    {
    #####: 1543:	      string_view __s = __narrow_str;
    #####: 1544:	      size_t __z = 0;
        -: 1545:	      size_t __p;
    #####: 1546:	      size_t __d = __s.find('.');
        -: 1547:	      size_t __sigfigs;
    #####: 1548:	      if (__d != __s.npos)
        -: 1549:		{
    #####: 1550:		  __p = __s.find(__expc, __d + 1);
    #####: 1551:		  if (__p == __s.npos)
    #####: 1552:		    __p = __s.size();
    #####: 1553:		  __sigfigs = __p - 1;
        -: 1554:		}
        -: 1555:	      else
        -: 1556:		{
    #####: 1557:		  __p = __s.find(__expc);
    #####: 1558:		  if (__p == __s.npos)
    #####: 1559:		    __p = __s.size();
    #####: 1560:		  __d = __p;
    #####: 1561:		  __sigfigs = __d;
        -: 1562:		}
        -: 1563:
    #####: 1564:	      if (__trailing_zeros)
        -: 1565:		{
    #####: 1566:		  if (!__format::__is_xdigit(__s[0]))
    #####: 1567:		    --__sigfigs;
    #####: 1568:		  __z = __prec - __sigfigs;
        -: 1569:		}
        -: 1570:
    #####: 1571:	      if (size_t __extras = int(__d == __p) + __z)
        -: 1572:		{
    #####: 1573:		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
        -: 1574:		    {
        -: 1575:		      // Move exponent to make space for extra chars.
    #####: 1576:		      __builtin_memmove(__start + __p + __extras,
    #####: 1577:					__start + __p,
    #####: 1578:					__s.size() - __p);
        -: 1579:
    #####: 1580:		      if (__d == __p)
    #####: 1581:			__start[__p++] = '.';
    #####: 1582:		      __builtin_memset(__start + __p, '0', __z);
    #####: 1583:		      __narrow_str = {__s.data(), __s.size() + __extras};
        -: 1584:		    }
        -: 1585:		  else
        -: 1586:		    {
    #####: 1587:		      __dynbuf.reserve(__s.size() + __extras);
    #####: 1588:		      if (__dynbuf.empty())
        -: 1589:			{
    #####: 1590:			  __dynbuf = __s.substr(0, __p);
    #####: 1591:			  if (__d == __p)
    #####: 1592:			    __dynbuf += '.';
    #####: 1593:			  if (__z)
    #####: 1594:			    __dynbuf.append(__z, '0');
        -: 1595:			}
        -: 1596:		      else
        -: 1597:			{
    #####: 1598:			  __dynbuf.insert(__p, __extras, '0');
    #####: 1599:			  if (__d == __p)
    #####: 1600:			    __dynbuf[__p] = '.';
        -: 1601:			}
    #####: 1602:		      __narrow_str = __dynbuf;
        -: 1603:		    }
        -: 1604:		}
        -: 1605:	    }
        -: 1606:
        -: 1607:	  // TODO move everything below to a new member function that
        -: 1608:	  // doesn't depend on _Fp type.
        -: 1609:
        -: 1610:
        -: 1611:	  _Optional_locale __loc;
    #####: 1612:	  basic_string_view<_CharT> __str;
    #####: 1613:	  basic_string<_CharT> __wstr;
        -: 1614:	  if constexpr (is_same_v<_CharT, char>)
    #####: 1615:	    __str = __narrow_str;
        -: 1616:	  else
        -: 1617:	    {
        -: 1618:	      __loc = __fc.locale();
        -: 1619:	      auto& __ct = use_facet<ctype<_CharT>>(__loc.value());
        -: 1620:	      const char* __data = __narrow_str.data();
        -: 1621:	      auto __overwrite = [&__data, &__ct](_CharT* __p, size_t __n)
        -: 1622:	      {
        -: 1623:		__ct.widen(__data, __data + __n, __p);
        -: 1624:		return __n;
        -: 1625:	      };
        -: 1626:	      _S_resize_and_overwrite(__wstr, __narrow_str.size(), __overwrite);
        -: 1627:	      __str = __wstr;
        -: 1628:	    }
        -: 1629:
    #####: 1630:	  if (_M_spec._M_localized)
        -: 1631:	    {
        -: 1632:	      if constexpr (is_same_v<char, _CharT>)
    #####: 1633:		__wstr = _M_localize(__str, __expc, __fc.locale());
        -: 1634:	      else
        -: 1635:		__wstr = _M_localize(__str, __expc, __loc.value());
    #####: 1636:	      __str = __wstr;
        -: 1637:	    }
        -: 1638:
    #####: 1639:	  size_t __width = _M_spec._M_get_width(__fc);
        -: 1640:
    #####: 1641:	  if (__width <= __str.size())
    #####: 1642:	    return __format::__write(__fc.out(), __str);
        -: 1643:
    #####: 1644:	  _CharT __fill_char = _M_spec._M_fill;
    #####: 1645:	  _Align __align = _M_spec._M_align;
        -: 1646:
    #####: 1647:	  size_t __nfill = __width - __str.size();
    #####: 1648:	  auto __out = __fc.out();
    #####: 1649:	  if (__align == _Align_default)
        -: 1650:	    {
    #####: 1651:	      __align = _Align_right;
    #####: 1652:	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
        -: 1653:		{
    #####: 1654:		  __fill_char = _CharT('0');
        -: 1655:		  // Write sign before zero filling.
    #####: 1656:		  if (!__format::__is_xdigit(__narrow_str[0]))
        -: 1657:		    {
    #####: 1658:		      *__out++ = __str[0];
    #####: 1659:		      __str.remove_prefix(1);
        -: 1660:		    }
        -: 1661:		}
        -: 1662:	      else
    #####: 1663:		__fill_char = _CharT(' ');
        -: 1664:	    }
    #####: 1665:	  return __format::__write_padded(std::move(__out), __str,
    #####: 1666:					  __align, __nfill, __fill_char);
    #####: 1667:	}
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1428:	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
        -: 1429:	{
    #####: 1430:	  std::string __dynbuf;
    %%%%%: 1430-block  0
call    0 never executed
        -: 1431:	  char __buf[128];
    #####: 1432:	  to_chars_result __res{};
        -: 1433:
    #####: 1434:	  size_t __prec = 6;
    #####: 1435:	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
    #####: 1436:	  if (__use_prec)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1437:	    __prec = _M_spec._M_get_precision(__fc);
    %%%%%: 1437-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1437-block  1
        -: 1438:
    #####: 1439:	  char* __start = __buf + 1; // reserve space for sign
    #####: 1440:	  char* __end = __buf + sizeof(__buf);
        -: 1441:
    #####: 1442:	  chars_format __fmt{};
    #####: 1443:	  bool __upper = false;
    #####: 1444:	  bool __trailing_zeros = false;
    #####: 1445:	  char __expc = 0;
        -: 1446:
    #####: 1447:	  switch (_M_spec._M_type)
    %%%%%: 1447-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 1448:	  {
    #####: 1449:	    case _Pres_A:
    #####: 1450:	      __upper = true;
    %%%%%: 1450-block  0
        -: 1451:	      [[fallthrough]];
    #####: 1452:	    case _Pres_a:
    #####: 1453:	      __expc = 'p';
    #####: 1454:	      __fmt = chars_format::hex;
    #####: 1455:	      break;
    %%%%%: 1455-block  0
    #####: 1456:	    case _Pres_E:
    #####: 1457:	      __upper = true;
    %%%%%: 1457-block  0
        -: 1458:	      [[fallthrough]];
    #####: 1459:	    case _Pres_e:
    #####: 1460:	      __expc = 'e';
    #####: 1461:	      __use_prec = true;
    #####: 1462:	      __fmt = chars_format::scientific;
    #####: 1463:	      break;
    %%%%%: 1463-block  0
    #####: 1464:	    case _Pres_f:
    #####: 1465:	      __use_prec = true;
    #####: 1466:	      __fmt = chars_format::fixed;
    #####: 1467:	      break;
    %%%%%: 1467-block  0
    #####: 1468:	    case _Pres_G:
    #####: 1469:	      __upper = true;
    %%%%%: 1469-block  0
        -: 1470:	      [[fallthrough]];
    #####: 1471:	    case _Pres_g:
    #####: 1472:	      __trailing_zeros = true;
    #####: 1473:	      __expc = 'e';
    #####: 1474:	      __use_prec = true;
    #####: 1475:	      __fmt = chars_format::general;
    #####: 1476:	      break;
    %%%%%: 1476-block  0
    #####: 1477:	    case _Pres_none:
    #####: 1478:	      if (__use_prec)
    %%%%%: 1478-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1479:		__fmt = chars_format::general;
    %%%%%: 1479-block  0
    #####: 1480:	      break;
    %%%%%: 1480-block  0
        -: 1481:	  }
        -: 1482:
        -: 1483:	  // Write value into buffer using std::to_chars.
    #####: 1484:	  auto __to_chars = [&](char* __b, char* __e) {
        -: 1485:	    if (__use_prec)
        -: 1486:	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
        -: 1487:	    else if (__fmt != chars_format{})
        -: 1488:	      return __format::to_chars(__b, __e, __v, __fmt);
        -: 1489:	    else
        -: 1490:	      return __format::to_chars(__b, __e, __v);
        -: 1491:	  };
        -: 1492:
        -: 1493:	  // First try using stack buffer.
    #####: 1494:	  __res = __to_chars(__start, __end);
    %%%%%: 1494-block  0
call    0 never executed
        -: 1495:
    #####: 1496:	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1497:	    {
        -: 1498:	      // If the buffer is too small it's probably because of a large
        -: 1499:	      // precision, or a very large value in fixed format.
    #####: 1500:	      size_t __guess =  __prec + sizeof(__buf);
    #####: 1501:	      if (__fmt == chars_format::fixed)
    %%%%%: 1501-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1502:		__guess += max((int)__builtin_log10(__builtin_abs(__v)) / 2, 1);
    %%%%%: 1502-block  0
call    0 never executed
    #####: 1503:	      __dynbuf.reserve(__guess);
    %%%%%: 1503-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1504:
        -: 1505:	      do
        -: 1506:		{
    #####: 1507:		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
        -: 1508:		  {
        -: 1509:		    __res = __to_chars(__p + 1, __p + __n - 1);
        -: 1510:		    return __res.ec == errc{} ? __res.ptr - __p : 0;
        -: 1511:		  };
        -: 1512:
    #####: 1513:		  _S_resize_and_overwrite(__dynbuf, __dynbuf.capacity() * 2,
    %%%%%: 1513-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 1514:					  __overwrite);
    #####: 1515:		  __start = __dynbuf.data() + 1; // reserve space for sign
    %%%%%: 1515-block  0
call    0 never executed
    #####: 1516:		  __end = __dynbuf.data() + __dynbuf.size();
call    0 never executed
call    1 never executed
        -: 1517:		}
    #####: 1518:	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 1519:	  }
        -: 1520:
        -: 1521:	  // Use uppercase for 'A', 'E', and 'G' formats.
    #####: 1522:	  if (__upper)
    %%%%%: 1522-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1523:	    {
    #####: 1524:	      for (char* __p = __start; __p != __res.ptr; ++__p)
    %%%%%: 1524-block  0
    %%%%%: 1524-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1525:		*__p = std::toupper(*__p);
    %%%%%: 1525-block  0
    #####: 1526:	      __expc = std::toupper(__expc);
    %%%%%: 1526-block  0
        -: 1527:	    }
        -: 1528:
        -: 1529:	  // Add sign for non-negative values.
    #####: 1530:	  if (!__builtin_signbit(__v))
    %%%%%: 1530-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1531:	    {
    #####: 1532:	      if (_M_spec._M_sign == _Sign_plus)
    %%%%%: 1532-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1533:		*--__start = '+';
    %%%%%: 1533-block  0
    #####: 1534:	      else if (_M_spec._M_sign == _Sign_space)
    %%%%%: 1534-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1535:		*--__start = ' ';
    %%%%%: 1535-block  0
        -: 1536:	    }
        -: 1537:
    #####: 1538:	  string_view __narrow_str(__start, __res.ptr - __start);
    %%%%%: 1538-block  0
call    0 never executed
        -: 1539:
        -: 1540:	  // Use alternate form.
    #####: 1541:	  if (_M_spec._M_alt && __builtin_isfinite(__v))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1541-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 1542:	    {
    #####: 1543:	      string_view __s = __narrow_str;
    #####: 1544:	      size_t __z = 0;
        -: 1545:	      size_t __p;
    #####: 1546:	      size_t __d = __s.find('.');
    %%%%%: 1546-block  0
call    0 never executed
        -: 1547:	      size_t __sigfigs;
    #####: 1548:	      if (__d != __s.npos)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1549:		{
    #####: 1550:		  __p = __s.find(__expc, __d + 1);
    %%%%%: 1550-block  0
call    0 never executed
    #####: 1551:		  if (__p == __s.npos)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1552:		    __p = __s.size();
    %%%%%: 1552-block  0
call    0 never executed
    #####: 1553:		  __sigfigs = __p - 1;
    %%%%%: 1553-block  0
        -: 1554:		}
        -: 1555:	      else
        -: 1556:		{
    #####: 1557:		  __p = __s.find(__expc);
    %%%%%: 1557-block  0
call    0 never executed
    #####: 1558:		  if (__p == __s.npos)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1559:		    __p = __s.size();
    %%%%%: 1559-block  0
call    0 never executed
    #####: 1560:		  __d = __p;
    #####: 1561:		  __sigfigs = __d;
    %%%%%: 1561-block  0
        -: 1562:		}
        -: 1563:
    #####: 1564:	      if (__trailing_zeros)
    %%%%%: 1564-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1565:		{
    #####: 1566:		  if (!__format::__is_xdigit(__s[0]))
    %%%%%: 1566-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1566-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 1567:		    --__sigfigs;
    %%%%%: 1567-block  0
    #####: 1568:		  __z = __prec - __sigfigs;
    %%%%%: 1568-block  0
        -: 1569:		}
        -: 1570:
    #####: 1571:	      if (size_t __extras = int(__d == __p) + __z)
    %%%%%: 1571-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1572:		{
    #####: 1573:		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
    %%%%%: 1573-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1573-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1573-block  2
    %%%%%: 1573-block  3
    %%%%%: 1573-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1574:		    {
        -: 1575:		      // Move exponent to make space for extra chars.
    #####: 1576:		      __builtin_memmove(__start + __p + __extras,
    #####: 1577:					__start + __p,
    #####: 1578:					__s.size() - __p);
    %%%%%: 1578-block  0
call    0 never executed
        -: 1579:
    #####: 1580:		      if (__d == __p)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1581:			__start[__p++] = '.';
    %%%%%: 1581-block  0
    #####: 1582:		      __builtin_memset(__start + __p, '0', __z);
    #####: 1583:		      __narrow_str = {__s.data(), __s.size() + __extras};
    %%%%%: 1583-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1584:		    }
        -: 1585:		  else
        -: 1586:		    {
    #####: 1587:		      __dynbuf.reserve(__s.size() + __extras);
    %%%%%: 1587-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 1588:		      if (__dynbuf.empty())
    %%%%%: 1588-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1589:			{
    #####: 1590:			  __dynbuf = __s.substr(0, __p);
    %%%%%: 1590-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1590-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 1590-block  2
    #####: 1591:			  if (__d == __p)
    %%%%%: 1591-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1592:			    __dynbuf += '.';
    %%%%%: 1592-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1593:			  if (__z)
    %%%%%: 1593-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1594:			    __dynbuf.append(__z, '0');
    %%%%%: 1594-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1595:			}
        -: 1596:		      else
        -: 1597:			{
    #####: 1598:			  __dynbuf.insert(__p, __extras, '0');
    %%%%%: 1598-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1599:			  if (__d == __p)
    %%%%%: 1599-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1600:			    __dynbuf[__p] = '.';
    %%%%%: 1600-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1600-block  1
        -: 1601:			}
    #####: 1602:		      __narrow_str = __dynbuf;
    %%%%%: 1602-block  0
call    0 never executed
        -: 1603:		    }
        -: 1604:		}
        -: 1605:	    }
        -: 1606:
        -: 1607:	  // TODO move everything below to a new member function that
        -: 1608:	  // doesn't depend on _Fp type.
        -: 1609:
        -: 1610:
        -: 1611:	  _Optional_locale __loc;
    #####: 1612:	  basic_string_view<_CharT> __str;
    #####: 1613:	  basic_string<_CharT> __wstr;
    %%%%%: 1613-block  0
call    0 never executed
        -: 1614:	  if constexpr (is_same_v<_CharT, char>)
    #####: 1615:	    __str = __narrow_str;
        -: 1616:	  else
        -: 1617:	    {
        -: 1618:	      __loc = __fc.locale();
        -: 1619:	      auto& __ct = use_facet<ctype<_CharT>>(__loc.value());
        -: 1620:	      const char* __data = __narrow_str.data();
        -: 1621:	      auto __overwrite = [&__data, &__ct](_CharT* __p, size_t __n)
        -: 1622:	      {
        -: 1623:		__ct.widen(__data, __data + __n, __p);
        -: 1624:		return __n;
        -: 1625:	      };
        -: 1626:	      _S_resize_and_overwrite(__wstr, __narrow_str.size(), __overwrite);
        -: 1627:	      __str = __wstr;
        -: 1628:	    }
        -: 1629:
    #####: 1630:	  if (_M_spec._M_localized)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1631:	    {
        -: 1632:	      if constexpr (is_same_v<char, _CharT>)
    #####: 1633:		__wstr = _M_localize(__str, __expc, __fc.locale());
    %%%%%: 1633-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1633-block  1
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$: 1633-block  2
call    7 never executed
    $$$$$: 1633-block  3
    $$$$$: 1633-block  4
        -: 1634:	      else
        -: 1635:		__wstr = _M_localize(__str, __expc, __loc.value());
    #####: 1636:	      __str = __wstr;
call    0 never executed
        -: 1637:	    }
        -: 1638:
    #####: 1639:	  size_t __width = _M_spec._M_get_width(__fc);
    %%%%%: 1639-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1640:
    #####: 1641:	  if (__width <= __str.size())
    %%%%%: 1641-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1642:	    return __format::__write(__fc.out(), __str);
    %%%%%: 1642-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1642-block  1
        -: 1643:
    #####: 1644:	  _CharT __fill_char = _M_spec._M_fill;
    #####: 1645:	  _Align __align = _M_spec._M_align;
        -: 1646:
    #####: 1647:	  size_t __nfill = __width - __str.size();
    %%%%%: 1647-block  0
call    0 never executed
    #####: 1648:	  auto __out = __fc.out();
call    0 never executed
    #####: 1649:	  if (__align == _Align_default)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1650:	    {
    #####: 1651:	      __align = _Align_right;
    #####: 1652:	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
    %%%%%: 1652-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1652-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 1653:		{
    #####: 1654:		  __fill_char = _CharT('0');
        -: 1655:		  // Write sign before zero filling.
    #####: 1656:		  if (!__format::__is_xdigit(__narrow_str[0]))
    %%%%%: 1656-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1656-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1656-block  2
        -: 1657:		    {
    #####: 1658:		      *__out++ = __str[0];
    %%%%%: 1658-block  0
call    0 never executed
    $$$$$: 1658-block  1
    #####: 1659:		      __str.remove_prefix(1);
    %%%%%: 1659-block  0
call    0 never executed
        -: 1660:		    }
        -: 1661:		}
        -: 1662:	      else
    #####: 1663:		__fill_char = _CharT(' ');
    %%%%%: 1663-block  0
        -: 1664:	    }
    #####: 1665:	  return __format::__write_padded(std::move(__out), __str,
    %%%%%: 1665-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 1666:					  __align, __nfill, __fill_char);
    %%%%%: 1666-block  0
    #####: 1667:	}
    %%%%%: 1667-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 1667-block  1
call    3 never executed
    $$$$$: 1667-block  2
call    4 never executed
    $$$$$: 1667-block  3
call    5 never executed
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1428:	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
        -: 1429:	{
    #####: 1430:	  std::string __dynbuf;
    %%%%%: 1430-block  0
call    0 never executed
        -: 1431:	  char __buf[128];
    #####: 1432:	  to_chars_result __res{};
        -: 1433:
    #####: 1434:	  size_t __prec = 6;
    #####: 1435:	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
    #####: 1436:	  if (__use_prec)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1437:	    __prec = _M_spec._M_get_precision(__fc);
    %%%%%: 1437-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1437-block  1
        -: 1438:
    #####: 1439:	  char* __start = __buf + 1; // reserve space for sign
    #####: 1440:	  char* __end = __buf + sizeof(__buf);
        -: 1441:
    #####: 1442:	  chars_format __fmt{};
    #####: 1443:	  bool __upper = false;
    #####: 1444:	  bool __trailing_zeros = false;
    #####: 1445:	  char __expc = 0;
        -: 1446:
    #####: 1447:	  switch (_M_spec._M_type)
    %%%%%: 1447-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 1448:	  {
    #####: 1449:	    case _Pres_A:
    #####: 1450:	      __upper = true;
    %%%%%: 1450-block  0
        -: 1451:	      [[fallthrough]];
    #####: 1452:	    case _Pres_a:
    #####: 1453:	      __expc = 'p';
    #####: 1454:	      __fmt = chars_format::hex;
    #####: 1455:	      break;
    %%%%%: 1455-block  0
    #####: 1456:	    case _Pres_E:
    #####: 1457:	      __upper = true;
    %%%%%: 1457-block  0
        -: 1458:	      [[fallthrough]];
    #####: 1459:	    case _Pres_e:
    #####: 1460:	      __expc = 'e';
    #####: 1461:	      __use_prec = true;
    #####: 1462:	      __fmt = chars_format::scientific;
    #####: 1463:	      break;
    %%%%%: 1463-block  0
    #####: 1464:	    case _Pres_f:
    #####: 1465:	      __use_prec = true;
    #####: 1466:	      __fmt = chars_format::fixed;
    #####: 1467:	      break;
    %%%%%: 1467-block  0
    #####: 1468:	    case _Pres_G:
    #####: 1469:	      __upper = true;
    %%%%%: 1469-block  0
        -: 1470:	      [[fallthrough]];
    #####: 1471:	    case _Pres_g:
    #####: 1472:	      __trailing_zeros = true;
    #####: 1473:	      __expc = 'e';
    #####: 1474:	      __use_prec = true;
    #####: 1475:	      __fmt = chars_format::general;
    #####: 1476:	      break;
    %%%%%: 1476-block  0
    #####: 1477:	    case _Pres_none:
    #####: 1478:	      if (__use_prec)
    %%%%%: 1478-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1479:		__fmt = chars_format::general;
    %%%%%: 1479-block  0
    #####: 1480:	      break;
    %%%%%: 1480-block  0
        -: 1481:	  }
        -: 1482:
        -: 1483:	  // Write value into buffer using std::to_chars.
    #####: 1484:	  auto __to_chars = [&](char* __b, char* __e) {
        -: 1485:	    if (__use_prec)
        -: 1486:	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
        -: 1487:	    else if (__fmt != chars_format{})
        -: 1488:	      return __format::to_chars(__b, __e, __v, __fmt);
        -: 1489:	    else
        -: 1490:	      return __format::to_chars(__b, __e, __v);
        -: 1491:	  };
        -: 1492:
        -: 1493:	  // First try using stack buffer.
    #####: 1494:	  __res = __to_chars(__start, __end);
    %%%%%: 1494-block  0
call    0 never executed
        -: 1495:
    #####: 1496:	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1497:	    {
        -: 1498:	      // If the buffer is too small it's probably because of a large
        -: 1499:	      // precision, or a very large value in fixed format.
    #####: 1500:	      size_t __guess =  __prec + sizeof(__buf);
    #####: 1501:	      if (__fmt == chars_format::fixed)
    %%%%%: 1501-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1502:		__guess += max((int)__builtin_log10(__builtin_abs(__v)) / 2, 1);
    %%%%%: 1502-block  0
call    0 never executed
    #####: 1503:	      __dynbuf.reserve(__guess);
    %%%%%: 1503-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1504:
        -: 1505:	      do
        -: 1506:		{
    #####: 1507:		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
        -: 1508:		  {
        -: 1509:		    __res = __to_chars(__p + 1, __p + __n - 1);
        -: 1510:		    return __res.ec == errc{} ? __res.ptr - __p : 0;
        -: 1511:		  };
        -: 1512:
    #####: 1513:		  _S_resize_and_overwrite(__dynbuf, __dynbuf.capacity() * 2,
    %%%%%: 1513-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 1514:					  __overwrite);
    #####: 1515:		  __start = __dynbuf.data() + 1; // reserve space for sign
    %%%%%: 1515-block  0
call    0 never executed
    #####: 1516:		  __end = __dynbuf.data() + __dynbuf.size();
call    0 never executed
call    1 never executed
        -: 1517:		}
    #####: 1518:	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 1519:	  }
        -: 1520:
        -: 1521:	  // Use uppercase for 'A', 'E', and 'G' formats.
    #####: 1522:	  if (__upper)
    %%%%%: 1522-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1523:	    {
    #####: 1524:	      for (char* __p = __start; __p != __res.ptr; ++__p)
    %%%%%: 1524-block  0
    %%%%%: 1524-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1525:		*__p = std::toupper(*__p);
    %%%%%: 1525-block  0
    #####: 1526:	      __expc = std::toupper(__expc);
    %%%%%: 1526-block  0
        -: 1527:	    }
        -: 1528:
        -: 1529:	  // Add sign for non-negative values.
    #####: 1530:	  if (!__builtin_signbit(__v))
    %%%%%: 1530-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1531:	    {
    #####: 1532:	      if (_M_spec._M_sign == _Sign_plus)
    %%%%%: 1532-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1533:		*--__start = '+';
    %%%%%: 1533-block  0
    #####: 1534:	      else if (_M_spec._M_sign == _Sign_space)
    %%%%%: 1534-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1535:		*--__start = ' ';
    %%%%%: 1535-block  0
        -: 1536:	    }
        -: 1537:
    #####: 1538:	  string_view __narrow_str(__start, __res.ptr - __start);
    %%%%%: 1538-block  0
call    0 never executed
        -: 1539:
        -: 1540:	  // Use alternate form.
    #####: 1541:	  if (_M_spec._M_alt && __builtin_isfinite(__v))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1541-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 1542:	    {
    #####: 1543:	      string_view __s = __narrow_str;
    #####: 1544:	      size_t __z = 0;
        -: 1545:	      size_t __p;
    #####: 1546:	      size_t __d = __s.find('.');
    %%%%%: 1546-block  0
call    0 never executed
        -: 1547:	      size_t __sigfigs;
    #####: 1548:	      if (__d != __s.npos)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1549:		{
    #####: 1550:		  __p = __s.find(__expc, __d + 1);
    %%%%%: 1550-block  0
call    0 never executed
    #####: 1551:		  if (__p == __s.npos)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1552:		    __p = __s.size();
    %%%%%: 1552-block  0
call    0 never executed
    #####: 1553:		  __sigfigs = __p - 1;
    %%%%%: 1553-block  0
        -: 1554:		}
        -: 1555:	      else
        -: 1556:		{
    #####: 1557:		  __p = __s.find(__expc);
    %%%%%: 1557-block  0
call    0 never executed
    #####: 1558:		  if (__p == __s.npos)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1559:		    __p = __s.size();
    %%%%%: 1559-block  0
call    0 never executed
    #####: 1560:		  __d = __p;
    #####: 1561:		  __sigfigs = __d;
    %%%%%: 1561-block  0
        -: 1562:		}
        -: 1563:
    #####: 1564:	      if (__trailing_zeros)
    %%%%%: 1564-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1565:		{
    #####: 1566:		  if (!__format::__is_xdigit(__s[0]))
    %%%%%: 1566-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1566-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 1567:		    --__sigfigs;
    %%%%%: 1567-block  0
    #####: 1568:		  __z = __prec - __sigfigs;
    %%%%%: 1568-block  0
        -: 1569:		}
        -: 1570:
    #####: 1571:	      if (size_t __extras = int(__d == __p) + __z)
    %%%%%: 1571-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1572:		{
    #####: 1573:		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
    %%%%%: 1573-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1573-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1573-block  2
    %%%%%: 1573-block  3
    %%%%%: 1573-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1574:		    {
        -: 1575:		      // Move exponent to make space for extra chars.
    #####: 1576:		      __builtin_memmove(__start + __p + __extras,
    #####: 1577:					__start + __p,
    #####: 1578:					__s.size() - __p);
    %%%%%: 1578-block  0
call    0 never executed
        -: 1579:
    #####: 1580:		      if (__d == __p)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1581:			__start[__p++] = '.';
    %%%%%: 1581-block  0
    #####: 1582:		      __builtin_memset(__start + __p, '0', __z);
    #####: 1583:		      __narrow_str = {__s.data(), __s.size() + __extras};
    %%%%%: 1583-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1584:		    }
        -: 1585:		  else
        -: 1586:		    {
    #####: 1587:		      __dynbuf.reserve(__s.size() + __extras);
    %%%%%: 1587-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 1588:		      if (__dynbuf.empty())
    %%%%%: 1588-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1589:			{
    #####: 1590:			  __dynbuf = __s.substr(0, __p);
    %%%%%: 1590-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1590-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 1590-block  2
    #####: 1591:			  if (__d == __p)
    %%%%%: 1591-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1592:			    __dynbuf += '.';
    %%%%%: 1592-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1593:			  if (__z)
    %%%%%: 1593-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1594:			    __dynbuf.append(__z, '0');
    %%%%%: 1594-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1595:			}
        -: 1596:		      else
        -: 1597:			{
    #####: 1598:			  __dynbuf.insert(__p, __extras, '0');
    %%%%%: 1598-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1599:			  if (__d == __p)
    %%%%%: 1599-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1600:			    __dynbuf[__p] = '.';
    %%%%%: 1600-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1600-block  1
        -: 1601:			}
    #####: 1602:		      __narrow_str = __dynbuf;
    %%%%%: 1602-block  0
call    0 never executed
        -: 1603:		    }
        -: 1604:		}
        -: 1605:	    }
        -: 1606:
        -: 1607:	  // TODO move everything below to a new member function that
        -: 1608:	  // doesn't depend on _Fp type.
        -: 1609:
        -: 1610:
        -: 1611:	  _Optional_locale __loc;
    #####: 1612:	  basic_string_view<_CharT> __str;
    #####: 1613:	  basic_string<_CharT> __wstr;
    %%%%%: 1613-block  0
call    0 never executed
        -: 1614:	  if constexpr (is_same_v<_CharT, char>)
    #####: 1615:	    __str = __narrow_str;
        -: 1616:	  else
        -: 1617:	    {
        -: 1618:	      __loc = __fc.locale();
        -: 1619:	      auto& __ct = use_facet<ctype<_CharT>>(__loc.value());
        -: 1620:	      const char* __data = __narrow_str.data();
        -: 1621:	      auto __overwrite = [&__data, &__ct](_CharT* __p, size_t __n)
        -: 1622:	      {
        -: 1623:		__ct.widen(__data, __data + __n, __p);
        -: 1624:		return __n;
        -: 1625:	      };
        -: 1626:	      _S_resize_and_overwrite(__wstr, __narrow_str.size(), __overwrite);
        -: 1627:	      __str = __wstr;
        -: 1628:	    }
        -: 1629:
    #####: 1630:	  if (_M_spec._M_localized)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1631:	    {
        -: 1632:	      if constexpr (is_same_v<char, _CharT>)
    #####: 1633:		__wstr = _M_localize(__str, __expc, __fc.locale());
    %%%%%: 1633-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1633-block  1
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$: 1633-block  2
call    7 never executed
    $$$$$: 1633-block  3
    $$$$$: 1633-block  4
        -: 1634:	      else
        -: 1635:		__wstr = _M_localize(__str, __expc, __loc.value());
    #####: 1636:	      __str = __wstr;
call    0 never executed
        -: 1637:	    }
        -: 1638:
    #####: 1639:	  size_t __width = _M_spec._M_get_width(__fc);
    %%%%%: 1639-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1640:
    #####: 1641:	  if (__width <= __str.size())
    %%%%%: 1641-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1642:	    return __format::__write(__fc.out(), __str);
    %%%%%: 1642-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1642-block  1
        -: 1643:
    #####: 1644:	  _CharT __fill_char = _M_spec._M_fill;
    #####: 1645:	  _Align __align = _M_spec._M_align;
        -: 1646:
    #####: 1647:	  size_t __nfill = __width - __str.size();
    %%%%%: 1647-block  0
call    0 never executed
    #####: 1648:	  auto __out = __fc.out();
call    0 never executed
    #####: 1649:	  if (__align == _Align_default)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1650:	    {
    #####: 1651:	      __align = _Align_right;
    #####: 1652:	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
    %%%%%: 1652-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1652-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 1653:		{
    #####: 1654:		  __fill_char = _CharT('0');
        -: 1655:		  // Write sign before zero filling.
    #####: 1656:		  if (!__format::__is_xdigit(__narrow_str[0]))
    %%%%%: 1656-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1656-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1656-block  2
        -: 1657:		    {
    #####: 1658:		      *__out++ = __str[0];
    %%%%%: 1658-block  0
call    0 never executed
    $$$$$: 1658-block  1
    #####: 1659:		      __str.remove_prefix(1);
    %%%%%: 1659-block  0
call    0 never executed
        -: 1660:		    }
        -: 1661:		}
        -: 1662:	      else
    #####: 1663:		__fill_char = _CharT(' ');
    %%%%%: 1663-block  0
        -: 1664:	    }
    #####: 1665:	  return __format::__write_padded(std::move(__out), __str,
    %%%%%: 1665-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 1666:					  __align, __nfill, __fill_char);
    %%%%%: 1666-block  0
    #####: 1667:	}
    %%%%%: 1667-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 1667-block  1
call    3 never executed
    $$$$$: 1667-block  2
call    4 never executed
    $$$$$: 1667-block  3
call    5 never executed
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1428:	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
        -: 1429:	{
    #####: 1430:	  std::string __dynbuf;
    %%%%%: 1430-block  0
call    0 never executed
        -: 1431:	  char __buf[128];
    #####: 1432:	  to_chars_result __res{};
        -: 1433:
    #####: 1434:	  size_t __prec = 6;
    #####: 1435:	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
    #####: 1436:	  if (__use_prec)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1437:	    __prec = _M_spec._M_get_precision(__fc);
    %%%%%: 1437-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1437-block  1
        -: 1438:
    #####: 1439:	  char* __start = __buf + 1; // reserve space for sign
    #####: 1440:	  char* __end = __buf + sizeof(__buf);
        -: 1441:
    #####: 1442:	  chars_format __fmt{};
    #####: 1443:	  bool __upper = false;
    #####: 1444:	  bool __trailing_zeros = false;
    #####: 1445:	  char __expc = 0;
        -: 1446:
    #####: 1447:	  switch (_M_spec._M_type)
    %%%%%: 1447-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 1448:	  {
    #####: 1449:	    case _Pres_A:
    #####: 1450:	      __upper = true;
    %%%%%: 1450-block  0
        -: 1451:	      [[fallthrough]];
    #####: 1452:	    case _Pres_a:
    #####: 1453:	      __expc = 'p';
    #####: 1454:	      __fmt = chars_format::hex;
    #####: 1455:	      break;
    %%%%%: 1455-block  0
    #####: 1456:	    case _Pres_E:
    #####: 1457:	      __upper = true;
    %%%%%: 1457-block  0
        -: 1458:	      [[fallthrough]];
    #####: 1459:	    case _Pres_e:
    #####: 1460:	      __expc = 'e';
    #####: 1461:	      __use_prec = true;
    #####: 1462:	      __fmt = chars_format::scientific;
    #####: 1463:	      break;
    %%%%%: 1463-block  0
    #####: 1464:	    case _Pres_f:
    #####: 1465:	      __use_prec = true;
    #####: 1466:	      __fmt = chars_format::fixed;
    #####: 1467:	      break;
    %%%%%: 1467-block  0
    #####: 1468:	    case _Pres_G:
    #####: 1469:	      __upper = true;
    %%%%%: 1469-block  0
        -: 1470:	      [[fallthrough]];
    #####: 1471:	    case _Pres_g:
    #####: 1472:	      __trailing_zeros = true;
    #####: 1473:	      __expc = 'e';
    #####: 1474:	      __use_prec = true;
    #####: 1475:	      __fmt = chars_format::general;
    #####: 1476:	      break;
    %%%%%: 1476-block  0
    #####: 1477:	    case _Pres_none:
    #####: 1478:	      if (__use_prec)
    %%%%%: 1478-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1479:		__fmt = chars_format::general;
    %%%%%: 1479-block  0
    #####: 1480:	      break;
    %%%%%: 1480-block  0
        -: 1481:	  }
        -: 1482:
        -: 1483:	  // Write value into buffer using std::to_chars.
    #####: 1484:	  auto __to_chars = [&](char* __b, char* __e) {
        -: 1485:	    if (__use_prec)
        -: 1486:	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
        -: 1487:	    else if (__fmt != chars_format{})
        -: 1488:	      return __format::to_chars(__b, __e, __v, __fmt);
        -: 1489:	    else
        -: 1490:	      return __format::to_chars(__b, __e, __v);
        -: 1491:	  };
        -: 1492:
        -: 1493:	  // First try using stack buffer.
    #####: 1494:	  __res = __to_chars(__start, __end);
    %%%%%: 1494-block  0
call    0 never executed
        -: 1495:
    #####: 1496:	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1497:	    {
        -: 1498:	      // If the buffer is too small it's probably because of a large
        -: 1499:	      // precision, or a very large value in fixed format.
    #####: 1500:	      size_t __guess =  __prec + sizeof(__buf);
    #####: 1501:	      if (__fmt == chars_format::fixed)
    %%%%%: 1501-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1502:		__guess += max((int)__builtin_log10(__builtin_abs(__v)) / 2, 1);
    %%%%%: 1502-block  0
call    0 never executed
    #####: 1503:	      __dynbuf.reserve(__guess);
    %%%%%: 1503-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1504:
        -: 1505:	      do
        -: 1506:		{
    #####: 1507:		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
        -: 1508:		  {
        -: 1509:		    __res = __to_chars(__p + 1, __p + __n - 1);
        -: 1510:		    return __res.ec == errc{} ? __res.ptr - __p : 0;
        -: 1511:		  };
        -: 1512:
    #####: 1513:		  _S_resize_and_overwrite(__dynbuf, __dynbuf.capacity() * 2,
    %%%%%: 1513-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 1514:					  __overwrite);
    #####: 1515:		  __start = __dynbuf.data() + 1; // reserve space for sign
    %%%%%: 1515-block  0
call    0 never executed
    #####: 1516:		  __end = __dynbuf.data() + __dynbuf.size();
call    0 never executed
call    1 never executed
        -: 1517:		}
    #####: 1518:	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 1519:	  }
        -: 1520:
        -: 1521:	  // Use uppercase for 'A', 'E', and 'G' formats.
    #####: 1522:	  if (__upper)
    %%%%%: 1522-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1523:	    {
    #####: 1524:	      for (char* __p = __start; __p != __res.ptr; ++__p)
    %%%%%: 1524-block  0
    %%%%%: 1524-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1525:		*__p = std::toupper(*__p);
    %%%%%: 1525-block  0
    #####: 1526:	      __expc = std::toupper(__expc);
    %%%%%: 1526-block  0
        -: 1527:	    }
        -: 1528:
        -: 1529:	  // Add sign for non-negative values.
    #####: 1530:	  if (!__builtin_signbit(__v))
    %%%%%: 1530-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1531:	    {
    #####: 1532:	      if (_M_spec._M_sign == _Sign_plus)
    %%%%%: 1532-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1533:		*--__start = '+';
    %%%%%: 1533-block  0
    #####: 1534:	      else if (_M_spec._M_sign == _Sign_space)
    %%%%%: 1534-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1535:		*--__start = ' ';
    %%%%%: 1535-block  0
        -: 1536:	    }
        -: 1537:
    #####: 1538:	  string_view __narrow_str(__start, __res.ptr - __start);
    %%%%%: 1538-block  0
call    0 never executed
        -: 1539:
        -: 1540:	  // Use alternate form.
    #####: 1541:	  if (_M_spec._M_alt && __builtin_isfinite(__v))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1541-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 1542:	    {
    #####: 1543:	      string_view __s = __narrow_str;
    #####: 1544:	      size_t __z = 0;
        -: 1545:	      size_t __p;
    #####: 1546:	      size_t __d = __s.find('.');
    %%%%%: 1546-block  0
call    0 never executed
        -: 1547:	      size_t __sigfigs;
    #####: 1548:	      if (__d != __s.npos)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1549:		{
    #####: 1550:		  __p = __s.find(__expc, __d + 1);
    %%%%%: 1550-block  0
call    0 never executed
    #####: 1551:		  if (__p == __s.npos)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1552:		    __p = __s.size();
    %%%%%: 1552-block  0
call    0 never executed
    #####: 1553:		  __sigfigs = __p - 1;
    %%%%%: 1553-block  0
        -: 1554:		}
        -: 1555:	      else
        -: 1556:		{
    #####: 1557:		  __p = __s.find(__expc);
    %%%%%: 1557-block  0
call    0 never executed
    #####: 1558:		  if (__p == __s.npos)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1559:		    __p = __s.size();
    %%%%%: 1559-block  0
call    0 never executed
    #####: 1560:		  __d = __p;
    #####: 1561:		  __sigfigs = __d;
    %%%%%: 1561-block  0
        -: 1562:		}
        -: 1563:
    #####: 1564:	      if (__trailing_zeros)
    %%%%%: 1564-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1565:		{
    #####: 1566:		  if (!__format::__is_xdigit(__s[0]))
    %%%%%: 1566-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1566-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 1567:		    --__sigfigs;
    %%%%%: 1567-block  0
    #####: 1568:		  __z = __prec - __sigfigs;
    %%%%%: 1568-block  0
        -: 1569:		}
        -: 1570:
    #####: 1571:	      if (size_t __extras = int(__d == __p) + __z)
    %%%%%: 1571-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1572:		{
    #####: 1573:		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
    %%%%%: 1573-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1573-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1573-block  2
    %%%%%: 1573-block  3
    %%%%%: 1573-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1574:		    {
        -: 1575:		      // Move exponent to make space for extra chars.
    #####: 1576:		      __builtin_memmove(__start + __p + __extras,
    #####: 1577:					__start + __p,
    #####: 1578:					__s.size() - __p);
    %%%%%: 1578-block  0
call    0 never executed
        -: 1579:
    #####: 1580:		      if (__d == __p)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1581:			__start[__p++] = '.';
    %%%%%: 1581-block  0
    #####: 1582:		      __builtin_memset(__start + __p, '0', __z);
    #####: 1583:		      __narrow_str = {__s.data(), __s.size() + __extras};
    %%%%%: 1583-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1584:		    }
        -: 1585:		  else
        -: 1586:		    {
    #####: 1587:		      __dynbuf.reserve(__s.size() + __extras);
    %%%%%: 1587-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 1588:		      if (__dynbuf.empty())
    %%%%%: 1588-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1589:			{
    #####: 1590:			  __dynbuf = __s.substr(0, __p);
    %%%%%: 1590-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1590-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 1590-block  2
    #####: 1591:			  if (__d == __p)
    %%%%%: 1591-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1592:			    __dynbuf += '.';
    %%%%%: 1592-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1593:			  if (__z)
    %%%%%: 1593-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1594:			    __dynbuf.append(__z, '0');
    %%%%%: 1594-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1595:			}
        -: 1596:		      else
        -: 1597:			{
    #####: 1598:			  __dynbuf.insert(__p, __extras, '0');
    %%%%%: 1598-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1599:			  if (__d == __p)
    %%%%%: 1599-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1600:			    __dynbuf[__p] = '.';
    %%%%%: 1600-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1600-block  1
        -: 1601:			}
    #####: 1602:		      __narrow_str = __dynbuf;
    %%%%%: 1602-block  0
call    0 never executed
        -: 1603:		    }
        -: 1604:		}
        -: 1605:	    }
        -: 1606:
        -: 1607:	  // TODO move everything below to a new member function that
        -: 1608:	  // doesn't depend on _Fp type.
        -: 1609:
        -: 1610:
        -: 1611:	  _Optional_locale __loc;
    #####: 1612:	  basic_string_view<_CharT> __str;
    #####: 1613:	  basic_string<_CharT> __wstr;
    %%%%%: 1613-block  0
call    0 never executed
        -: 1614:	  if constexpr (is_same_v<_CharT, char>)
    #####: 1615:	    __str = __narrow_str;
        -: 1616:	  else
        -: 1617:	    {
        -: 1618:	      __loc = __fc.locale();
        -: 1619:	      auto& __ct = use_facet<ctype<_CharT>>(__loc.value());
        -: 1620:	      const char* __data = __narrow_str.data();
        -: 1621:	      auto __overwrite = [&__data, &__ct](_CharT* __p, size_t __n)
        -: 1622:	      {
        -: 1623:		__ct.widen(__data, __data + __n, __p);
        -: 1624:		return __n;
        -: 1625:	      };
        -: 1626:	      _S_resize_and_overwrite(__wstr, __narrow_str.size(), __overwrite);
        -: 1627:	      __str = __wstr;
        -: 1628:	    }
        -: 1629:
    #####: 1630:	  if (_M_spec._M_localized)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1631:	    {
        -: 1632:	      if constexpr (is_same_v<char, _CharT>)
    #####: 1633:		__wstr = _M_localize(__str, __expc, __fc.locale());
    %%%%%: 1633-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1633-block  1
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$: 1633-block  2
call    7 never executed
    $$$$$: 1633-block  3
    $$$$$: 1633-block  4
        -: 1634:	      else
        -: 1635:		__wstr = _M_localize(__str, __expc, __loc.value());
    #####: 1636:	      __str = __wstr;
call    0 never executed
        -: 1637:	    }
        -: 1638:
    #####: 1639:	  size_t __width = _M_spec._M_get_width(__fc);
    %%%%%: 1639-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1640:
    #####: 1641:	  if (__width <= __str.size())
    %%%%%: 1641-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1642:	    return __format::__write(__fc.out(), __str);
    %%%%%: 1642-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1642-block  1
        -: 1643:
    #####: 1644:	  _CharT __fill_char = _M_spec._M_fill;
    #####: 1645:	  _Align __align = _M_spec._M_align;
        -: 1646:
    #####: 1647:	  size_t __nfill = __width - __str.size();
    %%%%%: 1647-block  0
call    0 never executed
    #####: 1648:	  auto __out = __fc.out();
call    0 never executed
    #####: 1649:	  if (__align == _Align_default)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1650:	    {
    #####: 1651:	      __align = _Align_right;
    #####: 1652:	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
    %%%%%: 1652-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1652-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 1653:		{
    #####: 1654:		  __fill_char = _CharT('0');
        -: 1655:		  // Write sign before zero filling.
    #####: 1656:		  if (!__format::__is_xdigit(__narrow_str[0]))
    %%%%%: 1656-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1656-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1656-block  2
        -: 1657:		    {
    #####: 1658:		      *__out++ = __str[0];
    %%%%%: 1658-block  0
call    0 never executed
    $$$$$: 1658-block  1
    #####: 1659:		      __str.remove_prefix(1);
    %%%%%: 1659-block  0
call    0 never executed
        -: 1660:		    }
        -: 1661:		}
        -: 1662:	      else
    #####: 1663:		__fill_char = _CharT(' ');
    %%%%%: 1663-block  0
        -: 1664:	    }
    #####: 1665:	  return __format::__write_padded(std::move(__out), __str,
    %%%%%: 1665-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 1666:					  __align, __nfill, __fill_char);
    %%%%%: 1666-block  0
    #####: 1667:	}
    %%%%%: 1667-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 1667-block  1
call    3 never executed
    $$$$$: 1667-block  2
call    4 never executed
    $$$$$: 1667-block  3
call    5 never executed
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1428:	format(_Fp __v, basic_format_context<_Out, _CharT>& __fc) const
        -: 1429:	{
    #####: 1430:	  std::string __dynbuf;
    %%%%%: 1430-block  0
call    0 never executed
        -: 1431:	  char __buf[128];
    #####: 1432:	  to_chars_result __res{};
        -: 1433:
    #####: 1434:	  size_t __prec = 6;
    #####: 1435:	  bool __use_prec = _M_spec._M_prec_kind != _WP_none;
    #####: 1436:	  if (__use_prec)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1437:	    __prec = _M_spec._M_get_precision(__fc);
    %%%%%: 1437-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1437-block  1
        -: 1438:
    #####: 1439:	  char* __start = __buf + 1; // reserve space for sign
    #####: 1440:	  char* __end = __buf + sizeof(__buf);
        -: 1441:
    #####: 1442:	  chars_format __fmt{};
    #####: 1443:	  bool __upper = false;
    #####: 1444:	  bool __trailing_zeros = false;
    #####: 1445:	  char __expc = 0;
        -: 1446:
    #####: 1447:	  switch (_M_spec._M_type)
    %%%%%: 1447-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 1448:	  {
    #####: 1449:	    case _Pres_A:
    #####: 1450:	      __upper = true;
    %%%%%: 1450-block  0
        -: 1451:	      [[fallthrough]];
    #####: 1452:	    case _Pres_a:
    #####: 1453:	      __expc = 'p';
    #####: 1454:	      __fmt = chars_format::hex;
    #####: 1455:	      break;
    %%%%%: 1455-block  0
    #####: 1456:	    case _Pres_E:
    #####: 1457:	      __upper = true;
    %%%%%: 1457-block  0
        -: 1458:	      [[fallthrough]];
    #####: 1459:	    case _Pres_e:
    #####: 1460:	      __expc = 'e';
    #####: 1461:	      __use_prec = true;
    #####: 1462:	      __fmt = chars_format::scientific;
    #####: 1463:	      break;
    %%%%%: 1463-block  0
    #####: 1464:	    case _Pres_f:
    #####: 1465:	      __use_prec = true;
    #####: 1466:	      __fmt = chars_format::fixed;
    #####: 1467:	      break;
    %%%%%: 1467-block  0
    #####: 1468:	    case _Pres_G:
    #####: 1469:	      __upper = true;
    %%%%%: 1469-block  0
        -: 1470:	      [[fallthrough]];
    #####: 1471:	    case _Pres_g:
    #####: 1472:	      __trailing_zeros = true;
    #####: 1473:	      __expc = 'e';
    #####: 1474:	      __use_prec = true;
    #####: 1475:	      __fmt = chars_format::general;
    #####: 1476:	      break;
    %%%%%: 1476-block  0
    #####: 1477:	    case _Pres_none:
    #####: 1478:	      if (__use_prec)
    %%%%%: 1478-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1479:		__fmt = chars_format::general;
    %%%%%: 1479-block  0
    #####: 1480:	      break;
    %%%%%: 1480-block  0
        -: 1481:	  }
        -: 1482:
        -: 1483:	  // Write value into buffer using std::to_chars.
    #####: 1484:	  auto __to_chars = [&](char* __b, char* __e) {
        -: 1485:	    if (__use_prec)
        -: 1486:	      return __format::to_chars(__b, __e, __v, __fmt, __prec);
        -: 1487:	    else if (__fmt != chars_format{})
        -: 1488:	      return __format::to_chars(__b, __e, __v, __fmt);
        -: 1489:	    else
        -: 1490:	      return __format::to_chars(__b, __e, __v);
        -: 1491:	  };
        -: 1492:
        -: 1493:	  // First try using stack buffer.
    #####: 1494:	  __res = __to_chars(__start, __end);
    %%%%%: 1494-block  0
call    0 never executed
        -: 1495:
    #####: 1496:	  if (__builtin_expect(__res.ec == errc::value_too_large, 0))
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1497:	    {
        -: 1498:	      // If the buffer is too small it's probably because of a large
        -: 1499:	      // precision, or a very large value in fixed format.
    #####: 1500:	      size_t __guess =  __prec + sizeof(__buf);
    #####: 1501:	      if (__fmt == chars_format::fixed)
    %%%%%: 1501-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1502:		__guess += max((int)__builtin_log10(__builtin_abs(__v)) / 2, 1);
    %%%%%: 1502-block  0
call    0 never executed
    #####: 1503:	      __dynbuf.reserve(__guess);
    %%%%%: 1503-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1504:
        -: 1505:	      do
        -: 1506:		{
    #####: 1507:		  auto __overwrite = [&__to_chars, &__res] (char* __p, size_t __n)
        -: 1508:		  {
        -: 1509:		    __res = __to_chars(__p + 1, __p + __n - 1);
        -: 1510:		    return __res.ec == errc{} ? __res.ptr - __p : 0;
        -: 1511:		  };
        -: 1512:
    #####: 1513:		  _S_resize_and_overwrite(__dynbuf, __dynbuf.capacity() * 2,
    %%%%%: 1513-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 1514:					  __overwrite);
    #####: 1515:		  __start = __dynbuf.data() + 1; // reserve space for sign
    %%%%%: 1515-block  0
call    0 never executed
    #####: 1516:		  __end = __dynbuf.data() + __dynbuf.size();
call    0 never executed
call    1 never executed
        -: 1517:		}
    #####: 1518:	      while (__builtin_expect(__res.ec == errc::value_too_large, 0));
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 1519:	  }
        -: 1520:
        -: 1521:	  // Use uppercase for 'A', 'E', and 'G' formats.
    #####: 1522:	  if (__upper)
    %%%%%: 1522-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1523:	    {
    #####: 1524:	      for (char* __p = __start; __p != __res.ptr; ++__p)
    %%%%%: 1524-block  0
    %%%%%: 1524-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1525:		*__p = std::toupper(*__p);
    %%%%%: 1525-block  0
    #####: 1526:	      __expc = std::toupper(__expc);
    %%%%%: 1526-block  0
        -: 1527:	    }
        -: 1528:
        -: 1529:	  // Add sign for non-negative values.
    #####: 1530:	  if (!__builtin_signbit(__v))
    %%%%%: 1530-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1531:	    {
    #####: 1532:	      if (_M_spec._M_sign == _Sign_plus)
    %%%%%: 1532-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1533:		*--__start = '+';
    %%%%%: 1533-block  0
    #####: 1534:	      else if (_M_spec._M_sign == _Sign_space)
    %%%%%: 1534-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1535:		*--__start = ' ';
    %%%%%: 1535-block  0
        -: 1536:	    }
        -: 1537:
    #####: 1538:	  string_view __narrow_str(__start, __res.ptr - __start);
    %%%%%: 1538-block  0
call    0 never executed
        -: 1539:
        -: 1540:	  // Use alternate form.
    #####: 1541:	  if (_M_spec._M_alt && __builtin_isfinite(__v))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1541-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 1542:	    {
    #####: 1543:	      string_view __s = __narrow_str;
    #####: 1544:	      size_t __z = 0;
        -: 1545:	      size_t __p;
    #####: 1546:	      size_t __d = __s.find('.');
    %%%%%: 1546-block  0
call    0 never executed
        -: 1547:	      size_t __sigfigs;
    #####: 1548:	      if (__d != __s.npos)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1549:		{
    #####: 1550:		  __p = __s.find(__expc, __d + 1);
    %%%%%: 1550-block  0
call    0 never executed
    #####: 1551:		  if (__p == __s.npos)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1552:		    __p = __s.size();
    %%%%%: 1552-block  0
call    0 never executed
    #####: 1553:		  __sigfigs = __p - 1;
    %%%%%: 1553-block  0
        -: 1554:		}
        -: 1555:	      else
        -: 1556:		{
    #####: 1557:		  __p = __s.find(__expc);
    %%%%%: 1557-block  0
call    0 never executed
    #####: 1558:		  if (__p == __s.npos)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1559:		    __p = __s.size();
    %%%%%: 1559-block  0
call    0 never executed
    #####: 1560:		  __d = __p;
    #####: 1561:		  __sigfigs = __d;
    %%%%%: 1561-block  0
        -: 1562:		}
        -: 1563:
    #####: 1564:	      if (__trailing_zeros)
    %%%%%: 1564-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1565:		{
    #####: 1566:		  if (!__format::__is_xdigit(__s[0]))
    %%%%%: 1566-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1566-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 1567:		    --__sigfigs;
    %%%%%: 1567-block  0
    #####: 1568:		  __z = __prec - __sigfigs;
    %%%%%: 1568-block  0
        -: 1569:		}
        -: 1570:
    #####: 1571:	      if (size_t __extras = int(__d == __p) + __z)
    %%%%%: 1571-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1572:		{
    #####: 1573:		  if (__dynbuf.empty() && __extras <= size_t(__end - __res.ptr))
    %%%%%: 1573-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1573-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1573-block  2
    %%%%%: 1573-block  3
    %%%%%: 1573-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 1574:		    {
        -: 1575:		      // Move exponent to make space for extra chars.
    #####: 1576:		      __builtin_memmove(__start + __p + __extras,
    #####: 1577:					__start + __p,
    #####: 1578:					__s.size() - __p);
    %%%%%: 1578-block  0
call    0 never executed
        -: 1579:
    #####: 1580:		      if (__d == __p)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1581:			__start[__p++] = '.';
    %%%%%: 1581-block  0
    #####: 1582:		      __builtin_memset(__start + __p, '0', __z);
    #####: 1583:		      __narrow_str = {__s.data(), __s.size() + __extras};
    %%%%%: 1583-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1584:		    }
        -: 1585:		  else
        -: 1586:		    {
    #####: 1587:		      __dynbuf.reserve(__s.size() + __extras);
    %%%%%: 1587-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 1588:		      if (__dynbuf.empty())
    %%%%%: 1588-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1589:			{
    #####: 1590:			  __dynbuf = __s.substr(0, __p);
    %%%%%: 1590-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1590-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 1590-block  2
    #####: 1591:			  if (__d == __p)
    %%%%%: 1591-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1592:			    __dynbuf += '.';
    %%%%%: 1592-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1593:			  if (__z)
    %%%%%: 1593-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1594:			    __dynbuf.append(__z, '0');
    %%%%%: 1594-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1595:			}
        -: 1596:		      else
        -: 1597:			{
    #####: 1598:			  __dynbuf.insert(__p, __extras, '0');
    %%%%%: 1598-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1599:			  if (__d == __p)
    %%%%%: 1599-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1600:			    __dynbuf[__p] = '.';
    %%%%%: 1600-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1600-block  1
        -: 1601:			}
    #####: 1602:		      __narrow_str = __dynbuf;
    %%%%%: 1602-block  0
call    0 never executed
        -: 1603:		    }
        -: 1604:		}
        -: 1605:	    }
        -: 1606:
        -: 1607:	  // TODO move everything below to a new member function that
        -: 1608:	  // doesn't depend on _Fp type.
        -: 1609:
        -: 1610:
        -: 1611:	  _Optional_locale __loc;
    #####: 1612:	  basic_string_view<_CharT> __str;
    #####: 1613:	  basic_string<_CharT> __wstr;
    %%%%%: 1613-block  0
call    0 never executed
        -: 1614:	  if constexpr (is_same_v<_CharT, char>)
    #####: 1615:	    __str = __narrow_str;
        -: 1616:	  else
        -: 1617:	    {
        -: 1618:	      __loc = __fc.locale();
        -: 1619:	      auto& __ct = use_facet<ctype<_CharT>>(__loc.value());
        -: 1620:	      const char* __data = __narrow_str.data();
        -: 1621:	      auto __overwrite = [&__data, &__ct](_CharT* __p, size_t __n)
        -: 1622:	      {
        -: 1623:		__ct.widen(__data, __data + __n, __p);
        -: 1624:		return __n;
        -: 1625:	      };
        -: 1626:	      _S_resize_and_overwrite(__wstr, __narrow_str.size(), __overwrite);
        -: 1627:	      __str = __wstr;
        -: 1628:	    }
        -: 1629:
    #####: 1630:	  if (_M_spec._M_localized)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1631:	    {
        -: 1632:	      if constexpr (is_same_v<char, _CharT>)
    #####: 1633:		__wstr = _M_localize(__str, __expc, __fc.locale());
    %%%%%: 1633-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1633-block  1
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$: 1633-block  2
call    7 never executed
    $$$$$: 1633-block  3
    $$$$$: 1633-block  4
        -: 1634:	      else
        -: 1635:		__wstr = _M_localize(__str, __expc, __loc.value());
    #####: 1636:	      __str = __wstr;
call    0 never executed
        -: 1637:	    }
        -: 1638:
    #####: 1639:	  size_t __width = _M_spec._M_get_width(__fc);
    %%%%%: 1639-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1640:
    #####: 1641:	  if (__width <= __str.size())
    %%%%%: 1641-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1642:	    return __format::__write(__fc.out(), __str);
    %%%%%: 1642-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1642-block  1
        -: 1643:
    #####: 1644:	  _CharT __fill_char = _M_spec._M_fill;
    #####: 1645:	  _Align __align = _M_spec._M_align;
        -: 1646:
    #####: 1647:	  size_t __nfill = __width - __str.size();
    %%%%%: 1647-block  0
call    0 never executed
    #####: 1648:	  auto __out = __fc.out();
call    0 never executed
    #####: 1649:	  if (__align == _Align_default)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1650:	    {
    #####: 1651:	      __align = _Align_right;
    #####: 1652:	      if (_M_spec._M_zero_fill && __builtin_isfinite(__v))
    %%%%%: 1652-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1652-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 1653:		{
    #####: 1654:		  __fill_char = _CharT('0');
        -: 1655:		  // Write sign before zero filling.
    #####: 1656:		  if (!__format::__is_xdigit(__narrow_str[0]))
    %%%%%: 1656-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1656-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1656-block  2
        -: 1657:		    {
    #####: 1658:		      *__out++ = __str[0];
    %%%%%: 1658-block  0
call    0 never executed
    $$$$$: 1658-block  1
    #####: 1659:		      __str.remove_prefix(1);
    %%%%%: 1659-block  0
call    0 never executed
        -: 1660:		    }
        -: 1661:		}
        -: 1662:	      else
    #####: 1663:		__fill_char = _CharT(' ');
    %%%%%: 1663-block  0
        -: 1664:	    }
    #####: 1665:	  return __format::__write_padded(std::move(__out), __str,
    %%%%%: 1665-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 1666:					  __align, __nfill, __fill_char);
    %%%%%: 1666-block  0
    #####: 1667:	}
    %%%%%: 1667-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 1667-block  1
call    3 never executed
    $$$$$: 1667-block  2
call    4 never executed
    $$$$$: 1667-block  3
call    5 never executed
------------------
        -: 1668:
        -: 1669:      // Locale-specific format.
        -: 1670:      basic_string<_CharT>
function std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const called 0 returned 0% blocks executed 0%
    #####: 1671:      _M_localize(basic_string_view<_CharT> __str, char __expc,
        -: 1672:		  const locale& __loc) const
        -: 1673:      {
    #####: 1674:	basic_string<_CharT> __lstr;
    %%%%%: 1674-block  0
call    0 never executed
        -: 1675:
    #####: 1676:	if (__loc == locale::classic())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1676-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 1677:	  return __lstr; // Nothing to do.
    %%%%%: 1677-block  0
        -: 1678:
    #####: 1679:	const auto& __np = use_facet<numpunct<_CharT>>(__loc);
    %%%%%: 1679-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1680:	const _CharT __point = __np.decimal_point();
    %%%%%: 1680-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1681:	const string __grp = __np.grouping();
    %%%%%: 1681-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1682:
        -: 1683:	_CharT __dot, __exp;
        -: 1684:	if constexpr (is_same_v<_CharT, char>)
        -: 1685:	  {
    #####: 1686:	    __dot = '.';
    #####: 1687:	    __exp = __expc;
        -: 1688:	  }
        -: 1689:	else
        -: 1690:	  {
        -: 1691:	    const auto& __ct = use_facet<ctype<_CharT>>(__loc);
        -: 1692:	    __dot = __ct.widen('.');
        -: 1693:	    __exp = __ct.widen(__expc);
        -: 1694:	  }
        -: 1695:
    #####: 1696:	if (__grp.empty() && __point == __dot)
    %%%%%: 1696-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1696-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1696-block  2
    %%%%%: 1696-block  3
    %%%%%: 1696-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
    #####: 1697:	  return __lstr; // Locale uses '.' and no grouping.
    %%%%%: 1697-block  0
        -: 1698:
    #####: 1699:	size_t __d = __str.find(__dot);
    %%%%%: 1699-block  0
call    0 never executed
    #####: 1700:	size_t __e = min(__d, __str.find(__exp));
call    0 never executed
call    1 never executed
    #####: 1701:	if (__e == __str.npos)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1702:	  __e = __str.size();
    %%%%%: 1702-block  0
call    0 never executed
    #####: 1703:	const size_t __r = __str.size() - __e;
    %%%%%: 1703-block  0
call    0 never executed
function std::__format::__formatter_fp<char>::_M_localize[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const::{lambda(char*, unsigned long)#1}::operator()(char*, unsigned long) const called 0 returned 0% blocks executed 0%
    #####: 1704:	auto __overwrite = [&](_CharT* __p, size_t) {
    #####: 1705:	  auto __end = std::__add_grouping(__p, __np.thousands_sep(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1706:					   __grp.data(), __grp.size(),
    #####: 1707:					   __str.data(), __str.data() + __e);
    %%%%%: 1707-block  0
call    0 never executed
call    1 never executed
    #####: 1708:	  if (__r)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1709:	    {
    #####: 1710:	      if (__d != __str.npos)
    %%%%%: 1710-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1711:		{
    #####: 1712:		  *__end = __point;
    #####: 1713:		  ++__end;
    #####: 1714:		  ++__e;
    %%%%%: 1714-block  0
        -: 1715:		}
    #####: 1716:	      if (__r > 1)
    %%%%%: 1716-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1717:		__end += __str.copy(__end, __str.npos, __e);
    %%%%%: 1717-block  0
call    0 never executed
        -: 1718:	    }
    #####: 1719:	  return (__end - __p);
    %%%%%: 1719-block  0
        -: 1720:	};
    #####: 1721:	_S_resize_and_overwrite(__lstr, __e * 2 + __r, __overwrite);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1722:	return __lstr;
    %%%%%: 1722-block  0
    #####: 1723:      }
    %%%%%: 1723-block  0
call    0 never executed
    $$$$$: 1723-block  1
call    1 never executed
    $$$$$: 1723-block  2
call    2 never executed
        -: 1724:
        -: 1725:      template<typename _Ch, typename _Func>
        -: 1726:	static void
    #####: 1727:	_S_resize_and_overwrite(basic_string<_Ch>& __str, size_t __n, _Func __f)
        -: 1728:	{
        -: 1729:#if __cpp_lib_string_resize_and_overwrite
        -: 1730:	  __str.resize_and_overwrite(__n, __f);
        -: 1731:#else
    #####: 1732:	  __str.resize(__n);
    #####: 1733:	  __str.resize(__f(__str.data(), __n));
        -: 1734:#endif
    #####: 1735:	}
------------------
void std::__format::__formatter_fp<char>::_S_resize_and_overwrite<char, std::__format::__formatter_fp<char>::_M_localize(std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const::{lambda(char*, unsigned long)#1}>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned long, std::__format::__formatter_fp<char>::_M_localize(std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const::{lambda(char*, unsigned long)#1}):
function void std::__format::__formatter_fp<char>::_S_resize_and_overwrite<char, std::__format::__formatter_fp<char>::_M_localize(std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const::{lambda(char*, unsigned long)#1}>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned long, std::__format::__formatter_fp<char>::_M_localize(std::basic_string_view<char, std::char_traits<char> >, char, std::locale const&) const::{lambda(char*, unsigned long)#1}) called 0 returned 0% blocks executed 0%
    #####: 1727:	_S_resize_and_overwrite(basic_string<_Ch>& __str, size_t __n, _Func __f)
        -: 1728:	{
        -: 1729:#if __cpp_lib_string_resize_and_overwrite
        -: 1730:	  __str.resize_and_overwrite(__n, __f);
        -: 1731:#else
    #####: 1732:	  __str.resize(__n);
    %%%%%: 1732-block  0
call    0 never executed
    #####: 1733:	  __str.resize(__f(__str.data(), __n));
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1734:#endif
    #####: 1735:	}
------------------
void std::__format::__formatter_fp<char>::_S_resize_and_overwrite<char, std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const::{lambda(char*, unsigned long)#1}>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned long, std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const::{lambda(char*, unsigned long)#1}):
function void std::__format::__formatter_fp<char>::_S_resize_and_overwrite<char, std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const::{lambda(char*, unsigned long)#1}>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned long, std::__format::__formatter_fp<char>::format<_Float128, std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const::{lambda(char*, unsigned long)#1}) called 0 returned 0% blocks executed 0%
    #####: 1727:	_S_resize_and_overwrite(basic_string<_Ch>& __str, size_t __n, _Func __f)
        -: 1728:	{
        -: 1729:#if __cpp_lib_string_resize_and_overwrite
        -: 1730:	  __str.resize_and_overwrite(__n, __f);
        -: 1731:#else
    #####: 1732:	  __str.resize(__n);
    %%%%%: 1732-block  0
call    0 never executed
    #####: 1733:	  __str.resize(__f(__str.data(), __n));
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1734:#endif
    #####: 1735:	}
------------------
void std::__format::__formatter_fp<char>::_S_resize_and_overwrite<char, std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const::{lambda(char*, unsigned long)#1}>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned long, std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const::{lambda(char*, unsigned long)#1}):
function void std::__format::__formatter_fp<char>::_S_resize_and_overwrite<char, std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const::{lambda(char*, unsigned long)#1}>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned long, std::__format::__formatter_fp<char>::format<long double, std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const::{lambda(char*, unsigned long)#1}) called 0 returned 0% blocks executed 0%
    #####: 1727:	_S_resize_and_overwrite(basic_string<_Ch>& __str, size_t __n, _Func __f)
        -: 1728:	{
        -: 1729:#if __cpp_lib_string_resize_and_overwrite
        -: 1730:	  __str.resize_and_overwrite(__n, __f);
        -: 1731:#else
    #####: 1732:	  __str.resize(__n);
    %%%%%: 1732-block  0
call    0 never executed
    #####: 1733:	  __str.resize(__f(__str.data(), __n));
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1734:#endif
    #####: 1735:	}
------------------
void std::__format::__formatter_fp<char>::_S_resize_and_overwrite<char, std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const::{lambda(char*, unsigned long)#1}>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned long, std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const::{lambda(char*, unsigned long)#1}):
function void std::__format::__formatter_fp<char>::_S_resize_and_overwrite<char, std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const::{lambda(char*, unsigned long)#1}>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned long, std::__format::__formatter_fp<char>::format<double, std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const::{lambda(char*, unsigned long)#1}) called 0 returned 0% blocks executed 0%
    #####: 1727:	_S_resize_and_overwrite(basic_string<_Ch>& __str, size_t __n, _Func __f)
        -: 1728:	{
        -: 1729:#if __cpp_lib_string_resize_and_overwrite
        -: 1730:	  __str.resize_and_overwrite(__n, __f);
        -: 1731:#else
    #####: 1732:	  __str.resize(__n);
    %%%%%: 1732-block  0
call    0 never executed
    #####: 1733:	  __str.resize(__f(__str.data(), __n));
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1734:#endif
    #####: 1735:	}
------------------
void std::__format::__formatter_fp<char>::_S_resize_and_overwrite<char, std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const::{lambda(char*, unsigned long)#1}>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned long, std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const::{lambda(char*, unsigned long)#1}):
function void std::__format::__formatter_fp<char>::_S_resize_and_overwrite<char, std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const::{lambda(char*, unsigned long)#1}>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned long, std::__format::__formatter_fp<char>::format<float, std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const::{lambda(char*, unsigned long)#1}) called 0 returned 0% blocks executed 0%
    #####: 1727:	_S_resize_and_overwrite(basic_string<_Ch>& __str, size_t __n, _Func __f)
        -: 1728:	{
        -: 1729:#if __cpp_lib_string_resize_and_overwrite
        -: 1730:	  __str.resize_and_overwrite(__n, __f);
        -: 1731:#else
    #####: 1732:	  __str.resize(__n);
    %%%%%: 1732-block  0
call    0 never executed
    #####: 1733:	  __str.resize(__f(__str.data(), __n));
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1734:#endif
    #####: 1735:	}
------------------
        -: 1736:
        -: 1737:      _Spec<_CharT> _M_spec{};
        -: 1738:    };
        -: 1739:
        -: 1740:} // namespace __format
        -: 1741:/// @endcond
        -: 1742:
        -: 1743:  // Format a character.
        -: 1744:  template<__format::__char _CharT>
        -: 1745:    struct formatter<_CharT, _CharT>
        -: 1746:    {
        -: 1747:      formatter() = default;
        -: 1748:
        -: 1749:      constexpr typename basic_format_parse_context<_CharT>::iterator
function std::formatter<char, char>::parse(std::basic_format_parse_context<char>&) called 0 returned 0% blocks executed 0%
    #####: 1750:      parse(basic_format_parse_context<_CharT>& __pc)
        -: 1751:      {
    #####: 1752:	return _M_f.template _M_parse<_CharT>(__pc);
    %%%%%: 1752-block  0
call    0 never executed
        -: 1753:      }
        -: 1754:
        -: 1755:      template<typename _Out>
        -: 1756:	typename basic_format_context<_Out, _CharT>::iterator
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<char, char>::format<std::__format::_Sink_iter<char> >(char, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1757:	format(_CharT __u, basic_format_context<_Out, _CharT>& __fc) const
        -: 1758:	{
    #####: 1759:	  if (_M_f._M_spec._M_type == __format::_Pres_none)
    %%%%%: 1759-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1760:	    return _M_f._M_format_character(__u, __fc);
    %%%%%: 1760-block  0
call    0 never executed
    #####: 1761:	  else if (_M_f._M_spec._M_type == __format::_Pres_esc)
    %%%%%: 1761-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1762:	    {
        -: 1763:	      // TODO
    #####: 1764:	      return __fc.out();
    %%%%%: 1764-block  0
call    0 never executed
        -: 1765:	    }
        -: 1766:	  else
    #####: 1767:	    return _M_f.format(__u, __fc);
    %%%%%: 1767-block  0
call    0 never executed
        -: 1768:	}
        -: 1769:
        -: 1770:#if __cpp_lib_format_ranges
        -: 1771:      constexpr void
        -: 1772:      set_debug_format() noexcept
        -: 1773:      { _M_f._M_spec._M_type = __format::_Pres_esc; }
        -: 1774:#endif
        -: 1775:
        -: 1776:    private:
        -: 1777:      __format::__formatter_int<_CharT> _M_f;
        -: 1778:    };
        -: 1779:
        -: 1780:  // Format a char value for wide character output.
        -: 1781:  template<>
        -: 1782:    struct formatter<char, wchar_t>
        -: 1783:    {
        -: 1784:      formatter() = default;
        -: 1785:
        -: 1786:      constexpr typename basic_format_parse_context<wchar_t>::iterator
        -: 1787:      parse(basic_format_parse_context<wchar_t>& __pc)
        -: 1788:      {
        -: 1789:	return _M_f._M_parse<char>(__pc);
        -: 1790:      }
        -: 1791:
        -: 1792:      template<typename _Out>
        -: 1793:	typename basic_format_context<_Out, wchar_t>::iterator
        -: 1794:	format(char __u, basic_format_context<_Out, wchar_t>& __fc) const
        -: 1795:	{
        -: 1796:	  if (_M_f._M_spec._M_type == __format::_Pres_none)
        -: 1797:	    return _M_f._M_format_character(__u, __fc);
        -: 1798:	  else if (_M_f._M_spec._M_type == __format::_Pres_esc)
        -: 1799:	    {
        -: 1800:	      // TODO
        -: 1801:	      return __fc.out();
        -: 1802:	    }
        -: 1803:	  else
        -: 1804:	    return _M_f.format(__u, __fc);
        -: 1805:	}
        -: 1806:
        -: 1807:      constexpr void
        -: 1808:      set_debug_format() noexcept
        -: 1809:      { _M_f._M_spec._M_type = __format::_Pres_esc; }
        -: 1810:
        -: 1811:    private:
        -: 1812:      __format::__formatter_int<wchar_t> _M_f;
        -: 1813:    };
        -: 1814:
        -: 1815:  /** Format a string.
        -: 1816:   * @{
        -: 1817:   */
        -: 1818:  template<__format::__char _CharT>
        -: 1819:    struct formatter<_CharT*, _CharT>
        -: 1820:    {
        -: 1821:      formatter() = default;
        -: 1822:
        -: 1823:      [[__gnu__::__always_inline__]]
        -: 1824:      constexpr typename basic_format_parse_context<_CharT>::iterator
        -: 1825:      parse(basic_format_parse_context<_CharT>& __pc)
        -: 1826:      { return _M_f.parse(__pc); }
        -: 1827:
        -: 1828:      template<typename _Out>
        -: 1829:	[[__gnu__::__nonnull__]]
        -: 1830:	typename basic_format_context<_Out, _CharT>::iterator
        -: 1831:	format(_CharT* __u, basic_format_context<_Out, _CharT>& __fc) const
        -: 1832:	{ return _M_f.format(__u, __fc); }
        -: 1833:
        -: 1834:      constexpr void set_debug_format() noexcept { _M_f.set_debug_format(); }
        -: 1835:
        -: 1836:    private:
        -: 1837:      __format::__formatter_str<_CharT> _M_f;
        -: 1838:    };
        -: 1839:
        -: 1840:  template<__format::__char _CharT>
        -: 1841:    struct formatter<const _CharT*, _CharT>
        -: 1842:    {
        -: 1843:      formatter() = default;
        -: 1844:
        -: 1845:      [[__gnu__::__always_inline__]]
        -: 1846:      constexpr typename basic_format_parse_context<_CharT>::iterator
        -: 1847:      parse(basic_format_parse_context<_CharT>& __pc)
    #####: 1848:      { return _M_f.parse(__pc); }
    %%%%%: 1848-block  0
    %%%%%: 1848-block  1
        -: 1849:
        -: 1850:      template<typename _Out>
        -: 1851:	[[__gnu__::__nonnull__]]
        -: 1852:	typename basic_format_context<_Out, _CharT>::iterator
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<char const*, char>::format<std::__format::_Sink_iter<char> >(char const*, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1853:	format(const _CharT* __u,
        -: 1854:	       basic_format_context<_Out, _CharT>& __fc) const
    #####: 1855:	{ return _M_f.format(__u, __fc); }
    %%%%%: 1855-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1855-block  1
    %%%%%: 1855-block  2
    %%%%%: 1855-block  3
        -: 1856:
        -: 1857:      constexpr void set_debug_format() noexcept { _M_f.set_debug_format(); }
        -: 1858:
        -: 1859:    private:
        -: 1860:      __format::__formatter_str<_CharT> _M_f;
        -: 1861:    };
        -: 1862:
        -: 1863:  template<__format::__char _CharT, size_t _Nm>
        -: 1864:    struct formatter<_CharT[_Nm], _CharT>
        -: 1865:    {
        -: 1866:      formatter() = default;
        -: 1867:
        -: 1868:      [[__gnu__::__always_inline__]]
        -: 1869:      constexpr typename basic_format_parse_context<_CharT>::iterator
        -: 1870:      parse(basic_format_parse_context<_CharT>& __pc)
        -: 1871:      { return _M_f.parse(__pc); }
        -: 1872:
        -: 1873:      template<typename _Out>
        -: 1874:	typename basic_format_context<_Out, _CharT>::iterator
        -: 1875:	format(const _CharT (&__u)[_Nm],
        -: 1876:	       basic_format_context<_Out, _CharT>& __fc) const
        -: 1877:	{ return _M_f.format({__u, _Nm}, __fc); }
        -: 1878:
        -: 1879:      constexpr void set_debug_format() noexcept { _M_f.set_debug_format(); }
        -: 1880:
        -: 1881:    private:
        -: 1882:      __format::__formatter_str<_CharT> _M_f;
        -: 1883:    };
        -: 1884:
        -: 1885:  template<typename _Traits, typename _Alloc>
        -: 1886:    struct formatter<basic_string<char, _Traits, _Alloc>, char>
        -: 1887:    {
        -: 1888:      formatter() = default;
        -: 1889:
        -: 1890:      [[__gnu__::__always_inline__]]
        -: 1891:      constexpr typename basic_format_parse_context<char>::iterator
        -: 1892:      parse(basic_format_parse_context<char>& __pc)
        -: 1893:      { return _M_f.parse(__pc); }
        -: 1894:
        -: 1895:      template<typename _Out>
        -: 1896:	typename basic_format_context<_Out, char>::iterator
        -: 1897:	format(const basic_string<char, _Traits, _Alloc>& __u,
        -: 1898:	       basic_format_context<_Out, char>& __fc) const
        -: 1899:	{ return _M_f.format(__u, __fc); }
        -: 1900:
        -: 1901:#if __cpp_lib_format_ranges
        -: 1902:      constexpr void set_debug_format() noexcept { _M_f.set_debug_format(); }
        -: 1903:#endif
        -: 1904:
        -: 1905:    private:
        -: 1906:      __format::__formatter_str<char> _M_f;
        -: 1907:    };
        -: 1908:
        -: 1909:  template<typename _Traits, typename _Alloc>
        -: 1910:    struct formatter<basic_string<wchar_t, _Traits, _Alloc>, wchar_t>
        -: 1911:    {
        -: 1912:      formatter() = default;
        -: 1913:
        -: 1914:      [[__gnu__::__always_inline__]]
        -: 1915:      constexpr typename basic_format_parse_context<wchar_t>::iterator
        -: 1916:      parse(basic_format_parse_context<wchar_t>& __pc)
        -: 1917:      { return _M_f.parse(__pc); }
        -: 1918:
        -: 1919:      template<typename _Out>
        -: 1920:	typename basic_format_context<_Out, wchar_t>::iterator
        -: 1921:	format(const basic_string<wchar_t, _Traits, _Alloc>& __u,
        -: 1922:	       basic_format_context<_Out, wchar_t>& __fc) const
        -: 1923:	{ return _M_f.format(__u, __fc); }
        -: 1924:
        -: 1925:#if __cpp_lib_format_ranges
        -: 1926:      constexpr void set_debug_format() noexcept { _M_f.set_debug_format(); }
        -: 1927:#endif
        -: 1928:
        -: 1929:    private:
        -: 1930:      __format::__formatter_str<wchar_t> _M_f;
        -: 1931:    };
        -: 1932:
        -: 1933:  template<typename _Traits>
        -: 1934:    struct formatter<basic_string_view<char, _Traits>, char>
        -: 1935:    {
        -: 1936:      formatter() = default;
        -: 1937:
        -: 1938:      [[__gnu__::__always_inline__]]
        -: 1939:      constexpr typename basic_format_parse_context<char>::iterator
        -: 1940:      parse(basic_format_parse_context<char>& __pc)
    #####: 1941:      { return _M_f.parse(__pc); }
    %%%%%: 1941-block  0
    %%%%%: 1941-block  1
        -: 1942:
        -: 1943:      template<typename _Out>
        -: 1944:	typename basic_format_context<_Out, char>::iterator
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<std::basic_string_view<char, std::char_traits<char> >, char>::format<std::__format::_Sink_iter<char> >(std::basic_string_view<char, std::char_traits<char> >, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1945:	format(basic_string_view<char, _Traits> __u,
        -: 1946:	       basic_format_context<_Out, char>& __fc) const
    #####: 1947:	{ return _M_f.format(__u, __fc); }
    %%%%%: 1947-block  0
call    0 never executed
        -: 1948:
        -: 1949:#if __cpp_lib_format_ranges
        -: 1950:      constexpr void set_debug_format() noexcept { _M_f.set_debug_format(); }
        -: 1951:#endif
        -: 1952:
        -: 1953:    private:
        -: 1954:      __format::__formatter_str<char> _M_f;
        -: 1955:    };
        -: 1956:
        -: 1957:  template<typename _Traits>
        -: 1958:    struct formatter<basic_string_view<wchar_t, _Traits>, wchar_t>
        -: 1959:    {
        -: 1960:      formatter() = default;
        -: 1961:
        -: 1962:      [[__gnu__::__always_inline__]]
        -: 1963:      constexpr typename basic_format_parse_context<wchar_t>::iterator
        -: 1964:      parse(basic_format_parse_context<wchar_t>& __pc)
        -: 1965:      { return _M_f.parse(__pc); }
        -: 1966:
        -: 1967:      template<typename _Out>
        -: 1968:	typename basic_format_context<_Out, wchar_t>::iterator
        -: 1969:	format(basic_string_view<wchar_t, _Traits> __u,
        -: 1970:	       basic_format_context<_Out, wchar_t>& __fc) const
        -: 1971:	{ return _M_f.format(__u, __fc); }
        -: 1972:
        -: 1973:#if __cpp_lib_format_ranges
        -: 1974:      constexpr void set_debug_format() noexcept { _M_f.set_debug_format(); }
        -: 1975:#endif
        -: 1976:
        -: 1977:    private:
        -: 1978:      __format::__formatter_str<wchar_t> _M_f;
        -: 1979:    };
        -: 1980:  /// @}
        -: 1981:
        -: 1982:  /// Format an integer.
        -: 1983:  template<integral _Tp, __format::__char _CharT>
        -: 1984:    requires (!__is_one_of<_Tp, char, wchar_t, char16_t, char32_t>::value)
        -: 1985:    struct formatter<_Tp, _CharT>
        -: 1986:    {
        -: 1987:      formatter() = default;
        -: 1988:
        -: 1989:      [[__gnu__::__always_inline__]]
        -: 1990:      constexpr typename basic_format_parse_context<_CharT>::iterator
        -: 1991:      parse(basic_format_parse_context<_CharT>& __pc)
        -: 1992:      {
    #####: 1993:	return _M_f.template _M_parse<_Tp>(__pc);
    %%%%%: 1993-block  0
    %%%%%: 1993-block  1
    %%%%%: 1993-block  2
    %%%%%: 1993-block  3
    %%%%%: 1993-block  4
    %%%%%: 1993-block  5
    %%%%%: 1993-block  6
    %%%%%: 1993-block  7
    %%%%%: 1993-block  8
    %%%%%: 1993-block  9
        -: 1994:      }
        -: 1995:
        -: 1996:      template<typename _Out>
        -: 1997:	typename basic_format_context<_Out, _CharT>::iterator
    #####: 1998:	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
    #####: 1999:	{ return _M_f.format(__u, __fc); }
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<unsigned long long, char>::format<std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<unsigned long long, char>::format<std::__format::_Sink_iter<char> >(unsigned long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1998:	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
    #####: 1999:	{ return _M_f.format(__u, __fc); }
    %%%%%: 1999-block  0
call    0 never executed
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<long long, char>::format<std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<long long, char>::format<std::__format::_Sink_iter<char> >(long long, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1998:	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
    #####: 1999:	{ return _M_f.format(__u, __fc); }
    %%%%%: 1999-block  0
call    0 never executed
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<unsigned int, char>::format<std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<unsigned int, char>::format<std::__format::_Sink_iter<char> >(unsigned int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1998:	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
    #####: 1999:	{ return _M_f.format(__u, __fc); }
    %%%%%: 1999-block  0
call    0 never executed
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<int, char>::format<std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<int, char>::format<std::__format::_Sink_iter<char> >(int, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1998:	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
    #####: 1999:	{ return _M_f.format(__u, __fc); }
    %%%%%: 1999-block  0
call    0 never executed
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<bool, char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<bool, char>::format<std::__format::_Sink_iter<char> >(bool, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 1998:	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
    #####: 1999:	{ return _M_f.format(__u, __fc); }
    %%%%%: 1999-block  0
call    0 never executed
------------------
        -: 2000:
        -: 2001:    private:
        -: 2002:      __format::__formatter_int<_CharT> _M_f;
        -: 2003:    };
        -: 2004:
        -: 2005:#if defined __SIZEOF_INT128__ && defined __STRICT_ANSI__
        -: 2006:  template<typename _Tp, __format::__char _CharT>
        -: 2007:    requires (__is_one_of<_Tp, __int128, unsigned __int128>::value)
        -: 2008:    struct formatter<_Tp, _CharT>
        -: 2009:    {
        -: 2010:      formatter() = default;
        -: 2011:
        -: 2012:      [[__gnu__::__always_inline__]]
        -: 2013:      constexpr typename basic_format_parse_context<_CharT>::iterator
        -: 2014:      parse(basic_format_parse_context<_CharT>& __pc)
        -: 2015:      {
    #####: 2016:	return _M_f.template _M_parse<_Tp>(__pc);
    %%%%%: 2016-block  0
    %%%%%: 2016-block  1
    %%%%%: 2016-block  2
    %%%%%: 2016-block  3
        -: 2017:      }
        -: 2018:
        -: 2019:      template<typename _Out>
        -: 2020:	typename basic_format_context<_Out, _CharT>::iterator
    #####: 2021:	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
    #####: 2022:	{ return _M_f.format(__u, __fc); }
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<unsigned __int128, char>::format<std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<unsigned __int128, char>::format<std::__format::_Sink_iter<char> >(unsigned __int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 2021:	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
    #####: 2022:	{ return _M_f.format(__u, __fc); }
    %%%%%: 2022-block  0
call    0 never executed
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<__int128, char>::format<std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<__int128, char>::format<std::__format::_Sink_iter<char> >(__int128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 2021:	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
    #####: 2022:	{ return _M_f.format(__u, __fc); }
    %%%%%: 2022-block  0
call    0 never executed
------------------
        -: 2023:
        -: 2024:    private:
        -: 2025:      __format::__formatter_int<_CharT> _M_f;
        -: 2026:    };
        -: 2027:#endif
        -: 2028:
        -: 2029:  /// Format a floating-point value.
        -: 2030:  template<__format::__formattable_float _Tp, __format::__char _CharT>
        -: 2031:    struct formatter<_Tp, _CharT>
        -: 2032:    {
        -: 2033:      formatter() = default;
        -: 2034:
        -: 2035:      [[__gnu__::__always_inline__]]
        -: 2036:      constexpr typename basic_format_parse_context<_CharT>::iterator
        -: 2037:      parse(basic_format_parse_context<_CharT>& __pc)
    #####: 2038:      { return _M_f.parse(__pc); }
    %%%%%: 2038-block  0
    %%%%%: 2038-block  1
    %%%%%: 2038-block  2
    %%%%%: 2038-block  3
    %%%%%: 2038-block  4
    %%%%%: 2038-block  5
    %%%%%: 2038-block  6
    %%%%%: 2038-block  7
        -: 2039:
        -: 2040:      template<typename _Out>
        -: 2041:	typename basic_format_context<_Out, _CharT>::iterator
    #####: 2042:	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
    #####: 2043:	{ return _M_f.format(__u, __fc); }
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<_Float128, char>::format<std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<_Float128, char>::format<std::__format::_Sink_iter<char> >(_Float128, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 2042:	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
    #####: 2043:	{ return _M_f.format(__u, __fc); }
    %%%%%: 2043-block  0
call    0 never executed
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<long double, char>::format<std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<long double, char>::format<std::__format::_Sink_iter<char> >(long double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 2042:	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
    #####: 2043:	{ return _M_f.format(__u, __fc); }
    %%%%%: 2043-block  0
call    0 never executed
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<double, char>::format<std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<double, char>::format<std::__format::_Sink_iter<char> >(double, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 2042:	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
    #####: 2043:	{ return _M_f.format(__u, __fc); }
    %%%%%: 2043-block  0
call    0 never executed
------------------
std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<float, char>::format<std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<float, char>::format<std::__format::_Sink_iter<char> >(float, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 2042:	format(_Tp __u, basic_format_context<_Out, _CharT>& __fc) const
    #####: 2043:	{ return _M_f.format(__u, __fc); }
    %%%%%: 2043-block  0
call    0 never executed
------------------
        -: 2044:
        -: 2045:    private:
        -: 2046:      __format::__formatter_fp<_CharT> _M_f;
        -: 2047:    };
        -: 2048:
        -: 2049:  /** Format a pointer.
        -: 2050:   * @{
        -: 2051:   */
        -: 2052:  template<__format::__char _CharT>
        -: 2053:    struct formatter<const void*, _CharT>
        -: 2054:    {
        -: 2055:      formatter() = default;
        -: 2056:
        -: 2057:      constexpr typename basic_format_parse_context<_CharT>::iterator
function std::formatter<void const*, char>::parse(std::basic_format_parse_context<char>&) called 0 returned 0% blocks executed 0%
    #####: 2058:      parse(basic_format_parse_context<_CharT>& __pc)
        -: 2059:      {
    #####: 2060:	__format::_Spec<_CharT> __spec{};
    #####: 2061:	const auto __last = __pc.end();
    %%%%%: 2061-block  0
call    0 never executed
    #####: 2062:	auto __first = __pc.begin();
call    0 never executed
        -: 2063:
function std::formatter<void const*, char>::parse(std::basic_format_parse_context<char>&)::{lambda()#1}::operator()() const called 0 returned 0% blocks executed 0%
    #####: 2064:	auto __finalize = [this, &__spec] {
    #####: 2065:	  _M_spec = __spec;
        -: 2066:	};
        -: 2067:
function std::formatter<void const*, char>::parse(std::basic_format_parse_context<char>&)::{lambda()#2}::operator()() const called 0 returned 0% blocks executed 0%
    #####: 2068:	auto __finished = [&] {
    #####: 2069:	  if (__first == __last || *__first == '}')
    %%%%%: 2069-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2069-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 2070:	    {
    #####: 2071:	      __finalize();
    %%%%%: 2071-block  0
call    0 never executed
    #####: 2072:	      return true;
        -: 2073:	    }
    #####: 2074:	  return false;
    %%%%%: 2074-block  0
        -: 2075:	};
        -: 2076:
    #####: 2077:	if (__finished())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2078:	  return __first;
    %%%%%: 2078-block  0
        -: 2079:
    #####: 2080:	__first = __spec._M_parse_fill_and_align(__first, __last);
    %%%%%: 2080-block  0
call    0 never executed
    #####: 2081:	if (__finished())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2082:	  return __first;
    %%%%%: 2082-block  0
        -: 2083:
        -: 2084:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 2085:	// P2519R3 Formatting pointers
    #####: 2086:	__first = __spec._M_parse_zero_fill(__first, __last);
    %%%%%: 2086-block  0
call    0 never executed
    #####: 2087:	if (__finished())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2088:	  return __first;
    %%%%%: 2088-block  0
        -: 2089:
    #####: 2090:	__first = __spec._M_parse_width(__first, __last, __pc);
    %%%%%: 2090-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2091:
    #####: 2092:	if (__first != __last && (*__first == 'p' || *__first == 'P'))
    %%%%%: 2092-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2092-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 2092-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
        -: 2093:	  {
    #####: 2094:	    if (*__first == 'P')
    %%%%%: 2094-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2095:	      __spec._M_type = __format::_Pres_P;
    %%%%%: 2095-block  0
    #####: 2096:	    ++__first;
    %%%%%: 2096-block  0
        -: 2097:	  }
        -: 2098:
    #####: 2099:	if (__finished())
    %%%%%: 2099-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2100:	  return __first;
    %%%%%: 2100-block  0
        -: 2101:
    #####: 2102:	__format::__failed_to_parse_format_spec();
    %%%%%: 2102-block  0
call    0 never executed
        -: 2103:      }
        -: 2104:
        -: 2105:      template<typename _Out>
        -: 2106:	typename basic_format_context<_Out, _CharT>::iterator
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::iterator std::formatter<void const*, char>::format<std::__format::_Sink_iter<char> >(void const*, std::basic_format_context<std::__format::_Sink_iter<char>, char>&) const called 0 returned 0% blocks executed 0%
    #####: 2107:	format(const void* __v, basic_format_context<_Out, _CharT>& __fc) const
        -: 2108:	{
    #####: 2109:	  auto __u = reinterpret_cast<__UINT64_TYPE__>(__v);
    %%%%%: 2109-block  0
        -: 2110:	  char __buf[2 + sizeof(__v) * 2];
    #####: 2111:	  auto [__ptr, __ec] = std::to_chars(__buf + 2, std::end(__buf),
    %%%%%: 2111-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2112:					     __u, 16);
    #####: 2113:	  const int __n = __ptr - __buf;
    #####: 2114:	  __buf[0] = '0';
    #####: 2115:	  __buf[1] = 'x';
        -: 2116:
    #####: 2117:	  basic_string_view<_CharT> __str;
        -: 2118:	  if constexpr (is_same_v<_CharT, char>)
    #####: 2119:	    __str = string_view(__buf, __n);
    %%%%%: 2119-block  0
call    0 never executed
        -: 2120:	  else
        -: 2121:	    {
        -: 2122:	      const std::locale& __loc = __fc.locale();
        -: 2123:	      auto& __ct = use_facet<ctype<_CharT>>(__loc);
        -: 2124:	      auto __p = (_CharT*)__builtin_alloca(__n * sizeof(_CharT));
        -: 2125:	      __ct.widen(__buf, __buf + __n, __p);
        -: 2126:	      __str = wstring_view(__p, __n);
        -: 2127:	    }
        -: 2128:
    #####: 2129:	  return __format::__write_padded_as_spec(__str, __n, __fc, _M_spec,
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2130:						  __format::_Align_right);
    %%%%%: 2130-block  0
    %%%%%: 2130-block  1
        -: 2131:	}
        -: 2132:
        -: 2133:    private:
        -: 2134:      __format::_Spec<_CharT> _M_spec{};
        -: 2135:    };
        -: 2136:
        -: 2137:  template<__format::__char _CharT>
        -: 2138:    struct formatter<void*, _CharT>
        -: 2139:    {
        -: 2140:      formatter() = default;
        -: 2141:
        -: 2142:      [[__gnu__::__always_inline__]]
        -: 2143:      constexpr typename basic_format_parse_context<_CharT>::iterator
        -: 2144:      parse(basic_format_parse_context<_CharT>& __pc)
        -: 2145:      { return _M_f.parse(__pc); }
        -: 2146:
        -: 2147:      template<typename _Out>
        -: 2148:	typename basic_format_context<_Out, _CharT>::iterator
        -: 2149:	format(void* __v, basic_format_context<_Out, _CharT>& __fc) const
        -: 2150:	{ return _M_f.format(__v, __fc); }
        -: 2151:
        -: 2152:    private:
        -: 2153:      formatter<const void*, _CharT> _M_f;
        -: 2154:    };
        -: 2155:
        -: 2156:  template<__format::__char _CharT>
        -: 2157:    struct formatter<nullptr_t, _CharT>
        -: 2158:    {
        -: 2159:      formatter() = default;
        -: 2160:
        -: 2161:      [[__gnu__::__always_inline__]]
        -: 2162:      constexpr typename basic_format_parse_context<_CharT>::iterator
        -: 2163:      parse(basic_format_parse_context<_CharT>& __pc)
        -: 2164:      { return _M_f.parse(__pc); }
        -: 2165:
        -: 2166:      template<typename _Out>
        -: 2167:	typename basic_format_context<_Out, _CharT>::iterator
        -: 2168:	format(nullptr_t, basic_format_context<_Out, _CharT>& __fc) const
        -: 2169:	{ return _M_f.format(nullptr, __fc); }
        -: 2170:
        -: 2171:    private:
        -: 2172:      formatter<const void*, _CharT> _M_f;
        -: 2173:    };
        -: 2174:  /// @}
        -: 2175:
        -: 2176:
        -: 2177:/// @cond undocumented
        -: 2178:namespace __format
        -: 2179:{
        -: 2180:  template<typename _Tp, typename _Context,
        -: 2181:	   typename _Formatter
        -: 2182:	     = typename _Context::template formatter_type<remove_const_t<_Tp>>,
        -: 2183:	   typename _ParseContext
        -: 2184:	     = basic_format_parse_context<typename _Context::char_type>>
        -: 2185:    concept __parsable_with
        -: 2186:      = semiregular<_Formatter>
        -: 2187:	  && requires (_Formatter __f, _ParseContext __pc)
        -: 2188:    {
        -: 2189:      { __f.parse(__pc) } -> same_as<typename _ParseContext::iterator>;
        -: 2190:    };
        -: 2191:
        -: 2192:  template<typename _Tp, typename _Context,
        -: 2193:	   typename _Formatter
        -: 2194:	     = typename _Context::template formatter_type<remove_const_t<_Tp>>,
        -: 2195:	   typename _ParseContext
        -: 2196:	     = basic_format_parse_context<typename _Context::char_type>>
        -: 2197:    concept __formattable_with
        -: 2198:      = semiregular<_Formatter>
        -: 2199:	  && requires (const _Formatter __cf, _Tp&& __t, _Context __fc)
        -: 2200:    {
        -: 2201:      { __cf.format(__t, __fc) } -> same_as<typename _Context::iterator>;
        -: 2202:    };
        -: 2203:
        -: 2204:  // An unspecified output iterator type used in the `formattable` concept.
        -: 2205:  template<typename _CharT>
        -: 2206:    using _Iter_for = back_insert_iterator<basic_string<_CharT>>;
        -: 2207:
        -: 2208:  template<typename _Tp, typename _CharT,
        -: 2209:	   typename _Context = basic_format_context<_Iter_for<_CharT>, _CharT>>
        -: 2210:    concept __formattable_impl
        -: 2211:      = __parsable_with<_Tp, _Context> && __formattable_with<_Tp, _Context>;
        -: 2212:
        -: 2213:} // namespace __format
        -: 2214:/// @endcond
        -: 2215:
        -: 2216:#if __cplusplus > 202002L
        -: 2217:  // [format.formattable], concept formattable
        -: 2218:  template<typename _Tp, typename _CharT>
        -: 2219:    concept formattable
        -: 2220:      = __format::__formattable_impl<remove_reference_t<_Tp>, _CharT>;
        -: 2221:#endif
        -: 2222:
        -: 2223:#if __cpp_lib_format_ranges
        -: 2224:  /// @cond undocumented
        -: 2225:namespace __format
        -: 2226:{
        -: 2227:  template<typename _Rg, typename _CharT>
        -: 2228:    concept __const_formattable_range
        -: 2229:      = ranges::input_range<const _Rg>
        -: 2230:	  && formattable<ranges::range_reference_t<const _Rg>, _CharT>;
        -: 2231:
        -: 2232:  template<typename _Rg, typename _CharT>
        -: 2233:    using __maybe_const_range
        -: 2234:      = conditional_t<__const_formattable_range<_Rg, _CharT>, const _Rg, _Rg>;
        -: 2235:} // namespace __format
        -: 2236:  /// @endcond
        -: 2237:#endif // format_ranges
        -: 2238:
        -: 2239:  /// An iterator after the last character written, and the number of
        -: 2240:  /// characters that would have been written.
        -: 2241:  template<typename _Out>
        -: 2242:    struct format_to_n_result
        -: 2243:    {
        -: 2244:      _Out out;
        -: 2245:      iter_difference_t<_Out> size;
        -: 2246:    };
        -: 2247:
        -: 2248:/// @cond undocumented
        -: 2249:namespace __format
        -: 2250:{
        -: 2251:  template<typename _CharT>
        -: 2252:    class _Sink_iter
        -: 2253:    {
        -: 2254:      _Sink<_CharT>* _M_sink = nullptr;
        -: 2255:
        -: 2256:    public:
        -: 2257:      using iterator_category = output_iterator_tag;
        -: 2258:      using value_type = void;
        -: 2259:      using difference_type = ptrdiff_t;
        -: 2260:      using pointer = void;
        -: 2261:      using reference = void;
        -: 2262:
        -: 2263:      _Sink_iter() = default;
        -: 2264:      _Sink_iter(const _Sink_iter&) = default;
        -: 2265:      _Sink_iter& operator=(const _Sink_iter&) = default;
        -: 2266:
        -: 2267:      [[__gnu__::__always_inline__]]
        -: 2268:      explicit constexpr
    #####: 2269:      _Sink_iter(_Sink<_CharT>& __sink) : _M_sink(std::addressof(__sink)) { }
call    0 never executed
        -: 2270:
        -: 2271:      [[__gnu__::__always_inline__]]
        -: 2272:      constexpr _Sink_iter&
        -: 2273:      operator=(_CharT __c)
        -: 2274:      {
    #####: 2275:	_M_sink->_M_write(__c);
    %%%%%: 2275-block  0
call    0 never executed
    %%%%%: 2275-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2275-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2275-block  3
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 2275-block  4
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    #####: 2276:	return *this;
    %%%%%: 2276-block  0
    %%%%%: 2276-block  1
    %%%%%: 2276-block  2
    %%%%%: 2276-block  3
        -: 2277:      }
        -: 2278:
        -: 2279:      [[__gnu__::__always_inline__]]
        -: 2280:      constexpr _Sink_iter&
        -: 2281:      operator=(basic_string_view<_CharT> __s)
        -: 2282:      {
    #####: 2283:	_M_sink->_M_write(__s);
    %%%%%: 2283-block  0
call    0 never executed
    #####: 2284:	return *this;
        -: 2285:      }
        -: 2286:
        -: 2287:      [[__gnu__::__always_inline__]]
        -: 2288:      constexpr _Sink_iter&
    #####: 2289:      operator*() { return *this; }
    %%%%%: 2289-block  0
    %%%%%: 2289-block  1
    %%%%%: 2289-block  2
    %%%%%: 2289-block  3
    %%%%%: 2289-block  4
        -: 2290:
        -: 2291:      [[__gnu__::__always_inline__]]
        -: 2292:      constexpr _Sink_iter&
    #####: 2293:      operator++() { return *this; }
    %%%%%: 2293-block  0
        -: 2294:
        -: 2295:      [[__gnu__::__always_inline__]]
        -: 2296:      constexpr _Sink_iter
    #####: 2297:      operator++(int) { return *this; }
        -: 2298:    };
        -: 2299:
        -: 2300:  // Abstract base class for type-erased character sinks.
        -: 2301:  // All formatting and output is done via this type's iterator,
        -: 2302:  // to reduce the number of different template instantiations.
        -: 2303:  template<typename _CharT>
        -: 2304:    class _Sink
        -: 2305:    {
        -: 2306:      friend class _Sink_iter<_CharT>;
        -: 2307:
        -: 2308:      span<_CharT> _M_span;
        -: 2309:      typename span<_CharT>::iterator _M_next;
        -: 2310:
        -: 2311:      // Called when the span is full, to make more space available.
        -: 2312:      // Precondition: _M_next != _M_span.begin()
        -: 2313:      // Postcondition: _M_next != _M_span.end()
        -: 2314:      virtual void _M_overflow() = 0;
        -: 2315:
        -: 2316:    protected:
        -: 2317:      // Precondition: __span.size() != 0
        -: 2318:      [[__gnu__::__always_inline__]]
        -: 2319:      explicit constexpr
    #####: 2320:      _Sink(span<_CharT> __span) noexcept
    #####: 2321:      : _M_span(__span), _M_next(__span.begin())
call    0 never executed
call    1 never executed
    #####: 2322:      { }
        -: 2323:
        -: 2324:      // The portion of the span that has been written to.
        -: 2325:      [[__gnu__::__always_inline__]]
        -: 2326:      span<_CharT>
        -: 2327:      _M_used() const noexcept
    #####: 2328:      { return _M_span.first(_M_next - _M_span.begin()); }
call    0 never executed
call    1 never executed
    %%%%%: 2328-block  0
call    2 never executed
call    3 never executed
    %%%%%: 2328-block  1
        -: 2329:
        -: 2330:      // The portion of the span that has not been written to.
        -: 2331:      [[__gnu__::__always_inline__]]
        -: 2332:      constexpr span<_CharT>
        -: 2333:      _M_unused() const noexcept
    #####: 2334:      { return _M_span.subspan(_M_next - _M_span.begin()); }
call    0 never executed
call    1 never executed
    %%%%%: 2334-block  0
    %%%%%: 2334-block  1
call    2 never executed
call    3 never executed
call    4 never executed
    %%%%%: 2334-block  2
        -: 2335:
        -: 2336:      // Use the start of the span as the next write position.
        -: 2337:      [[__gnu__::__always_inline__]]
        -: 2338:      constexpr void
        -: 2339:      _M_rewind() noexcept
    #####: 2340:      { _M_next = _M_span.begin(); }
        -: 2341:
        -: 2342:      // Replace the current output range.
        -: 2343:      void
        -: 2344:      _M_reset(span<_CharT> __s,
        -: 2345:	       typename span<_CharT>::iterator __next) noexcept
        -: 2346:      {
        -: 2347:	_M_span = __s;
        -: 2348:	_M_next = __next;
        -: 2349:      }
        -: 2350:
        -: 2351:      // Called by the iterator for *it++ = c
        -: 2352:      constexpr void
function std::__format::_Sink<char>::_M_write(char) called 0 returned 0% blocks executed 0%
    #####: 2353:      _M_write(_CharT __c)
        -: 2354:      {
    #####: 2355:	*_M_next++ = __c;
    %%%%%: 2355-block  0
call    0 never executed
call    1 never executed
    #####: 2356:	if (_M_next - _M_span.begin() == std::ssize(_M_span)) [[unlikely]]
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%: 2356-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 2357:	  _M_overflow();
    %%%%%: 2357-block  0
call    0 never executed
    #####: 2358:      }
        -: 2359:
        -: 2360:      constexpr void
function std::__format::_Sink<char>::_M_write(std::basic_string_view<char, std::char_traits<char> >) called 0 returned 0% blocks executed 0%
    #####: 2361:      _M_write(basic_string_view<_CharT> __s)
    %%%%%: 2361-block  0
call    0 never executed
        -: 2362:      {
    #####: 2363:	span __to = _M_unused();
    #####: 2364:	while (__to.size() <= __s.size())
    %%%%%: 2364-block  0
    %%%%%: 2364-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
        -: 2365:	  {
    #####: 2366:	    __s.copy(__to.data(), __to.size());
    %%%%%: 2366-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 2367:	    _M_next += __to.size();
    %%%%%: 2367-block  0
call    0 never executed
call    1 never executed
    #####: 2368:	    __s.remove_prefix(__to.size());
call    0 never executed
call    1 never executed
    #####: 2369:	    _M_overflow();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2370:	    __to = _M_unused();
    %%%%%: 2370-block  0
        -: 2371:	  }
    #####: 2372:	if (__s.size())
    %%%%%: 2372-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 2373:	  {
    #####: 2374:	    __s.copy(__to.data(), __s.size());
    %%%%%: 2374-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 2375:	    _M_next += __s.size();
    %%%%%: 2375-block  0
call    0 never executed
call    1 never executed
        -: 2376:	  }
    #####: 2377:      }
    %%%%%: 2377-block  0
        -: 2378:
        -: 2379:    public:
        -: 2380:      _Sink(const _Sink&) = delete;
        -: 2381:      _Sink& operator=(const _Sink&) = delete;
        -: 2382:
        -: 2383:      [[__gnu__::__always_inline__]]
        -: 2384:      constexpr _Sink_iter<_CharT>
        -: 2385:      out() noexcept
    #####: 2386:      { return _Sink_iter<_CharT>(*this); }
    %%%%%: 2386-block  0
    %%%%%: 2386-block  1
    %%%%%: 2386-block  2
        -: 2387:    };
        -: 2388:
        -: 2389:  // A sink with an internal buffer. This is used to implement concrete sinks.
        -: 2390:  template<typename _CharT>
        -: 2391:    class _Buf_sink : public _Sink<_CharT>
        -: 2392:    {
        -: 2393:    protected:
        -: 2394:      _CharT _M_buf[32 * sizeof(void*) / sizeof(_CharT)];
        -: 2395:
        -: 2396:      [[__gnu__::__always_inline__]]
        -: 2397:      constexpr
    #####: 2398:      _Buf_sink() noexcept
    #####: 2399:      : _Sink<_CharT>(_M_buf)
    #####: 2400:      { }
    %%%%%: 2400-block  0
    %%%%%: 2400-block  1
        -: 2401:    };
        -: 2402:
        -: 2403:  // A sink that fills a sequence (e.g. std::string, std::vector, std::deque).
        -: 2404:  // Writes to a buffer then appends that to the sequence when it fills up.
        -: 2405:  template<typename _Seq>
        -: 2406:    class _Seq_sink : public _Buf_sink<typename _Seq::value_type>
        -: 2407:    {
        -: 2408:      using _CharT = typename _Seq::value_type;
        -: 2409:
        -: 2410:      _Seq _M_seq;
        -: 2411:
        -: 2412:      // Transfer buffer contents to the sequence, so buffer can be refilled.
        -: 2413:      void
function std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_overflow() called 0 returned 0% blocks executed 0%
    #####: 2414:      _M_overflow() override
        -: 2415:      {
    #####: 2416:	auto __s = this->_M_used();
    %%%%%: 2416-block  0
call    0 never executed
        -: 2417:	if constexpr (__is_specialization_of<_Seq, basic_string>)
    #####: 2418:	  _M_seq.append(__s.data(), __s.size());
    %%%%%: 2418-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 2419:	else
        -: 2420:	  _M_seq.insert(_M_seq.end(), __s.begin(), __s.end());
    #####: 2421:	this->_M_rewind();
    %%%%%: 2421-block  0
call    0 never executed
    #####: 2422:      }
        -: 2423:
        -: 2424:    public:
        -: 2425:      [[__gnu__::__always_inline__]]
    #####: 2426:      _Seq_sink() noexcept(is_nothrow_default_constructible_v<_Seq>)
    #####: 2427:      { }
    %%%%%: 2427-block  0
call    0 never executed
        -: 2428:
        -: 2429:      _Seq_sink(_Seq&& __s) noexcept(is_nothrow_move_constructible_v<_Seq>)
        -: 2430:      : _M_seq(std::move(__s))
        -: 2431:      { }
        -: 2432:
        -: 2433:      using _Sink<_CharT>::out;
        -: 2434:
        -: 2435:      _Seq
function std::__format::_Seq_sink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::get() && called 0 returned 0% blocks executed 0%
    #####: 2436:      get() &&
        -: 2437:      {
    #####: 2438:	_Seq_sink::_M_overflow();
    %%%%%: 2438-block  0
call    0 never executed
    #####: 2439:	return std::move(_M_seq);
call    0 never executed
call    1 never executed
        -: 2440:      }
        -: 2441:    };
        -: 2442:
        -: 2443:  template<typename _CharT, typename _Alloc = allocator<_CharT>>
        -: 2444:    using _Str_sink
        -: 2445:      = _Seq_sink<basic_string<_CharT, char_traits<_CharT>, _Alloc>>;
        -: 2446:
        -: 2447:  // template<typename _CharT, typename _Alloc = allocator<_CharT>>
        -: 2448:    // using _Vec_sink = _Seq_sink<vector<_CharT, _Alloc>>;
        -: 2449:
        -: 2450:  // A sink that writes to an output iterator.
        -: 2451:  // Writes to a fixed-size buffer and then flushes to the output iterator
        -: 2452:  // when the buffer fills up.
        -: 2453:  template<typename _CharT, typename _OutIter>
        -: 2454:    class _Iter_sink : public _Buf_sink<_CharT>
        -: 2455:    {
        -: 2456:      _OutIter _M_out;
        -: 2457:      iter_difference_t<_OutIter> _M_max;
        -: 2458:
        -: 2459:    protected:
        -: 2460:      size_t _M_count = 0;
        -: 2461:
        -: 2462:      void
function std::__format::_Iter_sink<char, std::__format::_Sink_iter<char> >::_M_overflow() called 0 returned 0% blocks executed 0%
    #####: 2463:      _M_overflow() override
        -: 2464:      {
    #####: 2465:	auto __s = this->_M_used();
    %%%%%: 2465-block  0
call    0 never executed
    #####: 2466:	if (_M_max < 0) // No maximum.
    %%%%%: 2466-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2467:	  _M_out = ranges::copy(__s, std::move(_M_out)).out;
    %%%%%: 2467-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2467-block  1
    $$$$$: 2467-block  2
    #####: 2468:	else if (_M_count < static_cast<size_t>(_M_max))
    %%%%%: 2468-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2469:	  {
    #####: 2470:	    auto __max = _M_max - _M_count;
    #####: 2471:	    span<_CharT> __first;
    #####: 2472:	    if (__max < __s.size())
    %%%%%: 2472-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2473:	      __first = __s.first(static_cast<size_t>(__max));
    %%%%%: 2473-block  0
call    0 never executed
        -: 2474:	    else
    #####: 2475:	      __first = __s;
    %%%%%: 2475-block  0
    #####: 2476:	    _M_out = ranges::copy(__first, std::move(_M_out)).out;
    %%%%%: 2476-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2476-block  1
    $$$$$: 2476-block  2
        -: 2477:	  }
    #####: 2478:	this->_M_rewind();
    %%%%%: 2478-block  0
call    0 never executed
    #####: 2479:	_M_count += __s.size();
call    0 never executed
    #####: 2480:      }
        -: 2481:
        -: 2482:    public:
        -: 2483:      [[__gnu__::__always_inline__]]
        -: 2484:      explicit
    #####: 2485:      _Iter_sink(_OutIter __out, iter_difference_t<_OutIter> __max = -1)
    #####: 2486:      : _M_out(std::move(__out)), _M_max(__max)
call    0 never executed
    %%%%%: 2486-block  0
call    1 never executed
    #####: 2487:      { }
        -: 2488:
        -: 2489:      using _Sink<_CharT>::out;
        -: 2490:
        -: 2491:      format_to_n_result<_OutIter>
        -: 2492:      _M_finish() &&
        -: 2493:      {
        -: 2494:	_Iter_sink::_M_overflow();
        -: 2495:	iter_difference_t<_OutIter> __count(_M_count);
        -: 2496:	return { std::move(_M_out), __count };
        -: 2497:      }
        -: 2498:    };
        -: 2499:
        -: 2500:  // Partial specialization for contiguous iterators.
        -: 2501:  // No buffer is used, characters are written straight to the iterator.
        -: 2502:  // We do not know the size of the output range, so the span size just grows
        -: 2503:  // as needed. The end of the span might be an invalid pointer outside the
        -: 2504:  // valid range, but we never actually call _M_span.end(). This class does
        -: 2505:  // not introduce any invalid pointer arithmetic or overflows that would not
        -: 2506:  // have happened anyway.
        -: 2507:  template<typename _CharT, contiguous_iterator _OutIter>
        -: 2508:    class _Iter_sink<_CharT, _OutIter> : public _Sink<_CharT>
        -: 2509:    {
        -: 2510:      using uint64_t = __UINTPTR_TYPE__;
        -: 2511:      _OutIter _M_first;
        -: 2512:      iter_difference_t<_OutIter> _M_max = -1;
        -: 2513:    protected:
        -: 2514:      size_t _M_count = 0;
        -: 2515:    private:
        -: 2516:      _CharT _M_buf[64]; // Write here after outputting _M_max characters.
        -: 2517:
        -: 2518:    protected:
        -: 2519:      void
        -: 2520:      _M_overflow()
        -: 2521:      {
        -: 2522:	auto __s = this->_M_used();
        -: 2523:	_M_count += __s.size();
        -: 2524:
        -: 2525:	if (_M_max >= 0)
        -: 2526:	  {
        -: 2527:	    // Span was already sized for the maximum character count,
        -: 2528:	    // if it overflows then any further output must go to the
        -: 2529:	    // internal buffer, to be discarded.
        -: 2530:	    span<_CharT> __buf{_M_buf};
        -: 2531:	    this->_M_reset(__buf, __buf.begin());
        -: 2532:	  }
        -: 2533:	else
        -: 2534:	  {
        -: 2535:	    // No maximum character count. Just extend the span to allow
        -: 2536:	    // writing more characters to it.
        -: 2537:	    this->_M_reset({__s.data(), __s.size() + 1024}, __s.end());
        -: 2538:	  }
        -: 2539:      }
        -: 2540:
        -: 2541:    private:
        -: 2542:      static span<_CharT>
        -: 2543:      _S_make_span(_CharT* __ptr, iter_difference_t<_OutIter> __n,
        -: 2544:		   span<_CharT> __buf) noexcept
        -: 2545:      {
        -: 2546:	if (__n == 0)
        -: 2547:	  return __buf; // Only write to the internal buffer.
        -: 2548:
        -: 2549:	if (__n > 0)
        -: 2550:	  {
        -: 2551:	    if constexpr (!is_integral_v<iter_difference_t<_OutIter>>
        -: 2552:			    || sizeof(__n) > sizeof(size_t))
        -: 2553:	      {
        -: 2554:		// __int128 or __detail::__max_diff_type
        -: 2555:		auto __m = iter_difference_t<_OutIter>((size_t)-1);
        -: 2556:		if (__n > __m)
        -: 2557:		  __n = __m;
        -: 2558:	      }
        -: 2559:	    return {__ptr, (size_t)__n};
        -: 2560:	  }
        -: 2561:
        -: 2562:#if __has_builtin(__builtin_dynamic_object_size)
        -: 2563:	if (size_t __bytes = __builtin_dynamic_object_size(__ptr, 2))
        -: 2564:	  return {__ptr, __bytes / sizeof(_CharT)};
        -: 2565:#endif
        -: 2566:	// Avoid forming a pointer to a different memory page.
        -: 2567:	uint64_t __off = reinterpret_cast<uint64_t>(__ptr) % 1024;
        -: 2568:	__n = (1024 - __off) / sizeof(_CharT);
        -: 2569:	if (__n > 0) [[likely]]
        -: 2570:	return {__ptr, static_cast<size_t>(__n)};
        -: 2571:	else // Misaligned/packed buffer of wchar_t?
        -: 2572:	  return {__ptr, 1};
        -: 2573:      }
        -: 2574:
        -: 2575:    public:
        -: 2576:      explicit
        -: 2577:      _Iter_sink(_OutIter __out, iter_difference_t<_OutIter> __n = -1) noexcept
        -: 2578:      : _Sink<_CharT>(_S_make_span(std::to_address(__out), __n, _M_buf)),
        -: 2579:	_M_first(__out), _M_max(__n)
        -: 2580:      { }
        -: 2581:
        -: 2582:      format_to_n_result<_OutIter>
        -: 2583:      _M_finish() &&
        -: 2584:      {
        -: 2585:	_Iter_sink::_M_overflow();
        -: 2586:	iter_difference_t<_OutIter> __count(_M_count);
        -: 2587:	auto __s = this->_M_used();
        -: 2588:	auto __last = _M_first;
        -: 2589:	if (__s.data() == _M_buf) // Wrote at least _M_max characters.
        -: 2590:	  __last += _M_max;
        -: 2591:	else
        -: 2592:	  __last += iter_difference_t<_OutIter>(__s.size());
        -: 2593:	return { __last, __count };
        -: 2594:      }
        -: 2595:    };
        -: 2596:
        -: 2597:  enum _Arg_t : unsigned char {
        -: 2598:    _Arg_none, _Arg_bool, _Arg_c, _Arg_i, _Arg_u, _Arg_ll, _Arg_ull,
        -: 2599:    _Arg_flt, _Arg_dbl, _Arg_ldbl, _Arg_str, _Arg_sv, _Arg_ptr, _Arg_handle,
        -: 2600:    _Arg_i128, _Arg_u128,
        -: 2601:    _Arg_bf16, _Arg_f16, _Arg_f32, _Arg_f64,
        -: 2602:#ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT
        -: 2603:    _Arg_next_value_,
        -: 2604:    _Arg_f128 = _Arg_ldbl,
        -: 2605:    _Arg_ibm128 = _Arg_next_value_,
        -: 2606:#else
        -: 2607:    _Arg_f128,
        -: 2608:#endif
        -: 2609:    _Arg_max_
        -: 2610:  };
        -: 2611:
        -: 2612:  template<typename _Context>
        -: 2613:    struct _Arg_value
        -: 2614:    {
        -: 2615:      using _CharT = typename _Context::char_type;
        -: 2616:
        -: 2617:      struct _HandleBase
        -: 2618:      {
        -: 2619:	const void* _M_ptr;
        -: 2620:	void (*_M_func)();
        -: 2621:      };
        -: 2622:
        -: 2623:      union
        -: 2624:      {
        -: 2625:	monostate _M_none;
        -: 2626:	bool _M_bool;
        -: 2627:	_CharT _M_c;
        -: 2628:	int _M_i;
        -: 2629:	unsigned _M_u;
        -: 2630:	long long _M_ll;
        -: 2631:	unsigned long long _M_ull;
        -: 2632:	float _M_flt;
        -: 2633:	double _M_dbl;
        -: 2634:#ifndef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT // No long double if it's ambiguous.
        -: 2635:	long double _M_ldbl;
        -: 2636:#endif
        -: 2637:	const _CharT* _M_str;
        -: 2638:	basic_string_view<_CharT> _M_sv;
        -: 2639:	const void* _M_ptr;
        -: 2640:	_HandleBase _M_handle;
        -: 2641:#ifdef __SIZEOF_INT128__
        -: 2642:	__int128 _M_i128;
        -: 2643:	unsigned __int128 _M_u128;
        -: 2644:#endif
        -: 2645:	// TODO _Float16 etc.
        -: 2646:#ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT
        -: 2647:	__ieee128 _M_f128;
        -: 2648:	__ibm128  _M_ibm128;
        -: 2649:#elif _GLIBCXX_FORMAT_F128 == 2
        -: 2650:	__float128_t _M_f128;
        -: 2651:#endif
        -: 2652:      };
        -: 2653:
        -: 2654:      [[__gnu__::__always_inline__]]
    #####: 2655:      _Arg_value() : _M_none() { }
        -: 2656:
        -: 2657:#if 0
        -: 2658:      template<typename _Tp>
        -: 2659:	_Arg_value(in_place_type_t<_Tp>, _Tp __val)
        -: 2660:	{ _S_get<_Tp>() = __val; }
        -: 2661:#endif
        -: 2662:
        -: 2663:      template<typename _Tp, typename _Self>
        -: 2664:	[[__gnu__::__always_inline__]]
        -: 2665:	static auto&
        -: 2666:	_S_get(_Self& __u) noexcept
        -: 2667:	{
        -: 2668:	  if constexpr (is_same_v<_Tp, bool>)
        -: 2669:	    return __u._M_bool;
        -: 2670:	  else if constexpr (is_same_v<_Tp, _CharT>)
        -: 2671:	    return __u._M_c;
        -: 2672:	  else if constexpr (is_same_v<_Tp, int>)
    #####: 2673:	    return __u._M_i;
        -: 2674:	  else if constexpr (is_same_v<_Tp, unsigned>)
        -: 2675:	    return __u._M_u;
        -: 2676:	  else if constexpr (is_same_v<_Tp, long long>)
        -: 2677:	    return __u._M_ll;
        -: 2678:	  else if constexpr (is_same_v<_Tp, unsigned long long>)
        -: 2679:	    return __u._M_ull;
        -: 2680:	  else if constexpr (is_same_v<_Tp, float>)
        -: 2681:	    return __u._M_flt;
        -: 2682:	  else if constexpr (is_same_v<_Tp, double>)
        -: 2683:	    return __u._M_dbl;
        -: 2684:#ifndef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT
        -: 2685:	  else if constexpr (is_same_v<_Tp, long double>)
        -: 2686:	    return __u._M_ldbl;
        -: 2687:#else
        -: 2688:	  else if constexpr (is_same_v<_Tp, __ieee128>)
        -: 2689:	    return __u._M_f128;
        -: 2690:	  else if constexpr (is_same_v<_Tp, __ibm128>)
        -: 2691:	    return __u._M_ibm128;
        -: 2692:#endif
        -: 2693:	  else if constexpr (is_same_v<_Tp, const _CharT*>)
        -: 2694:	    return __u._M_str;
        -: 2695:	  else if constexpr (is_same_v<_Tp, basic_string_view<_CharT>>)
        -: 2696:	    return __u._M_sv;
        -: 2697:	  else if constexpr (is_same_v<_Tp, const void*>)
        -: 2698:	    return __u._M_ptr;
        -: 2699:#ifdef __SIZEOF_INT128__
        -: 2700:	  else if constexpr (is_same_v<_Tp, __int128>)
        -: 2701:	    return __u._M_i128;
        -: 2702:	  else if constexpr (is_same_v<_Tp, unsigned __int128>)
        -: 2703:	    return __u._M_u128;
        -: 2704:#endif
        -: 2705:#if _GLIBCXX_FORMAT_F128 == 2
        -: 2706:	  else if constexpr (is_same_v<_Tp, __float128_t>)
        -: 2707:	    return __u._M_f128;
        -: 2708:#endif
        -: 2709:	  else if constexpr (derived_from<_Tp, _HandleBase>)
        -: 2710:	    return static_cast<_Tp&>(__u._M_handle);
        -: 2711:	  // Otherwise, ill-formed.
        -: 2712:	}
        -: 2713:
        -: 2714:      template<typename _Tp>
        -: 2715:	[[__gnu__::__always_inline__]]
        -: 2716:	auto&
        -: 2717:	_M_get() noexcept
        -: 2718:	{ return _S_get<_Tp>(*this); }
        -: 2719:
        -: 2720:      template<typename _Tp>
        -: 2721:	[[__gnu__::__always_inline__]]
        -: 2722:	const auto&
        -: 2723:	_M_get() const noexcept
        -: 2724:	{ return _S_get<_Tp>(*this); }
        -: 2725:
        -: 2726:      template<typename _Tp>
        -: 2727:	[[__gnu__::__always_inline__]]
        -: 2728:	void
        -: 2729:	_M_set(_Tp __v) noexcept
        -: 2730:	{
        -: 2731:	  if constexpr (derived_from<_Tp, _HandleBase>)
        -: 2732:	    std::construct_at(&_M_handle, __v);
        -: 2733:	  else
    #####: 2734:	    _S_get<_Tp>(*this) = __v;
    #####: 2735:	}
    %%%%%: 2735-block  0
        -: 2736:      };
        -: 2737:
        -: 2738:  // [format.arg.store], class template format-arg-store
        -: 2739:  template<typename _Context, typename... _Args>
        -: 2740:    class _Arg_store;
        -: 2741:
        -: 2742:} // namespace __format
        -: 2743:/// @endcond
        -: 2744:
        -: 2745:  template<typename _Context>
        -: 2746:    class basic_format_arg
        -: 2747:    {
        -: 2748:      using _CharT = typename _Context::char_type;
        -: 2749:
        -: 2750:      template<typename _Tp>
        -: 2751:	static constexpr bool __formattable
        -: 2752:	  = __format::__formattable_with<_Tp, _Context>;
        -: 2753:
        -: 2754:    public:
        -: 2755:      class handle : public __format::_Arg_value<_Context>::_HandleBase
        -: 2756:      {
        -: 2757:	using _Base = typename __format::_Arg_value<_Context>::_HandleBase;
        -: 2758:
        -: 2759:	// Format as const if possible, to reduce instantiations.
        -: 2760:	template<typename _Tp>
        -: 2761:	  using __maybe_const_t
        -: 2762:	    = __conditional_t<__format::__formattable_with<_Tp, _Context>,
        -: 2763:			      const _Tp, _Tp>;
        -: 2764:
        -: 2765:	template<typename _Tq>
        -: 2766:	  static void
        -: 2767:	  _S_format(basic_format_parse_context<_CharT>& __parse_ctx,
        -: 2768:		    _Context& __format_ctx, const void* __ptr)
        -: 2769:	  {
        -: 2770:	    using _Td = remove_const_t<_Tq>;
        -: 2771:	    typename _Context::template formatter_type<_Td> __f;
        -: 2772:	    __parse_ctx.advance_to(__f.parse(__parse_ctx));
        -: 2773:	    _Tq& __val = *const_cast<_Tq*>(static_cast<const _Td*>(__ptr));
        -: 2774:	    __format_ctx.advance_to(__f.format(__val, __format_ctx));
        -: 2775:	  }
        -: 2776:
        -: 2777:	template<typename _Tp>
        -: 2778:	  explicit
        -: 2779:	  handle(_Tp& __val) noexcept
        -: 2780:	  {
        -: 2781:	    if constexpr (!__format::__formattable_with<const _Tp, _Context>)
        -: 2782:	      static_assert(!is_const_v<_Tp>, "std::format argument must be "
        -: 2783:					      "non-const for this type");
        -: 2784:
        -: 2785:	    this->_M_ptr = __builtin_addressof(__val);
        -: 2786:	    auto __func = _S_format<__maybe_const_t<_Tp>>;
        -: 2787:	    this->_M_func = reinterpret_cast<void(*)()>(__func);
        -: 2788:	  }
        -: 2789:
        -: 2790:	friend class basic_format_arg<_Context>;
        -: 2791:
        -: 2792:      public:
        -: 2793:	handle(const handle&) = default;
        -: 2794:	handle& operator=(const handle&) = default;
        -: 2795:
        -: 2796:	[[__gnu__::__always_inline__]]
        -: 2797:	void
        -: 2798:	format(basic_format_parse_context<_CharT>& __pc, _Context& __fc) const
        -: 2799:	{
        -: 2800:	  using _Func = void(*)(basic_format_parse_context<_CharT>&,
        -: 2801:				_Context&, const void*);
    #####: 2802:	  auto __f = reinterpret_cast<_Func>(this->_M_func);
    #####: 2803:	  __f(__pc, __fc, this->_M_ptr);
    #####: 2804:	}
        -: 2805:      };
        -: 2806:
        -: 2807:      [[__gnu__::__always_inline__]]
    #####: 2808:      basic_format_arg() noexcept : _M_type(__format::_Arg_none) { }
    %%%%%: 2808-block  0
        -: 2809:
        -: 2810:      [[nodiscard,__gnu__::__always_inline__]]
        -: 2811:      explicit operator bool() const noexcept
        -: 2812:      { return _M_type != __format::_Arg_none; }
        -: 2813:
        -: 2814:    private:
        -: 2815:      template<typename _Ctx>
        -: 2816:	friend class basic_format_args;
        -: 2817:
        -: 2818:      template<typename _Ctx, typename... _Args>
        -: 2819:	friend class __format::_Arg_store;
        -: 2820:
        -: 2821:      static_assert(is_trivially_copyable_v<__format::_Arg_value<_Context>>);
        -: 2822:
        -: 2823:      __format::_Arg_value<_Context> _M_val;
        -: 2824:      __format::_Arg_t _M_type;
        -: 2825:
        -: 2826:      // Transform incoming argument type to the type stored in _Arg_value.
        -: 2827:      // e.g. short -> int, std::string -> std::string_view,
        -: 2828:      // char[3] -> const char*.
        -: 2829:      template<typename _Tp>
        -: 2830:	static consteval auto
        -: 2831:	_S_to_arg_type()
        -: 2832:	{
        -: 2833:	  using _Td = remove_const_t<_Tp>;
        -: 2834:	  if constexpr (is_same_v<_Td, bool>)
        -: 2835:	    return type_identity<bool>();
        -: 2836:	  else if constexpr (is_same_v<_Td, _CharT>)
        -: 2837:	    return type_identity<_CharT>();
        -: 2838:	  else if constexpr (is_same_v<_Td, char> && is_same_v<_CharT, wchar_t>)
        -: 2839:	    return type_identity<_CharT>();
        -: 2840:#ifdef __SIZEOF_INT128__ // Check before signed/unsigned integer
        -: 2841:	  else if constexpr (is_same_v<_Td, __int128>)
        -: 2842:	    return type_identity<__int128>();
        -: 2843:	  else if constexpr (is_same_v<_Td, unsigned __int128>)
        -: 2844:	    return type_identity<unsigned __int128>();
        -: 2845:#endif
        -: 2846:	  else if constexpr (__is_signed_integer<_Td>::value)
        -: 2847:	    {
        -: 2848:	      if constexpr (sizeof(_Td) <= sizeof(int))
        -: 2849:		return type_identity<int>();
        -: 2850:	      else if constexpr (sizeof(_Td) <= sizeof(long long))
        -: 2851:		return type_identity<long long>();
        -: 2852:	    }
        -: 2853:	  else if constexpr (__is_unsigned_integer<_Td>::value)
        -: 2854:	    {
        -: 2855:	      if constexpr (sizeof(_Td) <= sizeof(unsigned))
        -: 2856:		return type_identity<unsigned>();
        -: 2857:	      else if constexpr (sizeof(_Td) <= sizeof(unsigned long long))
        -: 2858:		return type_identity<unsigned long long>();
        -: 2859:	    }
        -: 2860:	  else if constexpr (is_same_v<_Td, float>)
        -: 2861:	    return type_identity<float>();
        -: 2862:	  else if constexpr (is_same_v<_Td, double>)
        -: 2863:	    return type_identity<double>();
        -: 2864:#ifndef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT
        -: 2865:	  else if constexpr (is_same_v<_Td, long double>)
        -: 2866:	    return type_identity<long double>();
        -: 2867:#else
        -: 2868:	  else if constexpr (is_same_v<_Td, __ibm128>)
        -: 2869:	    return type_identity<__ibm128>();
        -: 2870:	  else if constexpr (is_same_v<_Td, __ieee128>)
        -: 2871:	    return type_identity<__ieee128>();
        -: 2872:#endif
        -: 2873:
        -: 2874:	  // TODO bfloat16 and float16
        -: 2875:
        -: 2876:#ifdef __FLT32_DIG__
        -: 2877:	  else if constexpr (is_same_v<_Td, _Float32>)
        -: 2878:# ifdef _GLIBCXX_FLOAT_IS_IEEE_BINARY32
        -: 2879:	    return type_identity<float>();
        -: 2880:# else
        -: 2881:	    return type_identity<_Float32>();
        -: 2882:# endif
        -: 2883:#endif
        -: 2884:#ifdef __FLT64_DIG__
        -: 2885:	  else if constexpr (is_same_v<_Td, _Float64>)
        -: 2886:# ifdef _GLIBCXX_DOUBLE_IS_IEEE_BINARY64
        -: 2887:	    return type_identity<double>();
        -: 2888:# else
        -: 2889:	    return type_identity<_Float64>();
        -: 2890:# endif
        -: 2891:#endif
        -: 2892:#if _GLIBCXX_FORMAT_F128
        -: 2893:# if __FLT128_DIG__
        -: 2894:	  else if constexpr (is_same_v<_Td, _Float128>)
        -: 2895:	    return type_identity<__format::__float128_t>();
        -: 2896:# endif
        -: 2897:# if __SIZEOF_FLOAT128__
        -: 2898:	  else if constexpr (is_same_v<_Td, __float128>)
        -: 2899:	    return type_identity<__format::__float128_t>();
        -: 2900:# endif
        -: 2901:#endif
        -: 2902:	  else if constexpr (__is_specialization_of<_Td, basic_string_view>)
        -: 2903:	    return type_identity<basic_string_view<_CharT>>();
        -: 2904:	  else if constexpr (__is_specialization_of<_Td, basic_string>)
        -: 2905:	    return type_identity<basic_string_view<_CharT>>();
        -: 2906:	  else if constexpr (is_same_v<decay_t<_Td>, const _CharT*>)
        -: 2907:	    return type_identity<const _CharT*>();
        -: 2908:	  else if constexpr (is_same_v<decay_t<_Td>, _CharT*>)
        -: 2909:	    return type_identity<const _CharT*>();
        -: 2910:	  else if constexpr (is_void_v<remove_pointer_t<_Td>>)
        -: 2911:	    return type_identity<const void*>();
        -: 2912:	  else if constexpr (is_same_v<_Td, nullptr_t>)
        -: 2913:	    return type_identity<const void*>();
        -: 2914:	  else
        -: 2915:	    return type_identity<handle>();
        -: 2916:	}
        -: 2917:
        -: 2918:      // Transform a formattable type to the appropriate storage type.
        -: 2919:      template<typename _Tp>
        -: 2920:	using _Normalize = typename decltype(_S_to_arg_type<_Tp>())::type;
        -: 2921:
        -: 2922:      // Get the _Arg_t value corresponding to a normalized type.
        -: 2923:      template<typename _Tp>
        -: 2924:	static consteval __format::_Arg_t
        -: 2925:	_S_to_enum()
        -: 2926:	{
        -: 2927:	  using namespace __format;
        -: 2928:	  if constexpr (is_same_v<_Tp, bool>)
        -: 2929:	    return _Arg_bool;
        -: 2930:	  else if constexpr (is_same_v<_Tp, _CharT>)
        -: 2931:	    return _Arg_c;
        -: 2932:	  else if constexpr (is_same_v<_Tp, int>)
        -: 2933:	    return _Arg_i;
        -: 2934:	  else if constexpr (is_same_v<_Tp, unsigned>)
        -: 2935:	    return _Arg_u;
        -: 2936:	  else if constexpr (is_same_v<_Tp, long long>)
        -: 2937:	    return _Arg_ll;
        -: 2938:	  else if constexpr (is_same_v<_Tp, unsigned long long>)
        -: 2939:	    return _Arg_ull;
        -: 2940:	  else if constexpr (is_same_v<_Tp, float>)
        -: 2941:	    return _Arg_flt;
        -: 2942:	  else if constexpr (is_same_v<_Tp, double>)
        -: 2943:	    return _Arg_dbl;
        -: 2944:#ifndef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT
        -: 2945:	  else if constexpr (is_same_v<_Tp, long double>)
        -: 2946:	    return _Arg_ldbl;
        -: 2947:#else
        -: 2948:	  // Don't use _Arg_ldbl for this target, it's ambiguous.
        -: 2949:	  else if constexpr (is_same_v<_Tp, __ibm128>)
        -: 2950:	    return _Arg_ibm128;
        -: 2951:	  else if constexpr (is_same_v<_Tp, __ieee128>)
        -: 2952:	    return _Arg_f128;
        -: 2953:#endif
        -: 2954:	  else if constexpr (is_same_v<_Tp, const _CharT*>)
        -: 2955:	    return _Arg_str;
        -: 2956:	  else if constexpr (is_same_v<_Tp, basic_string_view<_CharT>>)
        -: 2957:	    return _Arg_sv;
        -: 2958:	  else if constexpr (is_same_v<_Tp, const void*>)
        -: 2959:	    return _Arg_ptr;
        -: 2960:#ifdef __SIZEOF_INT128__
        -: 2961:	  else if constexpr (is_same_v<_Tp, __int128>)
        -: 2962:	    return _Arg_i128;
        -: 2963:	  else if constexpr (is_same_v<_Tp, unsigned __int128>)
        -: 2964:	    return _Arg_u128;
        -: 2965:#endif
        -: 2966:
        -: 2967:	  // N.B. some of these types will never actually be used here,
        -: 2968:	  // because they get normalized to a standard floating-point type.
        -: 2969:#if defined __FLT32_DIG__ && ! _GLIBCXX_FLOAT_IS_IEEE_BINARY32
        -: 2970:	  else if constexpr (is_same_v<_Tp, _Float32>)
        -: 2971:	    return _Arg_f32;
        -: 2972:#endif
        -: 2973:#if defined __FLT64_DIG__ && ! _GLIBCXX_DOUBLE_IS_IEEE_BINARY64
        -: 2974:	  else if constexpr (is_same_v<_Tp, _Float64>)
        -: 2975:	    return _Arg_f64;
        -: 2976:#endif
        -: 2977:#if _GLIBCXX_FORMAT_F128 == 2
        -: 2978:	  else if constexpr (is_same_v<_Tp, __format::__float128_t>)
        -: 2979:	    return _Arg_f128;
        -: 2980:#endif
        -: 2981:	  else if constexpr (is_same_v<_Tp, handle>)
        -: 2982:	    return _Arg_handle;
        -: 2983:	}
        -: 2984:
        -: 2985:      template<typename _Tp>
        -: 2986:	void
function void std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_set<int>(int) called 0 returned 0% blocks executed 0%
    #####: 2987:	_M_set(_Tp __v) noexcept
        -: 2988:	{
    #####: 2989:	  _M_type = _S_to_enum<_Tp>();
    #####: 2990:	  _M_val._M_set(__v);
    %%%%%: 2990-block  0
    #####: 2991:	}
        -: 2992:
        -: 2993:      template<typename _Tp>
        -: 2994:	requires __format::__formattable_with<_Tp, _Context>
        -: 2995:	explicit
    #####: 2996:	basic_format_arg(_Tp& __v) noexcept
    #####: 2997:	{
        -: 2998:	  using _Td = _Normalize<_Tp>;
        -: 2999:	  if constexpr (is_same_v<_Td, basic_string_view<_CharT>>)
        -: 3000:	    _M_set(_Td{__v.data(), __v.size()});
        -: 3001:	  else
    #####: 3002:	    _M_set(static_cast<_Td>(__v));
    #####: 3003:	}
------------------
std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::basic_format_arg<int const>(int const&):
function std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::basic_format_arg<int const>(int const&) called 0 returned 0% blocks executed 0%
    #####: 2996:	basic_format_arg(_Tp& __v) noexcept
    #####: 2997:	{
    %%%%%: 2997-block  0
        -: 2998:	  using _Td = _Normalize<_Tp>;
        -: 2999:	  if constexpr (is_same_v<_Td, basic_string_view<_CharT>>)
        -: 3000:	    _M_set(_Td{__v.data(), __v.size()});
        -: 3001:	  else
    #####: 3002:	    _M_set(static_cast<_Td>(__v));
    %%%%%: 3002-block  0
call    0 never executed
    #####: 3003:	}
------------------
std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::basic_format_arg<int>(int&):
function std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::basic_format_arg<int>(int&) called 0 returned 0% blocks executed 0%
    #####: 2996:	basic_format_arg(_Tp& __v) noexcept
    #####: 2997:	{
    %%%%%: 2997-block  0
        -: 2998:	  using _Td = _Normalize<_Tp>;
        -: 2999:	  if constexpr (is_same_v<_Td, basic_string_view<_CharT>>)
        -: 3000:	    _M_set(_Td{__v.data(), __v.size()});
        -: 3001:	  else
    #####: 3002:	    _M_set(static_cast<_Td>(__v));
    %%%%%: 3002-block  0
call    0 never executed
    #####: 3003:	}
------------------
        -: 3004:
        -: 3005:      template<typename _Ctx, typename... _Argz>
        -: 3006:	friend auto
        -: 3007:	make_format_args(_Argz&&...) noexcept;
        -: 3008:
        -: 3009:      template<typename _Visitor, typename _Ctx>
        -: 3010:	friend decltype(auto)
        -: 3011:	visit_format_arg(_Visitor&& __vis, basic_format_arg<_Ctx>);
        -: 3012:
        -: 3013:      template<typename _Visitor>
        -: 3014:	decltype(auto)
    #####: 3015:	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
        -: 3016:	{
        -: 3017:	  using namespace __format;
    #####: 3018:	  switch (__type)
        -: 3019:	  {
    #####: 3020:	    case _Arg_none:
    #####: 3021:	      return std::forward<_Visitor>(__vis)(_M_val._M_none);
    #####: 3022:	    case _Arg_bool:
    #####: 3023:	      return std::forward<_Visitor>(__vis)(_M_val._M_bool);
    #####: 3024:	    case _Arg_c:
    #####: 3025:	      return std::forward<_Visitor>(__vis)(_M_val._M_c);
    #####: 3026:	    case _Arg_i:
    #####: 3027:	      return std::forward<_Visitor>(__vis)(_M_val._M_i);
    #####: 3028:	    case _Arg_u:
    #####: 3029:	      return std::forward<_Visitor>(__vis)(_M_val._M_u);
    #####: 3030:	    case _Arg_ll:
    #####: 3031:	      return std::forward<_Visitor>(__vis)(_M_val._M_ll);
    #####: 3032:	    case _Arg_ull:
    #####: 3033:	      return std::forward<_Visitor>(__vis)(_M_val._M_ull);
        -: 3034:#if __cpp_lib_to_chars // FIXME: need to be able to format these types!
    #####: 3035:	    case _Arg_flt:
    #####: 3036:	      return std::forward<_Visitor>(__vis)(_M_val._M_flt);
    #####: 3037:	    case _Arg_dbl:
    #####: 3038:	      return std::forward<_Visitor>(__vis)(_M_val._M_dbl);
        -: 3039:#ifndef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT
    #####: 3040:	    case _Arg_ldbl:
    #####: 3041:	      return std::forward<_Visitor>(__vis)(_M_val._M_ldbl);
        -: 3042:#else
        -: 3043:	    case _Arg_f128:
        -: 3044:	      return std::forward<_Visitor>(__vis)(_M_val._M_f128);
        -: 3045:	    case _Arg_ibm128:
        -: 3046:	      return std::forward<_Visitor>(__vis)(_M_val._M_ibm128);
        -: 3047:#endif
        -: 3048:#endif
    #####: 3049:	    case _Arg_str:
    #####: 3050:	      return std::forward<_Visitor>(__vis)(_M_val._M_str);
    #####: 3051:	    case _Arg_sv:
    #####: 3052:	      return std::forward<_Visitor>(__vis)(_M_val._M_sv);
    #####: 3053:	    case _Arg_ptr:
    #####: 3054:	      return std::forward<_Visitor>(__vis)(_M_val._M_ptr);
    #####: 3055:	    case _Arg_handle:
        -: 3056:	    {
    #####: 3057:	      auto& __h = static_cast<handle&>(_M_val._M_handle);
    #####: 3058:	      return std::forward<_Visitor>(__vis)(__h);
        -: 3059:	    }
        -: 3060:#ifdef __SIZEOF_INT128__
    #####: 3061:	    case _Arg_i128:
    #####: 3062:	      return std::forward<_Visitor>(__vis)(_M_val._M_i128);
    #####: 3063:	    case _Arg_u128:
    #####: 3064:	      return std::forward<_Visitor>(__vis)(_M_val._M_u128);
        -: 3065:#endif
        -: 3066:	      // TODO _Arg_f16 etc.
        -: 3067:
        -: 3068:#if _GLIBCXX_FORMAT_F128 == 2
    #####: 3069:	    case _Arg_f128:
    #####: 3070:	      return std::forward<_Visitor>(__vis)(_M_val._M_f128);
        -: 3071:#endif
        -: 3072:	  }
    #####: 3073:	  __builtin_unreachable();
        -: 3074:	}
------------------
decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_WidthPrecVisitor>(std::__format::_WidthPrecVisitor&&, std::__format::_Arg_t):
function decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_WidthPrecVisitor>(std::__format::_WidthPrecVisitor&&, std::__format::_Arg_t) called 0 returned 0% blocks executed 0%
    #####: 3015:	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
        -: 3016:	{
        -: 3017:	  using namespace __format;
    #####: 3018:	  switch (__type)
    %%%%%: 3018-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
        -: 3019:	  {
    #####: 3020:	    case _Arg_none:
    #####: 3021:	      return std::forward<_Visitor>(__vis)(_M_val._M_none);
    %%%%%: 3021-block  0
call    0 never executed
call    1 never executed
    #####: 3022:	    case _Arg_bool:
    #####: 3023:	      return std::forward<_Visitor>(__vis)(_M_val._M_bool);
    %%%%%: 3023-block  0
call    0 never executed
call    1 never executed
    #####: 3024:	    case _Arg_c:
    #####: 3025:	      return std::forward<_Visitor>(__vis)(_M_val._M_c);
    %%%%%: 3025-block  0
call    0 never executed
call    1 never executed
    #####: 3026:	    case _Arg_i:
    #####: 3027:	      return std::forward<_Visitor>(__vis)(_M_val._M_i);
    %%%%%: 3027-block  0
call    0 never executed
call    1 never executed
    #####: 3028:	    case _Arg_u:
    #####: 3029:	      return std::forward<_Visitor>(__vis)(_M_val._M_u);
    %%%%%: 3029-block  0
call    0 never executed
call    1 never executed
    #####: 3030:	    case _Arg_ll:
    #####: 3031:	      return std::forward<_Visitor>(__vis)(_M_val._M_ll);
    %%%%%: 3031-block  0
call    0 never executed
call    1 never executed
    #####: 3032:	    case _Arg_ull:
    #####: 3033:	      return std::forward<_Visitor>(__vis)(_M_val._M_ull);
    %%%%%: 3033-block  0
call    0 never executed
call    1 never executed
        -: 3034:#if __cpp_lib_to_chars // FIXME: need to be able to format these types!
    #####: 3035:	    case _Arg_flt:
    #####: 3036:	      return std::forward<_Visitor>(__vis)(_M_val._M_flt);
    %%%%%: 3036-block  0
call    0 never executed
call    1 never executed
    #####: 3037:	    case _Arg_dbl:
    #####: 3038:	      return std::forward<_Visitor>(__vis)(_M_val._M_dbl);
    %%%%%: 3038-block  0
call    0 never executed
call    1 never executed
        -: 3039:#ifndef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT
    #####: 3040:	    case _Arg_ldbl:
    #####: 3041:	      return std::forward<_Visitor>(__vis)(_M_val._M_ldbl);
    %%%%%: 3041-block  0
call    0 never executed
call    1 never executed
        -: 3042:#else
        -: 3043:	    case _Arg_f128:
        -: 3044:	      return std::forward<_Visitor>(__vis)(_M_val._M_f128);
        -: 3045:	    case _Arg_ibm128:
        -: 3046:	      return std::forward<_Visitor>(__vis)(_M_val._M_ibm128);
        -: 3047:#endif
        -: 3048:#endif
    #####: 3049:	    case _Arg_str:
    #####: 3050:	      return std::forward<_Visitor>(__vis)(_M_val._M_str);
    %%%%%: 3050-block  0
call    0 never executed
call    1 never executed
    #####: 3051:	    case _Arg_sv:
    #####: 3052:	      return std::forward<_Visitor>(__vis)(_M_val._M_sv);
    %%%%%: 3052-block  0
call    0 never executed
call    1 never executed
    #####: 3053:	    case _Arg_ptr:
    #####: 3054:	      return std::forward<_Visitor>(__vis)(_M_val._M_ptr);
    %%%%%: 3054-block  0
call    0 never executed
call    1 never executed
    #####: 3055:	    case _Arg_handle:
        -: 3056:	    {
    #####: 3057:	      auto& __h = static_cast<handle&>(_M_val._M_handle);
    #####: 3058:	      return std::forward<_Visitor>(__vis)(__h);
    %%%%%: 3058-block  0
call    0 never executed
call    1 never executed
        -: 3059:	    }
        -: 3060:#ifdef __SIZEOF_INT128__
    #####: 3061:	    case _Arg_i128:
    #####: 3062:	      return std::forward<_Visitor>(__vis)(_M_val._M_i128);
    %%%%%: 3062-block  0
call    0 never executed
call    1 never executed
    #####: 3063:	    case _Arg_u128:
    #####: 3064:	      return std::forward<_Visitor>(__vis)(_M_val._M_u128);
    %%%%%: 3064-block  0
call    0 never executed
call    1 never executed
        -: 3065:#endif
        -: 3066:	      // TODO _Arg_f16 etc.
        -: 3067:
        -: 3068:#if _GLIBCXX_FORMAT_F128 == 2
    #####: 3069:	    case _Arg_f128:
    #####: 3070:	      return std::forward<_Visitor>(__vis)(_M_val._M_f128);
    %%%%%: 3070-block  0
call    0 never executed
call    1 never executed
        -: 3071:#endif
        -: 3072:	  }
    #####: 3073:	  __builtin_unreachable();
    %%%%%: 3073-block  0
call    0 never executed
        -: 3074:	}
------------------
decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t):
function decltype(auto) std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_visit<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}>(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::__format::_Arg_t) called 0 returned 0% blocks executed 0%
    #####: 3015:	_M_visit(_Visitor&& __vis, __format::_Arg_t __type)
        -: 3016:	{
        -: 3017:	  using namespace __format;
    #####: 3018:	  switch (__type)
    %%%%%: 3018-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
        -: 3019:	  {
    #####: 3020:	    case _Arg_none:
    #####: 3021:	      return std::forward<_Visitor>(__vis)(_M_val._M_none);
    %%%%%: 3021-block  0
call    0 never executed
call    1 never executed
    #####: 3022:	    case _Arg_bool:
    #####: 3023:	      return std::forward<_Visitor>(__vis)(_M_val._M_bool);
    %%%%%: 3023-block  0
call    0 never executed
call    1 never executed
    #####: 3024:	    case _Arg_c:
    #####: 3025:	      return std::forward<_Visitor>(__vis)(_M_val._M_c);
    %%%%%: 3025-block  0
call    0 never executed
call    1 never executed
    #####: 3026:	    case _Arg_i:
    #####: 3027:	      return std::forward<_Visitor>(__vis)(_M_val._M_i);
    %%%%%: 3027-block  0
call    0 never executed
call    1 never executed
    #####: 3028:	    case _Arg_u:
    #####: 3029:	      return std::forward<_Visitor>(__vis)(_M_val._M_u);
    %%%%%: 3029-block  0
call    0 never executed
call    1 never executed
    #####: 3030:	    case _Arg_ll:
    #####: 3031:	      return std::forward<_Visitor>(__vis)(_M_val._M_ll);
    %%%%%: 3031-block  0
call    0 never executed
call    1 never executed
    #####: 3032:	    case _Arg_ull:
    #####: 3033:	      return std::forward<_Visitor>(__vis)(_M_val._M_ull);
    %%%%%: 3033-block  0
call    0 never executed
call    1 never executed
        -: 3034:#if __cpp_lib_to_chars // FIXME: need to be able to format these types!
    #####: 3035:	    case _Arg_flt:
    #####: 3036:	      return std::forward<_Visitor>(__vis)(_M_val._M_flt);
    %%%%%: 3036-block  0
call    0 never executed
call    1 never executed
    #####: 3037:	    case _Arg_dbl:
    #####: 3038:	      return std::forward<_Visitor>(__vis)(_M_val._M_dbl);
    %%%%%: 3038-block  0
call    0 never executed
call    1 never executed
        -: 3039:#ifndef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT
    #####: 3040:	    case _Arg_ldbl:
    #####: 3041:	      return std::forward<_Visitor>(__vis)(_M_val._M_ldbl);
    %%%%%: 3041-block  0
call    0 never executed
call    1 never executed
        -: 3042:#else
        -: 3043:	    case _Arg_f128:
        -: 3044:	      return std::forward<_Visitor>(__vis)(_M_val._M_f128);
        -: 3045:	    case _Arg_ibm128:
        -: 3046:	      return std::forward<_Visitor>(__vis)(_M_val._M_ibm128);
        -: 3047:#endif
        -: 3048:#endif
    #####: 3049:	    case _Arg_str:
    #####: 3050:	      return std::forward<_Visitor>(__vis)(_M_val._M_str);
    %%%%%: 3050-block  0
call    0 never executed
call    1 never executed
    #####: 3051:	    case _Arg_sv:
    #####: 3052:	      return std::forward<_Visitor>(__vis)(_M_val._M_sv);
    %%%%%: 3052-block  0
call    0 never executed
call    1 never executed
    #####: 3053:	    case _Arg_ptr:
    #####: 3054:	      return std::forward<_Visitor>(__vis)(_M_val._M_ptr);
    %%%%%: 3054-block  0
call    0 never executed
call    1 never executed
    #####: 3055:	    case _Arg_handle:
        -: 3056:	    {
    #####: 3057:	      auto& __h = static_cast<handle&>(_M_val._M_handle);
    #####: 3058:	      return std::forward<_Visitor>(__vis)(__h);
    %%%%%: 3058-block  0
call    0 never executed
call    1 never executed
        -: 3059:	    }
        -: 3060:#ifdef __SIZEOF_INT128__
    #####: 3061:	    case _Arg_i128:
    #####: 3062:	      return std::forward<_Visitor>(__vis)(_M_val._M_i128);
    %%%%%: 3062-block  0
call    0 never executed
call    1 never executed
    #####: 3063:	    case _Arg_u128:
    #####: 3064:	      return std::forward<_Visitor>(__vis)(_M_val._M_u128);
    %%%%%: 3064-block  0
call    0 never executed
call    1 never executed
        -: 3065:#endif
        -: 3066:	      // TODO _Arg_f16 etc.
        -: 3067:
        -: 3068:#if _GLIBCXX_FORMAT_F128 == 2
    #####: 3069:	    case _Arg_f128:
    #####: 3070:	      return std::forward<_Visitor>(__vis)(_M_val._M_f128);
    %%%%%: 3070-block  0
call    0 never executed
call    1 never executed
        -: 3071:#endif
        -: 3072:	  }
    #####: 3073:	  __builtin_unreachable();
    %%%%%: 3073-block  0
call    0 never executed
        -: 3074:	}
------------------
        -: 3075:    };
        -: 3076:
        -: 3077:  template<typename _Visitor, typename _Context>
        -: 3078:    inline decltype(auto)
    #####: 3079:    visit_format_arg(_Visitor&& __vis, basic_format_arg<_Context> __arg)
        -: 3080:    {
    #####: 3081:      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
        -: 3082:    }
------------------
decltype(auto) std::visit_format_arg<std::__format::_WidthPrecVisitor, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_WidthPrecVisitor&&, std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >):
function decltype(auto) std::visit_format_arg<std::__format::_WidthPrecVisitor, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_WidthPrecVisitor&&, std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >) called 0 returned 0% blocks executed 0%
    #####: 3079:    visit_format_arg(_Visitor&& __vis, basic_format_arg<_Context> __arg)
        -: 3080:    {
    #####: 3081:      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    %%%%%: 3081-block  0
call    0 never executed
call    1 never executed
        -: 3082:    }
------------------
decltype(auto) std::visit_format_arg<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >):
function decltype(auto) std::visit_format_arg<std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}&&, std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >) called 0 returned 0% blocks executed 0%
    #####: 3079:    visit_format_arg(_Visitor&& __vis, basic_format_arg<_Context> __arg)
        -: 3080:    {
    #####: 3081:      return __arg._M_visit(std::forward<_Visitor>(__vis), __arg._M_type);
    %%%%%: 3081-block  0
call    0 never executed
call    1 never executed
        -: 3082:    }
------------------
        -: 3083:
        -: 3084:/// @cond undocumented
        -: 3085:namespace __format
        -: 3086:{
        -: 3087:  struct _WidthPrecVisitor
        -: 3088:  {
        -: 3089:    template<typename _Tp>
        -: 3090:      size_t
    #####: 3091:      operator()(_Tp& __arg) const
        -: 3092:      {
        -: 3093:	if constexpr (is_same_v<_Tp, monostate>)
    #####: 3094:	  __format::__invalid_arg_id_in_format_string();
        -: 3095:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3096:	// 3720. Restrict the valid types of arg-id for width and precision
        -: 3097:	// 3721. Allow an arg-id with a value of zero for width
        -: 3098:	else if constexpr (sizeof(_Tp) <= sizeof(long long))
        -: 3099:	  {
        -: 3100:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3101:	    // 3720. Restrict the valid types of arg-id for width and precision
        -: 3102:	    if constexpr (__is_unsigned_integer<_Tp>::value)
    #####: 3103:	      return __arg;
        -: 3104:	    else if constexpr (__is_signed_integer<_Tp>::value)
    #####: 3105:	      if (__arg >= 0)
    #####: 3106:		return __arg;
        -: 3107:	  }
    #####: 3108:	__throw_format_error("format error: argument used for width or "
        -: 3109:			     "precision must be a non-negative integer");
        -: 3110:      }
------------------
unsigned long std::__format::_WidthPrecVisitor::operator()<long double>(long double&) const:
function unsigned long std::__format::_WidthPrecVisitor::operator()<long double>(long double&) const called 0 returned 0% blocks executed 0%
    #####: 3091:      operator()(_Tp& __arg) const
        -: 3092:      {
        -: 3093:	if constexpr (is_same_v<_Tp, monostate>)
        -: 3094:	  __format::__invalid_arg_id_in_format_string();
        -: 3095:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3096:	// 3720. Restrict the valid types of arg-id for width and precision
        -: 3097:	// 3721. Allow an arg-id with a value of zero for width
        -: 3098:	else if constexpr (sizeof(_Tp) <= sizeof(long long))
        -: 3099:	  {
        -: 3100:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3101:	    // 3720. Restrict the valid types of arg-id for width and precision
        -: 3102:	    if constexpr (__is_unsigned_integer<_Tp>::value)
        -: 3103:	      return __arg;
        -: 3104:	    else if constexpr (__is_signed_integer<_Tp>::value)
        -: 3105:	      if (__arg >= 0)
        -: 3106:		return __arg;
        -: 3107:	  }
    #####: 3108:	__throw_format_error("format error: argument used for width or "
        -: 3109:			     "precision must be a non-negative integer");
        -: 3110:      }
------------------
unsigned long std::__format::_WidthPrecVisitor::operator()<std::monostate>(std::monostate&) const:
function unsigned long std::__format::_WidthPrecVisitor::operator()<std::monostate>(std::monostate&) const called 0 returned 0% blocks executed 0%
    #####: 3091:      operator()(_Tp& __arg) const
        -: 3092:      {
        -: 3093:	if constexpr (is_same_v<_Tp, monostate>)
    #####: 3094:	  __format::__invalid_arg_id_in_format_string();
        -: 3095:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3096:	// 3720. Restrict the valid types of arg-id for width and precision
        -: 3097:	// 3721. Allow an arg-id with a value of zero for width
        -: 3098:	else if constexpr (sizeof(_Tp) <= sizeof(long long))
        -: 3099:	  {
        -: 3100:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3101:	    // 3720. Restrict the valid types of arg-id for width and precision
        -: 3102:	    if constexpr (__is_unsigned_integer<_Tp>::value)
        -: 3103:	      return __arg;
        -: 3104:	    else if constexpr (__is_signed_integer<_Tp>::value)
        -: 3105:	      if (__arg >= 0)
        -: 3106:		return __arg;
        -: 3107:	  }
        -: 3108:	__throw_format_error("format error: argument used for width or "
        -: 3109:			     "precision must be a non-negative integer");
        -: 3110:      }
------------------
unsigned long std::__format::_WidthPrecVisitor::operator()<bool>(bool&) const:
function unsigned long std::__format::_WidthPrecVisitor::operator()<bool>(bool&) const called 0 returned 0% blocks executed 0%
    #####: 3091:      operator()(_Tp& __arg) const
        -: 3092:      {
        -: 3093:	if constexpr (is_same_v<_Tp, monostate>)
        -: 3094:	  __format::__invalid_arg_id_in_format_string();
        -: 3095:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3096:	// 3720. Restrict the valid types of arg-id for width and precision
        -: 3097:	// 3721. Allow an arg-id with a value of zero for width
        -: 3098:	else if constexpr (sizeof(_Tp) <= sizeof(long long))
        -: 3099:	  {
        -: 3100:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3101:	    // 3720. Restrict the valid types of arg-id for width and precision
        -: 3102:	    if constexpr (__is_unsigned_integer<_Tp>::value)
        -: 3103:	      return __arg;
        -: 3104:	    else if constexpr (__is_signed_integer<_Tp>::value)
        -: 3105:	      if (__arg >= 0)
        -: 3106:		return __arg;
        -: 3107:	  }
    #####: 3108:	__throw_format_error("format error: argument used for width or "
        -: 3109:			     "precision must be a non-negative integer");
        -: 3110:      }
------------------
unsigned long std::__format::_WidthPrecVisitor::operator()<int>(int&) const:
function unsigned long std::__format::_WidthPrecVisitor::operator()<int>(int&) const called 0 returned 0% blocks executed 0%
    #####: 3091:      operator()(_Tp& __arg) const
        -: 3092:      {
        -: 3093:	if constexpr (is_same_v<_Tp, monostate>)
        -: 3094:	  __format::__invalid_arg_id_in_format_string();
        -: 3095:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3096:	// 3720. Restrict the valid types of arg-id for width and precision
        -: 3097:	// 3721. Allow an arg-id with a value of zero for width
        -: 3098:	else if constexpr (sizeof(_Tp) <= sizeof(long long))
        -: 3099:	  {
        -: 3100:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3101:	    // 3720. Restrict the valid types of arg-id for width and precision
        -: 3102:	    if constexpr (__is_unsigned_integer<_Tp>::value)
        -: 3103:	      return __arg;
        -: 3104:	    else if constexpr (__is_signed_integer<_Tp>::value)
    #####: 3105:	      if (__arg >= 0)
    %%%%%: 3105-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3106:		return __arg;
    %%%%%: 3106-block  0
        -: 3107:	  }
    #####: 3108:	__throw_format_error("format error: argument used for width or "
    %%%%%: 3108-block  0
call    0 never executed
        -: 3109:			     "precision must be a non-negative integer");
        -: 3110:      }
------------------
unsigned long std::__format::_WidthPrecVisitor::operator()<unsigned int>(unsigned int&) const:
function unsigned long std::__format::_WidthPrecVisitor::operator()<unsigned int>(unsigned int&) const called 0 returned 0% blocks executed 0%
    #####: 3091:      operator()(_Tp& __arg) const
        -: 3092:      {
        -: 3093:	if constexpr (is_same_v<_Tp, monostate>)
        -: 3094:	  __format::__invalid_arg_id_in_format_string();
        -: 3095:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3096:	// 3720. Restrict the valid types of arg-id for width and precision
        -: 3097:	// 3721. Allow an arg-id with a value of zero for width
        -: 3098:	else if constexpr (sizeof(_Tp) <= sizeof(long long))
        -: 3099:	  {
        -: 3100:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3101:	    // 3720. Restrict the valid types of arg-id for width and precision
        -: 3102:	    if constexpr (__is_unsigned_integer<_Tp>::value)
    #####: 3103:	      return __arg;
    %%%%%: 3103-block  0
        -: 3104:	    else if constexpr (__is_signed_integer<_Tp>::value)
        -: 3105:	      if (__arg >= 0)
        -: 3106:		return __arg;
        -: 3107:	  }
        -: 3108:	__throw_format_error("format error: argument used for width or "
        -: 3109:			     "precision must be a non-negative integer");
        -: 3110:      }
------------------
unsigned long std::__format::_WidthPrecVisitor::operator()<long long>(long long&) const:
function unsigned long std::__format::_WidthPrecVisitor::operator()<long long>(long long&) const called 0 returned 0% blocks executed 0%
    #####: 3091:      operator()(_Tp& __arg) const
        -: 3092:      {
        -: 3093:	if constexpr (is_same_v<_Tp, monostate>)
        -: 3094:	  __format::__invalid_arg_id_in_format_string();
        -: 3095:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3096:	// 3720. Restrict the valid types of arg-id for width and precision
        -: 3097:	// 3721. Allow an arg-id with a value of zero for width
        -: 3098:	else if constexpr (sizeof(_Tp) <= sizeof(long long))
        -: 3099:	  {
        -: 3100:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3101:	    // 3720. Restrict the valid types of arg-id for width and precision
        -: 3102:	    if constexpr (__is_unsigned_integer<_Tp>::value)
        -: 3103:	      return __arg;
        -: 3104:	    else if constexpr (__is_signed_integer<_Tp>::value)
    #####: 3105:	      if (__arg >= 0)
    %%%%%: 3105-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3106:		return __arg;
    %%%%%: 3106-block  0
        -: 3107:	  }
    #####: 3108:	__throw_format_error("format error: argument used for width or "
    %%%%%: 3108-block  0
call    0 never executed
        -: 3109:			     "precision must be a non-negative integer");
        -: 3110:      }
------------------
unsigned long std::__format::_WidthPrecVisitor::operator()<unsigned long long>(unsigned long long&) const:
function unsigned long std::__format::_WidthPrecVisitor::operator()<unsigned long long>(unsigned long long&) const called 0 returned 0% blocks executed 0%
    #####: 3091:      operator()(_Tp& __arg) const
        -: 3092:      {
        -: 3093:	if constexpr (is_same_v<_Tp, monostate>)
        -: 3094:	  __format::__invalid_arg_id_in_format_string();
        -: 3095:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3096:	// 3720. Restrict the valid types of arg-id for width and precision
        -: 3097:	// 3721. Allow an arg-id with a value of zero for width
        -: 3098:	else if constexpr (sizeof(_Tp) <= sizeof(long long))
        -: 3099:	  {
        -: 3100:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3101:	    // 3720. Restrict the valid types of arg-id for width and precision
        -: 3102:	    if constexpr (__is_unsigned_integer<_Tp>::value)
    #####: 3103:	      return __arg;
    %%%%%: 3103-block  0
        -: 3104:	    else if constexpr (__is_signed_integer<_Tp>::value)
        -: 3105:	      if (__arg >= 0)
        -: 3106:		return __arg;
        -: 3107:	  }
        -: 3108:	__throw_format_error("format error: argument used for width or "
        -: 3109:			     "precision must be a non-negative integer");
        -: 3110:      }
------------------
unsigned long std::__format::_WidthPrecVisitor::operator()<float>(float&) const:
function unsigned long std::__format::_WidthPrecVisitor::operator()<float>(float&) const called 0 returned 0% blocks executed 0%
    #####: 3091:      operator()(_Tp& __arg) const
        -: 3092:      {
        -: 3093:	if constexpr (is_same_v<_Tp, monostate>)
        -: 3094:	  __format::__invalid_arg_id_in_format_string();
        -: 3095:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3096:	// 3720. Restrict the valid types of arg-id for width and precision
        -: 3097:	// 3721. Allow an arg-id with a value of zero for width
        -: 3098:	else if constexpr (sizeof(_Tp) <= sizeof(long long))
        -: 3099:	  {
        -: 3100:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3101:	    // 3720. Restrict the valid types of arg-id for width and precision
        -: 3102:	    if constexpr (__is_unsigned_integer<_Tp>::value)
        -: 3103:	      return __arg;
        -: 3104:	    else if constexpr (__is_signed_integer<_Tp>::value)
        -: 3105:	      if (__arg >= 0)
        -: 3106:		return __arg;
        -: 3107:	  }
    #####: 3108:	__throw_format_error("format error: argument used for width or "
        -: 3109:			     "precision must be a non-negative integer");
        -: 3110:      }
------------------
unsigned long std::__format::_WidthPrecVisitor::operator()<double>(double&) const:
function unsigned long std::__format::_WidthPrecVisitor::operator()<double>(double&) const called 0 returned 0% blocks executed 0%
    #####: 3091:      operator()(_Tp& __arg) const
        -: 3092:      {
        -: 3093:	if constexpr (is_same_v<_Tp, monostate>)
        -: 3094:	  __format::__invalid_arg_id_in_format_string();
        -: 3095:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3096:	// 3720. Restrict the valid types of arg-id for width and precision
        -: 3097:	// 3721. Allow an arg-id with a value of zero for width
        -: 3098:	else if constexpr (sizeof(_Tp) <= sizeof(long long))
        -: 3099:	  {
        -: 3100:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3101:	    // 3720. Restrict the valid types of arg-id for width and precision
        -: 3102:	    if constexpr (__is_unsigned_integer<_Tp>::value)
        -: 3103:	      return __arg;
        -: 3104:	    else if constexpr (__is_signed_integer<_Tp>::value)
        -: 3105:	      if (__arg >= 0)
        -: 3106:		return __arg;
        -: 3107:	  }
    #####: 3108:	__throw_format_error("format error: argument used for width or "
        -: 3109:			     "precision must be a non-negative integer");
        -: 3110:      }
------------------
unsigned long std::__format::_WidthPrecVisitor::operator()<std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle>(std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle&) const:
function unsigned long std::__format::_WidthPrecVisitor::operator()<std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle>(std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle&) const called 0 returned 0% blocks executed 0%
    #####: 3091:      operator()(_Tp& __arg) const
        -: 3092:      {
        -: 3093:	if constexpr (is_same_v<_Tp, monostate>)
        -: 3094:	  __format::__invalid_arg_id_in_format_string();
        -: 3095:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3096:	// 3720. Restrict the valid types of arg-id for width and precision
        -: 3097:	// 3721. Allow an arg-id with a value of zero for width
        -: 3098:	else if constexpr (sizeof(_Tp) <= sizeof(long long))
        -: 3099:	  {
        -: 3100:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3101:	    // 3720. Restrict the valid types of arg-id for width and precision
        -: 3102:	    if constexpr (__is_unsigned_integer<_Tp>::value)
        -: 3103:	      return __arg;
        -: 3104:	    else if constexpr (__is_signed_integer<_Tp>::value)
        -: 3105:	      if (__arg >= 0)
        -: 3106:		return __arg;
        -: 3107:	  }
    #####: 3108:	__throw_format_error("format error: argument used for width or "
        -: 3109:			     "precision must be a non-negative integer");
        -: 3110:      }
------------------
unsigned long std::__format::_WidthPrecVisitor::operator()<void const*>(void const*&) const:
function unsigned long std::__format::_WidthPrecVisitor::operator()<void const*>(void const*&) const called 0 returned 0% blocks executed 0%
    #####: 3091:      operator()(_Tp& __arg) const
        -: 3092:      {
        -: 3093:	if constexpr (is_same_v<_Tp, monostate>)
        -: 3094:	  __format::__invalid_arg_id_in_format_string();
        -: 3095:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3096:	// 3720. Restrict the valid types of arg-id for width and precision
        -: 3097:	// 3721. Allow an arg-id with a value of zero for width
        -: 3098:	else if constexpr (sizeof(_Tp) <= sizeof(long long))
        -: 3099:	  {
        -: 3100:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3101:	    // 3720. Restrict the valid types of arg-id for width and precision
        -: 3102:	    if constexpr (__is_unsigned_integer<_Tp>::value)
        -: 3103:	      return __arg;
        -: 3104:	    else if constexpr (__is_signed_integer<_Tp>::value)
        -: 3105:	      if (__arg >= 0)
        -: 3106:		return __arg;
        -: 3107:	  }
    #####: 3108:	__throw_format_error("format error: argument used for width or "
        -: 3109:			     "precision must be a non-negative integer");
        -: 3110:      }
------------------
unsigned long std::__format::_WidthPrecVisitor::operator()<__int128>(__int128&) const:
function unsigned long std::__format::_WidthPrecVisitor::operator()<__int128>(__int128&) const called 0 returned 0% blocks executed 0%
    #####: 3091:      operator()(_Tp& __arg) const
        -: 3092:      {
        -: 3093:	if constexpr (is_same_v<_Tp, monostate>)
        -: 3094:	  __format::__invalid_arg_id_in_format_string();
        -: 3095:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3096:	// 3720. Restrict the valid types of arg-id for width and precision
        -: 3097:	// 3721. Allow an arg-id with a value of zero for width
        -: 3098:	else if constexpr (sizeof(_Tp) <= sizeof(long long))
        -: 3099:	  {
        -: 3100:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3101:	    // 3720. Restrict the valid types of arg-id for width and precision
        -: 3102:	    if constexpr (__is_unsigned_integer<_Tp>::value)
        -: 3103:	      return __arg;
        -: 3104:	    else if constexpr (__is_signed_integer<_Tp>::value)
        -: 3105:	      if (__arg >= 0)
        -: 3106:		return __arg;
        -: 3107:	  }
    #####: 3108:	__throw_format_error("format error: argument used for width or "
        -: 3109:			     "precision must be a non-negative integer");
        -: 3110:      }
------------------
unsigned long std::__format::_WidthPrecVisitor::operator()<unsigned __int128>(unsigned __int128&) const:
function unsigned long std::__format::_WidthPrecVisitor::operator()<unsigned __int128>(unsigned __int128&) const called 0 returned 0% blocks executed 0%
    #####: 3091:      operator()(_Tp& __arg) const
        -: 3092:      {
        -: 3093:	if constexpr (is_same_v<_Tp, monostate>)
        -: 3094:	  __format::__invalid_arg_id_in_format_string();
        -: 3095:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3096:	// 3720. Restrict the valid types of arg-id for width and precision
        -: 3097:	// 3721. Allow an arg-id with a value of zero for width
        -: 3098:	else if constexpr (sizeof(_Tp) <= sizeof(long long))
        -: 3099:	  {
        -: 3100:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3101:	    // 3720. Restrict the valid types of arg-id for width and precision
        -: 3102:	    if constexpr (__is_unsigned_integer<_Tp>::value)
        -: 3103:	      return __arg;
        -: 3104:	    else if constexpr (__is_signed_integer<_Tp>::value)
        -: 3105:	      if (__arg >= 0)
        -: 3106:		return __arg;
        -: 3107:	  }
    #####: 3108:	__throw_format_error("format error: argument used for width or "
        -: 3109:			     "precision must be a non-negative integer");
        -: 3110:      }
------------------
unsigned long std::__format::_WidthPrecVisitor::operator()<_Float128>(_Float128&) const:
function unsigned long std::__format::_WidthPrecVisitor::operator()<_Float128>(_Float128&) const called 0 returned 0% blocks executed 0%
    #####: 3091:      operator()(_Tp& __arg) const
        -: 3092:      {
        -: 3093:	if constexpr (is_same_v<_Tp, monostate>)
        -: 3094:	  __format::__invalid_arg_id_in_format_string();
        -: 3095:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3096:	// 3720. Restrict the valid types of arg-id for width and precision
        -: 3097:	// 3721. Allow an arg-id with a value of zero for width
        -: 3098:	else if constexpr (sizeof(_Tp) <= sizeof(long long))
        -: 3099:	  {
        -: 3100:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3101:	    // 3720. Restrict the valid types of arg-id for width and precision
        -: 3102:	    if constexpr (__is_unsigned_integer<_Tp>::value)
        -: 3103:	      return __arg;
        -: 3104:	    else if constexpr (__is_signed_integer<_Tp>::value)
        -: 3105:	      if (__arg >= 0)
        -: 3106:		return __arg;
        -: 3107:	  }
    #####: 3108:	__throw_format_error("format error: argument used for width or "
        -: 3109:			     "precision must be a non-negative integer");
        -: 3110:      }
------------------
unsigned long std::__format::_WidthPrecVisitor::operator()<char>(char&) const:
function unsigned long std::__format::_WidthPrecVisitor::operator()<char>(char&) const called 0 returned 0% blocks executed 0%
    #####: 3091:      operator()(_Tp& __arg) const
        -: 3092:      {
        -: 3093:	if constexpr (is_same_v<_Tp, monostate>)
        -: 3094:	  __format::__invalid_arg_id_in_format_string();
        -: 3095:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3096:	// 3720. Restrict the valid types of arg-id for width and precision
        -: 3097:	// 3721. Allow an arg-id with a value of zero for width
        -: 3098:	else if constexpr (sizeof(_Tp) <= sizeof(long long))
        -: 3099:	  {
        -: 3100:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3101:	    // 3720. Restrict the valid types of arg-id for width and precision
        -: 3102:	    if constexpr (__is_unsigned_integer<_Tp>::value)
        -: 3103:	      return __arg;
        -: 3104:	    else if constexpr (__is_signed_integer<_Tp>::value)
        -: 3105:	      if (__arg >= 0)
        -: 3106:		return __arg;
        -: 3107:	  }
    #####: 3108:	__throw_format_error("format error: argument used for width or "
        -: 3109:			     "precision must be a non-negative integer");
        -: 3110:      }
------------------
unsigned long std::__format::_WidthPrecVisitor::operator()<char const*>(char const*&) const:
function unsigned long std::__format::_WidthPrecVisitor::operator()<char const*>(char const*&) const called 0 returned 0% blocks executed 0%
    #####: 3091:      operator()(_Tp& __arg) const
        -: 3092:      {
        -: 3093:	if constexpr (is_same_v<_Tp, monostate>)
        -: 3094:	  __format::__invalid_arg_id_in_format_string();
        -: 3095:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3096:	// 3720. Restrict the valid types of arg-id for width and precision
        -: 3097:	// 3721. Allow an arg-id with a value of zero for width
        -: 3098:	else if constexpr (sizeof(_Tp) <= sizeof(long long))
        -: 3099:	  {
        -: 3100:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3101:	    // 3720. Restrict the valid types of arg-id for width and precision
        -: 3102:	    if constexpr (__is_unsigned_integer<_Tp>::value)
        -: 3103:	      return __arg;
        -: 3104:	    else if constexpr (__is_signed_integer<_Tp>::value)
        -: 3105:	      if (__arg >= 0)
        -: 3106:		return __arg;
        -: 3107:	  }
    #####: 3108:	__throw_format_error("format error: argument used for width or "
        -: 3109:			     "precision must be a non-negative integer");
        -: 3110:      }
------------------
unsigned long std::__format::_WidthPrecVisitor::operator()<std::basic_string_view<char, std::char_traits<char> > >(std::basic_string_view<char, std::char_traits<char> >&) const:
function unsigned long std::__format::_WidthPrecVisitor::operator()<std::basic_string_view<char, std::char_traits<char> > >(std::basic_string_view<char, std::char_traits<char> >&) const called 0 returned 0% blocks executed 0%
    #####: 3091:      operator()(_Tp& __arg) const
        -: 3092:      {
        -: 3093:	if constexpr (is_same_v<_Tp, monostate>)
        -: 3094:	  __format::__invalid_arg_id_in_format_string();
        -: 3095:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3096:	// 3720. Restrict the valid types of arg-id for width and precision
        -: 3097:	// 3721. Allow an arg-id with a value of zero for width
        -: 3098:	else if constexpr (sizeof(_Tp) <= sizeof(long long))
        -: 3099:	  {
        -: 3100:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3101:	    // 3720. Restrict the valid types of arg-id for width and precision
        -: 3102:	    if constexpr (__is_unsigned_integer<_Tp>::value)
        -: 3103:	      return __arg;
        -: 3104:	    else if constexpr (__is_signed_integer<_Tp>::value)
        -: 3105:	      if (__arg >= 0)
        -: 3106:		return __arg;
        -: 3107:	  }
    #####: 3108:	__throw_format_error("format error: argument used for width or "
        -: 3109:			     "precision must be a non-negative integer");
        -: 3110:      }
------------------
        -: 3111:  };
        -: 3112:
        -: 3113:  template<typename _Context>
        -: 3114:    inline size_t
function unsigned long std::__format::__int_from_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&) called 0 returned 0% blocks executed 0%
    #####: 3115:    __int_from_arg(const basic_format_arg<_Context>& __arg)
    #####: 3116:    { return std::visit_format_arg(_WidthPrecVisitor(), __arg); }
    %%%%%: 3116-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3116-block  1
    %%%%%: 3116-block  2
    %%%%%: 3116-block  3
        -: 3117:
        -: 3118:  // Pack _Arg_t enum values into a single 60-bit integer.
        -: 3119:  template<int _Bits, size_t _Nm>
        -: 3120:    constexpr auto
function auto std::__format::__pack_arg_types<5, 1ul>(std::array<std::__format::_Arg_t, 1ul> const&) called 0 returned 0% blocks executed 0%
    #####: 3121:    __pack_arg_types(const array<_Arg_t, _Nm>& __types)
        -: 3122:    {
    #####: 3123:      __UINT64_TYPE__ __packed_types = 0;
    #####: 3124:      for (auto __i = __types.rbegin(); __i != __types.rend(); ++__i)
    %%%%%: 3124-block  0
call    0 never executed
    %%%%%: 3124-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed (fallthrough)
    #####: 3125:	__packed_types = (__packed_types << _Bits) | *__i;
    %%%%%: 3125-block  0
call    0 never executed
call    1 never executed
    #####: 3126:      return __packed_types;
    %%%%%: 3126-block  0
        -: 3127:    }
        -: 3128:} // namespace __format
        -: 3129:/// @endcond
        -: 3130:
        -: 3131:  template<typename _Context>
        -: 3132:    class basic_format_args
        -: 3133:    {
        -: 3134:      static constexpr int _S_packed_type_bits = 5; // _Arg_t values [0,20]
        -: 3135:      static constexpr int _S_packed_type_mask = 0b11111;
        -: 3136:      static constexpr int _S_max_packed_args = 12;
        -: 3137:
        -: 3138:      static_assert( __format::_Arg_max_ <= (1 << _S_packed_type_bits) );
        -: 3139:
        -: 3140:      template<typename... _Args>
        -: 3141:	using _Store = __format::_Arg_store<_Context, _Args...>;
        -: 3142:
        -: 3143:      template<typename _Ctx, typename... _Args>
        -: 3144:	friend class __format::_Arg_store;
        -: 3145:
        -: 3146:      using uint64_t = __UINT64_TYPE__;
        -: 3147:      using _Format_arg = basic_format_arg<_Context>;
        -: 3148:      using _Format_arg_val = __format::_Arg_value<_Context>;
        -: 3149:
        -: 3150:      // If args are packed then the number of args is in _M_packed_size and
        -: 3151:      // the packed types are in _M_unpacked_size, accessed via _M_type(i).
        -: 3152:      // If args are not packed then the number of args is in _M_unpacked_size
        -: 3153:      // and _M_packed_size is zero.
        -: 3154:      uint64_t _M_packed_size : 4;
        -: 3155:      uint64_t _M_unpacked_size : 60;
        -: 3156:
        -: 3157:      union {
        -: 3158:	const _Format_arg_val* _M_values; // Active when _M_packed_size != 0
        -: 3159:	const _Format_arg* _M_args;       // Active when _M_packed_size == 0
        -: 3160:      };
        -: 3161:
        -: 3162:      size_t
        -: 3163:      _M_size() const noexcept
        -: 3164:      { return _M_packed_size ? _M_packed_size : _M_unpacked_size; }
        -: 3165:
        -: 3166:      typename __format::_Arg_t
function std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::_M_type(unsigned long) const called 0 returned 0% blocks executed 0%
    #####: 3167:      _M_type(size_t __i) const noexcept
        -: 3168:      {
    #####: 3169:	uint64_t __t = _M_unpacked_size >> (__i * _S_packed_type_bits);
    #####: 3170:	return static_cast<__format::_Arg_t>(__t & _S_packed_type_mask);
    %%%%%: 3170-block  0
        -: 3171:      }
        -: 3172:
        -: 3173:      template<typename _Ctx, typename... _Args>
        -: 3174:	friend auto
        -: 3175:	make_format_args(_Args&&...) noexcept;
        -: 3176:
        -: 3177:      // An array of _Arg_t enums corresponding to _Args...
        -: 3178:      template<typename... _Args>
        -: 3179:	static consteval array<__format::_Arg_t, sizeof...(_Args)>
        -: 3180:	_S_types_to_pack()
        -: 3181:	{ return {_Format_arg::template _S_to_enum<_Args>()...}; }
        -: 3182:
        -: 3183:    public:
        -: 3184:      basic_format_args() noexcept = default;
        -: 3185:
        -: 3186:      template<typename... _Args>
        -: 3187:	basic_format_args(const _Store<_Args...>& __store) noexcept;
        -: 3188:
        -: 3189:      [[nodiscard,__gnu__::__always_inline__]]
        -: 3190:      basic_format_arg<_Context>
        -: 3191:      get(size_t __i) const noexcept
        -: 3192:      {
        -: 3193:	basic_format_arg<_Context> __arg;
    #####: 3194:	if (__i < _M_packed_size)
    %%%%%: 3194-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 3195:	  {
    #####: 3196:	    __arg._M_type = _M_type(__i);
    %%%%%: 3196-block  0
call    0 never executed
    #####: 3197:	    __arg._M_val = _M_values[__i];
        -: 3198:	  }
    #####: 3199:	else if (_M_packed_size == 0 && __i < _M_unpacked_size)
    %%%%%: 3199-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3199-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3200:	  __arg = _M_args[__i];
    %%%%%: 3200-block  0
    #####: 3201:	return __arg;
    %%%%%: 3201-block  0
    %%%%%: 3201-block  1
        -: 3202:      }
        -: 3203:    };
        -: 3204:
        -: 3205:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 3206:  // 3810. CTAD for std::basic_format_args
        -: 3207:  template<typename _Context, typename... _Args>
        -: 3208:    basic_format_args(__format::_Arg_store<_Context, _Args...>)
        -: 3209:      -> basic_format_args<_Context>;
        -: 3210:
        -: 3211:  template<typename _Context, typename... _Args>
        -: 3212:    auto
        -: 3213:    make_format_args(_Args&&... __fmt_args) noexcept;
        -: 3214:
        -: 3215:  // An array of type-erased formatting arguments.
        -: 3216:  template<typename _Context, typename... _Args>
        -: 3217:    class __format::_Arg_store
        -: 3218:    {
        -: 3219:      friend std::basic_format_args<_Context>;
        -: 3220:
        -: 3221:      template<typename _Ctx, typename... _Argz>
        -: 3222:	friend auto
        -: 3223:	std::make_format_args(_Argz&&...) noexcept;
        -: 3224:
        -: 3225:      // For a sufficiently small number of arguments we only store values.
        -: 3226:      // basic_format_args can get the types from the _Args pack.
        -: 3227:      static constexpr bool _S_values_only
        -: 3228:	= sizeof...(_Args) <= basic_format_args<_Context>::_S_max_packed_args;
        -: 3229:
        -: 3230:      using _Element_t
        -: 3231:	= __conditional_t<_S_values_only,
        -: 3232:			  __format::_Arg_value<_Context>,
        -: 3233:			  basic_format_arg<_Context>>;
        -: 3234:
        -: 3235:      _Element_t _M_args[sizeof...(_Args)];
        -: 3236:
        -: 3237:      template<typename _Tp>
        -: 3238:	static _Element_t
    #####: 3239:	_S_make_elt(_Tp& __v)
        -: 3240:	{
    #####: 3241:	  basic_format_arg<_Context> __arg(__v);
        -: 3242:	  if constexpr (_S_values_only)
    #####: 3243:	    return __arg._M_val;
        -: 3244:	  else
        -: 3245:	    return __arg;
        -: 3246:	}
------------------
std::__format::_Arg_value<std::basic_format_context<std::__format::_Sink_iter<char>, char> > std::__format::_Arg_store<std::basic_format_context<std::__format::_Sink_iter<char>, char>, int>::_S_make_elt<int const>(int const&):
function std::__format::_Arg_value<std::basic_format_context<std::__format::_Sink_iter<char>, char> > std::__format::_Arg_store<std::basic_format_context<std::__format::_Sink_iter<char>, char>, int>::_S_make_elt<int const>(int const&) called 0 returned 0% blocks executed 0%
    #####: 3239:	_S_make_elt(_Tp& __v)
        -: 3240:	{
    #####: 3241:	  basic_format_arg<_Context> __arg(__v);
    %%%%%: 3241-block  0
call    0 never executed
        -: 3242:	  if constexpr (_S_values_only)
    #####: 3243:	    return __arg._M_val;
        -: 3244:	  else
        -: 3245:	    return __arg;
        -: 3246:	}
------------------
std::__format::_Arg_value<std::basic_format_context<std::__format::_Sink_iter<char>, char> > std::__format::_Arg_store<std::basic_format_context<std::__format::_Sink_iter<char>, char>, int>::_S_make_elt<int>(int&):
function std::__format::_Arg_value<std::basic_format_context<std::__format::_Sink_iter<char>, char> > std::__format::_Arg_store<std::basic_format_context<std::__format::_Sink_iter<char>, char>, int>::_S_make_elt<int>(int&) called 0 returned 0% blocks executed 0%
    #####: 3239:	_S_make_elt(_Tp& __v)
        -: 3240:	{
    #####: 3241:	  basic_format_arg<_Context> __arg(__v);
    %%%%%: 3241-block  0
call    0 never executed
        -: 3242:	  if constexpr (_S_values_only)
    #####: 3243:	    return __arg._M_val;
        -: 3244:	  else
        -: 3245:	    return __arg;
        -: 3246:	}
------------------
        -: 3247:
        -: 3248:      template<typename... _Tp>
        -: 3249:	requires (sizeof...(_Tp) == sizeof...(_Args))
        -: 3250:	[[__gnu__::__always_inline__]]
    #####: 3251:	_Arg_store(_Tp&... __a) noexcept
    #####: 3252:	: _M_args{_S_make_elt(__a)...}
    #####: 3253:	{ }
        -: 3254:    };
        -: 3255:
        -: 3256:  template<typename _Context>
        -: 3257:    class __format::_Arg_store<_Context>
        -: 3258:    { };
        -: 3259:
        -: 3260:  template<typename _Context>
        -: 3261:    template<typename... _Args>
function std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::basic_format_args<int>(std::__format::_Arg_store<std::basic_format_context<std::__format::_Sink_iter<char>, char>, int> const&) called 0 returned 0% blocks executed 0%
    #####: 3262:      basic_format_args<_Context>::
        -: 3263:      basic_format_args(const _Store<_Args...>& __store) noexcept
        -: 3264:      {
        -: 3265:	if constexpr (sizeof...(_Args) == 0)
        -: 3266:	  {
        -: 3267:	    _M_packed_size = 0;
        -: 3268:	    _M_unpacked_size = 0;
        -: 3269:	    _M_args = nullptr;
        -: 3270:	  }
        -: 3271:	else if constexpr (sizeof...(_Args) <= _S_max_packed_args)
        -: 3272:	  {
        -: 3273:	    // The number of packed arguments:
    #####: 3274:	    _M_packed_size = sizeof...(_Args);
        -: 3275:	    // The packed type enums:
        -: 3276:	    _M_unpacked_size
    #####: 3277:	      = __format::__pack_arg_types<_S_packed_type_bits>(_S_types_to_pack<_Args...>());
    %%%%%: 3277-block  0
call    0 never executed
        -: 3278:	    // The _Arg_value objects.
    #####: 3279:	    _M_values = __store._M_args;
        -: 3280:	  }
        -: 3281:	else
        -: 3282:	  {
        -: 3283:	    // No packed arguments:
        -: 3284:	    _M_packed_size = 0;
        -: 3285:	    // The number of unpacked arguments:
        -: 3286:	    _M_unpacked_size = sizeof...(_Args);
        -: 3287:	    // The basic_format_arg objects:
        -: 3288:	    _M_args = __store._M_args;
        -: 3289:	  }
    #####: 3290:      }
        -: 3291:
        -: 3292:  /// Capture formatting arguments for use by `std::vformat`.
        -: 3293:  template<typename _Context = format_context, typename... _Args>
        -: 3294:    [[nodiscard,__gnu__::__always_inline__]]
        -: 3295:    inline auto
        -: 3296:    make_format_args(_Args&&... __fmt_args) noexcept
        -: 3297:    {
        -: 3298:      using _Fmt_arg = basic_format_arg<_Context>;
        -: 3299:      using _Store = __format::_Arg_store<_Context, typename _Fmt_arg::template
        -: 3300:		     _Normalize<remove_reference_t<_Args>>...>;
    #####: 3301:      return _Store(__fmt_args...);
    %%%%%: 3301-block  0
    %%%%%: 3301-block  1
    %%%%%: 3301-block  2
    %%%%%: 3301-block  3
    %%%%%: 3301-block  4
    %%%%%: 3301-block  5
        -: 3302:    }
        -: 3303:
        -: 3304:  /// Capture formatting arguments for use by `std::vformat` (for wide output).
        -: 3305:  template<typename... _Args>
        -: 3306:    [[nodiscard,__gnu__::__always_inline__]]
        -: 3307:    inline auto
        -: 3308:    make_wformat_args(_Args&&... __args) noexcept
        -: 3309:    { return std::make_format_args<wformat_context>(__args...); }
        -: 3310:
        -: 3311:/// @cond undocumented
        -: 3312:namespace __format
        -: 3313:{
        -: 3314:  template<typename _Out, typename _CharT, typename _Context>
        -: 3315:    _Out
        -: 3316:    __do_vformat_to(_Out, basic_string_view<_CharT>,
        -: 3317:		    const basic_format_args<_Context>&,
        -: 3318:		    const locale* = nullptr);
        -: 3319:} // namespace __format
        -: 3320:/// @endcond
        -: 3321:
        -: 3322:  /** Context for std::format and similar functions.
        -: 3323:   *
        -: 3324:   * A formatting context contains an output iterator and locale to use
        -: 3325:   * for the formatting operations. Most programs will never need to use
        -: 3326:   * this class template explicitly. For typical uses of `std::format` the
        -: 3327:   * library will use the specializations `std::format_context` (for `char`)
        -: 3328:   * and `std::wformat_context` (for `wchar_t`).
        -: 3329:   */
        -: 3330:  template<typename _Out, typename _CharT>
        -: 3331:    class basic_format_context
        -: 3332:    {
        -: 3333:      static_assert( output_iterator<_Out, const _CharT&> );
        -: 3334:
        -: 3335:      basic_format_args<basic_format_context> _M_args;
        -: 3336:      _Out _M_out;
        -: 3337:      __format::_Optional_locale _M_loc;
        -: 3338:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::basic_format_context(std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> >, std::__format::_Sink_iter<char>) called 0 returned 0% blocks executed 0%
    #####: 3339:      basic_format_context(basic_format_args<basic_format_context> __args,
        -: 3340:			   _Out __out)
    #####: 3341:      : _M_args(__args), _M_out(std::move(__out))
    %%%%%: 3341-block  0
call    0 never executed
    #####: 3342:      { }
        -: 3343:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::basic_format_context(std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> >, std::__format::_Sink_iter<char>, std::locale const&) called 0 returned 0% blocks executed 0%
    #####: 3344:      basic_format_context(basic_format_args<basic_format_context> __args,
        -: 3345:			   _Out __out, const std::locale& __loc)
    #####: 3346:      : _M_args(__args), _M_out(std::move(__out)), _M_loc(__loc)
    %%%%%: 3346-block  0
call    0 never executed
call    1 never executed
    #####: 3347:      { }
        -: 3348:
        -: 3349:      template<typename _Out2, typename _CharT2, typename _Context2>
        -: 3350:	friend _Out2
        -: 3351:	__format::__do_vformat_to(_Out2, basic_string_view<_CharT2>,
        -: 3352:				  const basic_format_args<_Context2>&,
        -: 3353:				  const locale*);
        -: 3354:
        -: 3355:    public:
        -: 3356:      basic_format_context() = default;
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::~basic_format_context() called 0 returned 0% blocks executed 0%
    #####: 3357:      ~basic_format_context() = default;
    %%%%%: 3357-block  0
call    0 never executed
        -: 3358:
        -: 3359:      using iterator = _Out;
        -: 3360:      using char_type = _CharT;
        -: 3361:      template<typename _Tp>
        -: 3362:	using formatter_type = formatter<_Tp, _CharT>;
        -: 3363:
        -: 3364:      [[nodiscard]]
        -: 3365:      basic_format_arg<basic_format_context>
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::arg(unsigned long) const called 0 returned 0% blocks executed 0%
    #####: 3366:      arg(size_t __id) const noexcept
    #####: 3367:      { return _M_args.get(__id); }
    %%%%%: 3367-block  0
    %%%%%: 3367-block  1
        -: 3368:
        -: 3369:      [[nodiscard]]
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::locale() called 0 returned 0% blocks executed 0%
    #####: 3370:      std::locale locale() { return _M_loc.value(); }
    %%%%%: 3370-block  0
call    0 never executed
call    1 never executed
        -: 3371:
        -: 3372:      [[nodiscard]]
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::out() called 0 returned 0% blocks executed 0%
    #####: 3373:      iterator out() { return std::move(_M_out); }
    %%%%%: 3373-block  0
call    0 never executed
        -: 3374:
function std::basic_format_context<std::__format::_Sink_iter<char>, char>::advance_to(std::__format::_Sink_iter<char>) called 0 returned 0% blocks executed 0%
    #####: 3375:      void advance_to(iterator __it) { _M_out = std::move(__it); }
    %%%%%: 3375-block  0
call    0 never executed
        -: 3376:    };
        -: 3377:
        -: 3378:
        -: 3379:/// @cond undocumented
        -: 3380:namespace __format
        -: 3381:{
        -: 3382:  template<typename _Ctx, typename _CharT>
        -: 3383:    [[__gnu__::__always_inline__]]
        -: 3384:    inline void
        -: 3385:    __write(_Ctx& __ctx, basic_string_view<_CharT> __str)
        -: 3386:    requires requires { { __ctx.out() } -> output_iterator<const _CharT&>; }
        -: 3387:    {
        -: 3388:      __ctx.advance_to(__format::__write(__ctx.out()));
        -: 3389:    }
        -: 3390:
        -: 3391:  // Abstract base class defining an interface for scanning format strings.
        -: 3392:  // Scan the characters in a format string, dividing it up into strings of
        -: 3393:  // ordinary characters, escape sequences, and replacement fields.
        -: 3394:  // Call virtual functions for derived classes to parse format-specifiers
        -: 3395:  // or write formatted output.
        -: 3396:  template<typename _CharT>
        -: 3397:    struct _Scanner
        -: 3398:    {
        -: 3399:      using iterator = typename basic_format_parse_context<_CharT>::iterator;
        -: 3400:
        -: 3401:      basic_format_parse_context<_CharT> _M_pc;
        -: 3402:
        -: 3403:      constexpr explicit
function std::__format::_Scanner<char>::_Scanner(std::basic_string_view<char, std::char_traits<char> >, unsigned long) called 0 returned 0% blocks executed 0%
    #####: 3404:      _Scanner(basic_string_view<_CharT> __str, size_t __nargs = -1)
    #####: 3405:      : _M_pc(__str, __nargs)
    %%%%%: 3405-block  0
call    0 never executed
    #####: 3406:      { }
        -: 3407:
function std::__format::_Scanner<char>::begin() const called 0 returned 0% blocks executed 0%
    #####: 3408:      constexpr iterator begin() const noexcept { return _M_pc.begin(); }
    %%%%%: 3408-block  0
call    0 never executed
function std::__format::_Scanner<char>::end() const called 0 returned 0% blocks executed 0%
    #####: 3409:      constexpr iterator end() const noexcept { return _M_pc.end(); }
    %%%%%: 3409-block  0
call    0 never executed
        -: 3410:
        -: 3411:      constexpr void
function std::__format::_Scanner<char>::_M_scan() called 0 returned 0% blocks executed 0%
    #####: 3412:      _M_scan()
        -: 3413:      {
    #####: 3414:	basic_string_view<_CharT> __fmt = _M_fmt_str();
    %%%%%: 3414-block  0
call    0 never executed
        -: 3415:
    #####: 3416:	if (__fmt.size() == 2 && __fmt[0] == '{' && __fmt[1] == '}')
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3416-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 3416-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed
    %%%%%: 3416-block  2
    %%%%%: 3416-block  3
    %%%%%: 3416-block  4
branch  9 never executed (fallthrough)
branch 10 never executed
        -: 3417:	  {
    #####: 3418:	    _M_pc.advance_to(begin() + 1);
    %%%%%: 3418-block  0
call    0 never executed
call    1 never executed
    #####: 3419:	    _M_format_arg(_M_pc.next_arg_id());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3419-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 3420:	    return;
    %%%%%: 3420-block  0
    %%%%%: 3420-block  1
        -: 3421:	  }
        -: 3422:
    #####: 3423:	size_t __lbr = __fmt.find('{');
    %%%%%: 3423-block  0
call    0 never executed
    #####: 3424:	size_t __rbr = __fmt.find('}');
call    0 never executed
        -: 3425:
    #####: 3426:	while (__fmt.size())
    %%%%%: 3426-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -: 3427:	  {
    #####: 3428:	    auto __cmp = __lbr <=> __rbr;
    %%%%%: 3428-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3428-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 3428-block  2
    %%%%%: 3428-block  3
    %%%%%: 3428-block  4
    #####: 3429:	    if (__cmp == 0)
    %%%%%: 3429-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 3430:	      {
    #####: 3431:		_M_on_chars(end());
    %%%%%: 3431-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 3432:		_M_pc.advance_to(end());
    %%%%%: 3432-block  0
call    0 never executed
call    1 never executed
    #####: 3433:		return;
        -: 3434:	      }
    #####: 3435:	    else if (__cmp < 0)
    %%%%%: 3435-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 3436:	      {
    #####: 3437:		if (__lbr + 1 == __fmt.size()
    %%%%%: 3437-block  0
call    0 never executed
    #####: 3438:		      || (__rbr == __fmt.npos && __fmt[__lbr + 1] != '{'))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3438-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 3438-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 3438-block  2
    %%%%%: 3438-block  3
    %%%%%: 3438-block  4
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 3439:		  __format::__unmatched_left_brace_in_format_string();
    %%%%%: 3439-block  0
call    0 never executed
    #####: 3440:		const bool __is_escape = __fmt[__lbr + 1] == '{';
    %%%%%: 3440-block  0
call    0 never executed
    #####: 3441:		iterator __last = begin() + __lbr + int(__is_escape);
call    0 never executed
    #####: 3442:		_M_on_chars(__last);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3443:		_M_pc.advance_to(__last + 1);
    %%%%%: 3443-block  0
call    0 never executed
    #####: 3444:		__fmt = _M_fmt_str();
call    0 never executed
    #####: 3445:		if (__is_escape)
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 3446:		  {
    #####: 3447:		    if (__rbr != __fmt.npos)
    %%%%%: 3447-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3448:		      __rbr -= __lbr + 2;
    %%%%%: 3448-block  0
    #####: 3449:		    __lbr = __fmt.find('{');
    %%%%%: 3449-block  0
call    0 never executed
        -: 3450:		  }
        -: 3451:		else
        -: 3452:		  {
    #####: 3453:		    _M_on_replacement_field();
    %%%%%: 3453-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3454:		    __fmt = _M_fmt_str();
    %%%%%: 3454-block  0
call    0 never executed
    #####: 3455:		    __lbr = __fmt.find('{');
call    0 never executed
    #####: 3456:		    __rbr = __fmt.find('}');
call    0 never executed
        -: 3457:		  }
        -: 3458:	      }
        -: 3459:	    else
        -: 3460:	      {
    #####: 3461:		if (++__rbr == __fmt.size() || __fmt[__rbr] != '}')
    %%%%%: 3461-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3461-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 3461-block  2
    %%%%%: 3461-block  3
    %%%%%: 3461-block  4
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 3462:		  __format::__unmatched_right_brace_in_format_string();
    %%%%%: 3462-block  0
call    0 never executed
    #####: 3463:		iterator __last = begin() + __rbr;
    %%%%%: 3463-block  0
call    0 never executed
    #####: 3464:		_M_on_chars(__last);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3465:		_M_pc.advance_to(__last + 1);
    %%%%%: 3465-block  0
call    0 never executed
    #####: 3466:		__fmt = _M_fmt_str();
call    0 never executed
    #####: 3467:		if (__lbr != __fmt.npos)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3468:		  __lbr -= __rbr + 1;
    %%%%%: 3468-block  0
    #####: 3469:		__rbr = __fmt.find('}');
    %%%%%: 3469-block  0
call    0 never executed
        -: 3470:	      }
        -: 3471:	  }
        -: 3472:      }
        -: 3473:
        -: 3474:      constexpr basic_string_view<_CharT>
function std::__format::_Scanner<char>::_M_fmt_str() const called 0 returned 0% blocks executed 0%
    #####: 3475:      _M_fmt_str() const noexcept
    #####: 3476:      { return {begin(), end()}; }
    %%%%%: 3476-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%: 3476-block  1
        -: 3477:
function std::__format::_Scanner<char>::_M_on_chars(char const*) called 0 returned 0% blocks executed 0%
    #####: 3478:      constexpr virtual void _M_on_chars(iterator) { }
        -: 3479:
function std::__format::_Scanner<char>::_M_on_replacement_field() called 0 returned 0% blocks executed 0%
    #####: 3480:      constexpr void _M_on_replacement_field()
        -: 3481:      {
    #####: 3482:	auto __next = begin();
    %%%%%: 3482-block  0
call    0 never executed
        -: 3483:
        -: 3484:	size_t __id;
    #####: 3485:	if (*__next == '}')
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3486:	  __id = _M_pc.next_arg_id();
    %%%%%: 3486-block  0
call    0 never executed
    #####: 3487:	else if (*__next == ':')
    %%%%%: 3487-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 3488:	  {
    #####: 3489:	    __id = _M_pc.next_arg_id();
    %%%%%: 3489-block  0
call    0 never executed
    #####: 3490:	    _M_pc.advance_to(++__next);
call    0 never executed
        -: 3491:	  }
        -: 3492:	else
        -: 3493:	  {
    #####: 3494:	    auto [__i, __ptr] = __format::__parse_arg_id(begin(), end());
    %%%%%: 3494-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 3494-block  1
call    5 never executed
call    6 never executed
    #####: 3495:	    if (!__ptr || !(*__ptr == '}' || *__ptr == ':'))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3495-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 3495-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 3496:	      __format::__invalid_arg_id_in_format_string();
    %%%%%: 3496-block  0
call    0 never executed
    #####: 3497:	    _M_pc.check_arg_id(__id = __i);
    %%%%%: 3497-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3498:	    if (*__ptr == ':')
    %%%%%: 3498-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 3499:	      {
    #####: 3500:		_M_pc.advance_to(++__ptr);
    %%%%%: 3500-block  0
call    0 never executed
        -: 3501:	      }
        -: 3502:	    else
    #####: 3503:	      _M_pc.advance_to(__ptr);
    %%%%%: 3503-block  0
call    0 never executed
        -: 3504:	  }
    #####: 3505:	_M_format_arg(__id);
    %%%%%: 3505-block  0
call    0 never executed
    #####: 3506:	_M_pc.advance_to(_M_pc.begin() + 1); // Move past '}'
call    0 never executed
call    1 never executed
    #####: 3507:      }
        -: 3508:
        -: 3509:      constexpr virtual void _M_format_arg(size_t __id) = 0;
        -: 3510:    };
        -: 3511:
        -: 3512:  // Process a format string and format the arguments in the context.
        -: 3513:  template<typename _Out, typename _CharT>
        -: 3514:    class _Formatting_scanner : public _Scanner<_CharT>
        -: 3515:    {
        -: 3516:    public:
function std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_Formatting_scanner(std::basic_format_context<std::__format::_Sink_iter<char>, char>&, std::basic_string_view<char, std::char_traits<char> >) called 0 returned 0% blocks executed 0%
    #####: 3517:      _Formatting_scanner(basic_format_context<_Out, _CharT>& __fc,
        -: 3518:			  basic_string_view<_CharT> __str)
    #####: 3519:      : _Scanner<_CharT>(__str), _M_fc(__fc)
    %%%%%: 3519-block  0
call    0 never executed
    #####: 3520:      { }
        -: 3521:
        -: 3522:    private:
        -: 3523:      basic_format_context<_Out, _CharT>& _M_fc;
        -: 3524:
        -: 3525:      using iterator = typename _Scanner<_CharT>::iterator;
        -: 3526:
        -: 3527:      void
function std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_on_chars(char const*) called 0 returned 0% blocks executed 0%
    #####: 3528:      _M_on_chars(iterator __last) override
        -: 3529:      {
    #####: 3530:	basic_string_view<_CharT> __str(this->begin(), __last);
    %%%%%: 3530-block  0
call    0 never executed
call    1 never executed
    #####: 3531:	_M_fc.advance_to(__format::__write(_M_fc.out(), __str));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 3531-block  0
call    4 never executed
    #####: 3532:      }
        -: 3533:
        -: 3534:      void
function std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long) called 0 returned 0% blocks executed 0%
    #####: 3535:      _M_format_arg(size_t __id) override
        -: 3536:      {
        -: 3537:	using _Context = basic_format_context<_Out, _CharT>;
        -: 3538:	using handle = typename basic_format_arg<_Context>::handle;
        -: 3539:
    #####: 3540:	std::visit_format_arg([this](auto& __arg) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
------------------
auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<double>(double&) const:
function auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<double>(double&) const called 0 returned 0% blocks executed 0%
    #####: 3540:	std::visit_format_arg([this](auto& __arg) {
------------------
auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<std::monostate>(std::monostate&) const:
function auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<std::monostate>(std::monostate&) const called 0 returned 0% blocks executed 0%
    #####: 3540:	std::visit_format_arg([this](auto& __arg) {
------------------
auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<bool>(bool&) const:
function auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<bool>(bool&) const called 0 returned 0% blocks executed 0%
    #####: 3540:	std::visit_format_arg([this](auto& __arg) {
------------------
auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<char>(char&) const:
function auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<char>(char&) const called 0 returned 0% blocks executed 0%
    #####: 3540:	std::visit_format_arg([this](auto& __arg) {
------------------
auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<int>(int&) const:
function auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<int>(int&) const called 0 returned 0% blocks executed 0%
    #####: 3540:	std::visit_format_arg([this](auto& __arg) {
------------------
auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<unsigned int>(unsigned int&) const:
function auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<unsigned int>(unsigned int&) const called 0 returned 0% blocks executed 0%
    #####: 3540:	std::visit_format_arg([this](auto& __arg) {
------------------
auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<long long>(long long&) const:
function auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<long long>(long long&) const called 0 returned 0% blocks executed 0%
    #####: 3540:	std::visit_format_arg([this](auto& __arg) {
------------------
auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<unsigned long long>(unsigned long long&) const:
function auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<unsigned long long>(unsigned long long&) const called 0 returned 0% blocks executed 0%
    #####: 3540:	std::visit_format_arg([this](auto& __arg) {
------------------
auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<float>(float&) const:
function auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<float>(float&) const called 0 returned 0% blocks executed 0%
    #####: 3540:	std::visit_format_arg([this](auto& __arg) {
------------------
auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<_Float128>(_Float128&) const:
function auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<_Float128>(_Float128&) const called 0 returned 0% blocks executed 0%
    #####: 3540:	std::visit_format_arg([this](auto& __arg) {
------------------
auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<long double>(long double&) const:
function auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<long double>(long double&) const called 0 returned 0% blocks executed 0%
    #####: 3540:	std::visit_format_arg([this](auto& __arg) {
------------------
auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<char const*>(char const*&) const:
function auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<char const*>(char const*&) const called 0 returned 0% blocks executed 0%
    #####: 3540:	std::visit_format_arg([this](auto& __arg) {
------------------
auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<std::basic_string_view<char, std::char_traits<char> > >(std::basic_string_view<char, std::char_traits<char> >&) const:
function auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<std::basic_string_view<char, std::char_traits<char> > >(std::basic_string_view<char, std::char_traits<char> >&) const called 0 returned 0% blocks executed 0%
    #####: 3540:	std::visit_format_arg([this](auto& __arg) {
------------------
auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<void const*>(void const*&) const:
function auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<void const*>(void const*&) const called 0 returned 0% blocks executed 0%
    #####: 3540:	std::visit_format_arg([this](auto& __arg) {
------------------
auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle>(std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle&) const:
function auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle>(std::basic_format_arg<std::basic_format_context<std::__format::_Sink_iter<char>, char> >::handle&) const called 0 returned 0% blocks executed 0%
    #####: 3540:	std::visit_format_arg([this](auto& __arg) {
------------------
auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<__int128>(__int128&) const:
function auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<__int128>(__int128&) const called 0 returned 0% blocks executed 0%
    #####: 3540:	std::visit_format_arg([this](auto& __arg) {
------------------
auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<unsigned __int128>(unsigned __int128&) const:
function auto std::__format::_Formatting_scanner<std::__format::_Sink_iter<char>, char>::_M_format_arg(unsigned long)::{lambda(auto:1&)#1}::operator()<unsigned __int128>(unsigned __int128&) const called 0 returned 0% blocks executed 0%
    #####: 3540:	std::visit_format_arg([this](auto& __arg) {
------------------
        -: 3541:	  using _Type = remove_reference_t<decltype(__arg)>;
        -: 3542:	  using _Formatter = typename _Context::template formatter_type<_Type>;
        -: 3543:	  if constexpr (is_same_v<_Type, monostate>)
    #####: 3544:	    __format::__invalid_arg_id_in_format_string();
        -: 3545:	  else if constexpr (is_same_v<_Type, handle>)
    #####: 3546:	    __arg.format(this->_M_pc, this->_M_fc);
    %%%%%: 3546-block  0
call    0 never executed
        -: 3547:	  else if constexpr (is_default_constructible_v<_Formatter>)
        -: 3548:	    {
    #####: 3549:	      _Formatter __f;
    #####: 3550:	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
    %%%%%: 3550-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3550-block  1
call    3 never executed
    %%%%%: 3550-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 3550-block  3
call    7 never executed
    %%%%%: 3550-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 3550-block  5
call   11 never executed
    %%%%%: 3550-block  6
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 3550-block  7
call   15 never executed
    %%%%%: 3550-block  8
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 3550-block  9
call   19 never executed
    %%%%%: 3550-block 10
call   20 never executed
branch 21 never executed (fallthrough)
branch 22 never executed (throw)
    %%%%%: 3550-block 11
call   23 never executed
    %%%%%: 3550-block 12
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%: 3550-block 13
call   27 never executed
    %%%%%: 3550-block 14
call   28 never executed
branch 29 never executed (fallthrough)
branch 30 never executed (throw)
    %%%%%: 3550-block 15
call   31 never executed
    %%%%%: 3550-block 16
call   32 never executed
branch 33 never executed (fallthrough)
branch 34 never executed (throw)
    %%%%%: 3550-block 17
call   35 never executed
    %%%%%: 3550-block 18
call   36 never executed
branch 37 never executed (fallthrough)
branch 38 never executed (throw)
    %%%%%: 3550-block 19
call   39 never executed
    %%%%%: 3550-block 20
call   40 never executed
branch 41 never executed (fallthrough)
branch 42 never executed (throw)
    %%%%%: 3550-block 21
call   43 never executed
    %%%%%: 3550-block 22
call   44 never executed
branch 45 never executed (fallthrough)
branch 46 never executed (throw)
    %%%%%: 3550-block 23
call   47 never executed
    %%%%%: 3550-block 24
call   48 never executed
branch 49 never executed (fallthrough)
branch 50 never executed (throw)
    %%%%%: 3550-block 25
call   51 never executed
    %%%%%: 3550-block 26
call   52 never executed
branch 53 never executed (fallthrough)
branch 54 never executed (throw)
    %%%%%: 3550-block 27
call   55 never executed
    %%%%%: 3550-block 28
call   56 never executed
branch 57 never executed (fallthrough)
branch 58 never executed (throw)
    %%%%%: 3550-block 29
call   59 never executed
    #####: 3551:	      this->_M_fc.advance_to(__f.format(__arg, this->_M_fc));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3551-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 3551-block  1
call    7 never executed
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 3551-block  2
call   11 never executed
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 3551-block  3
call   15 never executed
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 3551-block  4
call   19 never executed
call   20 never executed
branch 21 never executed (fallthrough)
branch 22 never executed (throw)
    %%%%%: 3551-block  5
call   23 never executed
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%: 3551-block  6
call   27 never executed
call   28 never executed
branch 29 never executed (fallthrough)
branch 30 never executed (throw)
    %%%%%: 3551-block  7
call   31 never executed
call   32 never executed
branch 33 never executed (fallthrough)
branch 34 never executed (throw)
    %%%%%: 3551-block  8
call   35 never executed
call   36 never executed
branch 37 never executed (fallthrough)
branch 38 never executed (throw)
    %%%%%: 3551-block  9
call   39 never executed
call   40 never executed
branch 41 never executed (fallthrough)
branch 42 never executed (throw)
    %%%%%: 3551-block 10
call   43 never executed
call   44 never executed
branch 45 never executed (fallthrough)
branch 46 never executed (throw)
    %%%%%: 3551-block 11
call   47 never executed
call   48 never executed
branch 49 never executed (fallthrough)
branch 50 never executed (throw)
    %%%%%: 3551-block 12
call   51 never executed
call   52 never executed
branch 53 never executed (fallthrough)
branch 54 never executed (throw)
    %%%%%: 3551-block 13
call   55 never executed
call   56 never executed
branch 57 never executed (fallthrough)
branch 58 never executed (throw)
    %%%%%: 3551-block 14
call   59 never executed
        -: 3552:	    }
        -: 3553:	  else
        -: 3554:	    static_assert(__format::__formattable_with<_Type, _Context>);
    #####: 3555:	}, _M_fc.arg(__id));
    %%%%%: 3555-block  0
call    0 never executed
    #####: 3556:      }
    %%%%%: 3556-block  0
        -: 3557:    };
        -: 3558:
        -: 3559:  // Validate a format string for Args.
        -: 3560:  template<typename _CharT, typename... _Args>
        -: 3561:    class _Checking_scanner : public _Scanner<_CharT>
        -: 3562:    {
        -: 3563:      static_assert(
        -: 3564:	(is_default_constructible_v<formatter<_Args, _CharT>> && ...),
        -: 3565:	"std::formatter must be specialized for each type being formatted");
        -: 3566:
        -: 3567:    public:
        -: 3568:      constexpr
        -: 3569:      _Checking_scanner(basic_string_view<_CharT> __str)
        -: 3570:      : _Scanner<_CharT>(__str, sizeof...(_Args))
        -: 3571:      { }
        -: 3572:
        -: 3573:    private:
        -: 3574:      constexpr void
        -: 3575:      _M_format_arg(size_t __id) override
        -: 3576:      {
        -: 3577:	if constexpr (sizeof...(_Args) != 0)
        -: 3578:	  {
        -: 3579:	    if (__id < sizeof...(_Args))
        -: 3580:	      {
        -: 3581:		_M_parse_format_spec<_Args...>(__id);
        -: 3582:		return;
        -: 3583:	      }
        -: 3584:	  }
        -: 3585:	__builtin_unreachable();
        -: 3586:      }
        -: 3587:
        -: 3588:      template<typename _Tp, typename... _OtherArgs>
        -: 3589:	constexpr void
        -: 3590:	_M_parse_format_spec(size_t __id)
        -: 3591:	{
        -: 3592:	  if (__id == 0)
        -: 3593:	    {
        -: 3594:	      formatter<_Tp, _CharT> __f;
        -: 3595:	      this->_M_pc.advance_to(__f.parse(this->_M_pc));
        -: 3596:	    }
        -: 3597:	  else if constexpr (sizeof...(_OtherArgs) != 0)
        -: 3598:	    _M_parse_format_spec<_OtherArgs...>(__id - 1);
        -: 3599:	  else
        -: 3600:	    __builtin_unreachable();
        -: 3601:	}
        -: 3602:    };
        -: 3603:
        -: 3604:  template<typename _Out, typename _CharT, typename _Context>
        -: 3605:    inline _Out
function std::__format::_Sink_iter<char> std::__format::__do_vformat_to<std::__format::_Sink_iter<char>, char, std::basic_format_context<std::__format::_Sink_iter<char>, char> >(std::__format::_Sink_iter<char>, std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> > const&, std::locale const*) called 0 returned 0% blocks executed 0%
    #####: 3606:    __do_vformat_to(_Out __out, basic_string_view<_CharT> __fmt,
        -: 3607:		    const basic_format_args<_Context>& __args,
        -: 3608:		    const locale* __loc)
        -: 3609:    {
    #####: 3610:      _Iter_sink<_CharT, _Out> __sink(std::move(__out));
    %%%%%: 3610-block  0
call    0 never executed
    #####: 3611:      _Sink_iter<_CharT> __sink_out;
        -: 3612:
        -: 3613:      if constexpr (is_same_v<_Out, _Sink_iter<_CharT>>)
    #####: 3614:	__sink_out = __out; // Already a sink iterator, safe to use post-move.
        -: 3615:      else
        -: 3616:	__sink_out = __sink.out();
        -: 3617:
    #####: 3618:      auto __ctx = __loc == nullptr
    %%%%%: 3618-block  0
call    0 never executed
    %%%%%: 3618-block  1
call    1 never executed
    #####: 3619:		     ? _Context(__args, __sink_out)
    %%%%%: 3619-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 3620:		     : _Context(__args, __sink_out, *__loc);
    #####: 3621:      _Formatting_scanner<_Sink_iter<_CharT>, _CharT> __scanner(__ctx, __fmt);
    %%%%%: 3621-block  0
call    0 never executed
    #####: 3622:      __scanner._M_scan();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3623:
        -: 3624:      if constexpr (is_same_v<_Out, _Sink_iter<_CharT>>)
    #####: 3625:	return __ctx.out();
    %%%%%: 3625-block  0
call    0 never executed
    %%%%%: 3625-block  1
        -: 3626:      else
        -: 3627:	return std::move(__sink)._M_finish().out;
    #####: 3628:    }
call    0 never executed
    $$$$$: 3628-block  0
call    1 never executed
        -: 3629:
        -: 3630:} // namespace __format
        -: 3631:/// @endcond
        -: 3632:
        -: 3633:  template<typename _CharT, typename... _Args>
        -: 3634:    template<typename _Tp>
        -: 3635:      requires convertible_to<const _Tp&, basic_string_view<_CharT>>
        -: 3636:      consteval
        -: 3637:      basic_format_string<_CharT, _Args...>::
        -: 3638:      basic_format_string(const _Tp& __s)
        -: 3639:      : _M_str(__s)
        -: 3640:      {
        -: 3641:	__format::_Checking_scanner<_CharT, remove_cvref_t<_Args>...>
        -: 3642:	  __scanner(_M_str);
        -: 3643:	__scanner._M_scan();
        -: 3644:      }
        -: 3645:
        -: 3646:  // [format.functions], formatting functions
        -: 3647:
        -: 3648:  template<typename _Out> requires output_iterator<_Out, const char&>
        -: 3649:    [[__gnu__::__always_inline__]]
        -: 3650:    inline _Out
        -: 3651:    vformat_to(_Out __out, string_view __fmt, format_args __args)
    #####: 3652:    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
    %%%%%: 3652-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 3652-block  1
        -: 3653:
        -: 3654:  template<typename _Out> requires output_iterator<_Out, const wchar_t&>
        -: 3655:    [[__gnu__::__always_inline__]]
        -: 3656:    inline _Out
        -: 3657:    vformat_to(_Out __out, wstring_view __fmt, wformat_args __args)
        -: 3658:    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
        -: 3659:
        -: 3660:  template<typename _Out> requires output_iterator<_Out, const char&>
        -: 3661:    [[__gnu__::__always_inline__]]
        -: 3662:    inline _Out
        -: 3663:    vformat_to(_Out __out, const locale& __loc, string_view __fmt,
        -: 3664:	       format_args __args)
        -: 3665:    { return __format::__do_vformat_to(std::move(__out), __fmt, __args, &__loc); }
        -: 3666:
        -: 3667:  template<typename _Out> requires output_iterator<_Out, const wchar_t&>
        -: 3668:    [[__gnu__::__always_inline__]]
        -: 3669:    inline _Out
        -: 3670:    vformat_to(_Out __out, const locale& __loc, wstring_view __fmt,
        -: 3671:	       wformat_args __args)
        -: 3672:    { return __format::__do_vformat_to(std::move(__out), __fmt, __args, &__loc); }
        -: 3673:
        -: 3674:  [[nodiscard]]
        -: 3675:  inline string
function std::vformat[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >, std::basic_format_args<std::basic_format_context<std::__format::_Sink_iter<char>, char> >) called 0 returned 0% blocks executed 0%
    #####: 3676:  vformat(string_view __fmt, format_args __args)
    %%%%%: 3676-block  0
call    0 never executed
        -: 3677:  {
        -: 3678:    __format::_Str_sink<char> __buf;
    #####: 3679:    std::vformat_to(__buf.out(), __fmt, __args);
    #####: 3680:    return std::move(__buf).get();
    %%%%%: 3680-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 3680-block  1
    %%%%%: 3680-block  2
    #####: 3681:  }
    %%%%%: 3681-block  0
call    0 never executed
    $$$$$: 3681-block  1
call    1 never executed
        -: 3682:
        -: 3683:  [[nodiscard]]
        -: 3684:  inline wstring
        -: 3685:  vformat(wstring_view __fmt, wformat_args __args)
        -: 3686:  {
        -: 3687:    __format::_Str_sink<wchar_t> __buf;
        -: 3688:    std::vformat_to(__buf.out(), __fmt, __args);
        -: 3689:    return std::move(__buf).get();
        -: 3690:  }
        -: 3691:
        -: 3692:  [[nodiscard]]
        -: 3693:  inline string
        -: 3694:  vformat(const locale& __loc, string_view __fmt, format_args __args)
        -: 3695:  {
        -: 3696:    __format::_Str_sink<char> __buf;
        -: 3697:    std::vformat_to(__buf.out(), __loc, __fmt, __args);
        -: 3698:    return std::move(__buf).get();
        -: 3699:  }
        -: 3700:
        -: 3701:  [[nodiscard]]
        -: 3702:  inline wstring
        -: 3703:  vformat(const locale& __loc, wstring_view __fmt, wformat_args __args)
        -: 3704:  {
        -: 3705:    __format::_Str_sink<wchar_t> __buf;
        -: 3706:    std::vformat_to(__buf.out(), __loc, __fmt, __args);
        -: 3707:    return std::move(__buf).get();
        -: 3708:  }
        -: 3709:
        -: 3710:  template<typename... _Args>
        -: 3711:    [[nodiscard]]
        -: 3712:    inline string
    #####: 3713:    format(format_string<_Args...> __fmt, _Args&&... __args)
    #####: 3714:    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
------------------
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::format<int const&>(std::basic_format_string<char, std::type_identity<int const&>::type>, int const&):
function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::format<int const&>(std::basic_format_string<char, std::type_identity<int const&>::type>, int const&) called 0 returned 0% blocks executed 0%
    #####: 3713:    format(format_string<_Args...> __fmt, _Args&&... __args)
    %%%%%: 3713-block  0
call    0 never executed
    #####: 3714:    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
    %%%%%: 3714-block  0
call    0 never executed
    %%%%%: 3714-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 3714-block  2
    %%%%%: 3714-block  3
    %%%%%: 3714-block  4
    $$$$$: 3714-block  5
------------------
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::format<int&>(std::basic_format_string<char, std::type_identity<int&>::type>, int&):
function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::format<int&>(std::basic_format_string<char, std::type_identity<int&>::type>, int&) called 0 returned 0% blocks executed 0%
    #####: 3713:    format(format_string<_Args...> __fmt, _Args&&... __args)
    %%%%%: 3713-block  0
call    0 never executed
    #####: 3714:    { return std::vformat(__fmt.get(), std::make_format_args(__args...)); }
    %%%%%: 3714-block  0
call    0 never executed
    %%%%%: 3714-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 3714-block  2
    %%%%%: 3714-block  3
    %%%%%: 3714-block  4
    $$$$$: 3714-block  5
------------------
        -: 3715:
        -: 3716:  template<typename... _Args>
        -: 3717:    [[nodiscard]]
        -: 3718:    inline wstring
        -: 3719:    format(wformat_string<_Args...> __fmt, _Args&&... __args)
        -: 3720:    { return std::vformat(__fmt.get(), std::make_wformat_args(__args...)); }
        -: 3721:
        -: 3722:  template<typename... _Args>
        -: 3723:    [[nodiscard]]
        -: 3724:    inline string
        -: 3725:    format(const locale& __loc, format_string<_Args...> __fmt,
        -: 3726:	   _Args&&... __args)
        -: 3727:    {
        -: 3728:      return std::vformat(__loc, __fmt.get(),
        -: 3729:			  std::make_format_args(__args...));
        -: 3730:    }
        -: 3731:
        -: 3732:  template<typename... _Args>
        -: 3733:    [[nodiscard]]
        -: 3734:    inline wstring
        -: 3735:    format(const locale& __loc, wformat_string<_Args...> __fmt,
        -: 3736:	   _Args&&... __args)
        -: 3737:    {
        -: 3738:      return std::vformat(__loc, __fmt.get(),
        -: 3739:			  std::make_wformat_args(__args...));
        -: 3740:    }
        -: 3741:
        -: 3742:  template<typename _Out, typename... _Args>
        -: 3743:    requires output_iterator<_Out, const char&>
        -: 3744:    inline _Out
        -: 3745:    format_to(_Out __out, format_string<_Args...> __fmt, _Args&&... __args)
        -: 3746:    {
        -: 3747:      return std::vformat_to(std::move(__out), __fmt.get(),
        -: 3748:			     std::make_format_args(std::forward<_Args>(__args)...));
        -: 3749:    }
        -: 3750:
        -: 3751:  template<typename _Out, typename... _Args>
        -: 3752:    requires output_iterator<_Out, const wchar_t&>
        -: 3753:    inline _Out
        -: 3754:    format_to(_Out __out, wformat_string<_Args...> __fmt, _Args&&... __args)
        -: 3755:    {
        -: 3756:      return std::vformat_to(std::move(__out), __fmt.get(),
        -: 3757:			     std::make_wformat_args(std::forward<_Args>(__args)...));
        -: 3758:    }
        -: 3759:
        -: 3760:  template<typename _Out, typename... _Args>
        -: 3761:    requires output_iterator<_Out, const char&>
        -: 3762:    inline _Out
        -: 3763:    format_to(_Out __out, const locale& __loc, format_string<_Args...> __fmt,
        -: 3764:	      _Args&&... __args)
        -: 3765:    {
        -: 3766:      return std::vformat_to(std::move(__out), __loc, __fmt.get(),
        -: 3767:			     std::make_format_args(std::forward<_Args>(__args)...));
        -: 3768:    }
        -: 3769:
        -: 3770:  template<typename _Out, typename... _Args>
        -: 3771:    requires output_iterator<_Out, const wchar_t&>
        -: 3772:    inline _Out
        -: 3773:    format_to(_Out __out, const locale& __loc, wformat_string<_Args...> __fmt,
        -: 3774:	      _Args&&... __args)
        -: 3775:    {
        -: 3776:      return std::vformat_to(std::move(__out), __loc, __fmt.get(),
        -: 3777:			     std::make_wformat_args(std::forward<_Args>(__args)...));
        -: 3778:    }
        -: 3779:
        -: 3780:  template<typename _Out, typename... _Args>
        -: 3781:    requires output_iterator<_Out, const char&>
        -: 3782:    inline format_to_n_result<_Out>
        -: 3783:    format_to_n(_Out __out, iter_difference_t<_Out> __n,
        -: 3784:		format_string<_Args...> __fmt, _Args&&... __args)
        -: 3785:    {
        -: 3786:      __format::_Iter_sink<char, _Out> __sink(std::move(__out), __n);
        -: 3787:      std::vformat_to(__sink.out(), __fmt.get(),
        -: 3788:		      std::make_format_args(__args...));
        -: 3789:      return std::move(__sink)._M_finish();
        -: 3790:    }
        -: 3791:
        -: 3792:  template<typename _Out, typename... _Args>
        -: 3793:    requires output_iterator<_Out, const wchar_t&>
        -: 3794:    inline format_to_n_result<_Out>
        -: 3795:    format_to_n(_Out __out, iter_difference_t<_Out> __n,
        -: 3796:		wformat_string<_Args...> __fmt, _Args&&... __args)
        -: 3797:    {
        -: 3798:      __format::_Iter_sink<wchar_t, _Out> __sink(std::move(__out), __n);
        -: 3799:      std::vformat_to(__sink.out(), __fmt.get(),
        -: 3800:		      std::make_wformat_args(__args...));
        -: 3801:      return std::move(__sink)._M_finish();
        -: 3802:    }
        -: 3803:
        -: 3804:  template<typename _Out, typename... _Args>
        -: 3805:    requires output_iterator<_Out, const char&>
        -: 3806:    inline format_to_n_result<_Out>
        -: 3807:    format_to_n(_Out __out, iter_difference_t<_Out> __n, const locale& __loc,
        -: 3808:		format_string<_Args...> __fmt, _Args&&... __args)
        -: 3809:    {
        -: 3810:      __format::_Iter_sink<char, _Out> __sink(std::move(__out), __n);
        -: 3811:      std::vformat_to(__sink.out(), __loc, __fmt.get(),
        -: 3812:		      std::make_format_args(__args...));
        -: 3813:      return std::move(__sink)._M_finish();
        -: 3814:    }
        -: 3815:
        -: 3816:  template<typename _Out, typename... _Args>
        -: 3817:    requires output_iterator<_Out, const wchar_t&>
        -: 3818:    inline format_to_n_result<_Out>
        -: 3819:    format_to_n(_Out __out, iter_difference_t<_Out> __n, const locale& __loc,
        -: 3820:		wformat_string<_Args...> __fmt, _Args&&... __args)
        -: 3821:    {
        -: 3822:      __format::_Iter_sink<wchar_t, _Out> __sink(std::move(__out), __n);
        -: 3823:      std::vformat_to(__sink.out(), __loc, __fmt.get(),
        -: 3824:		      std::make_wformat_args(__args...));
        -: 3825:      return std::move(__sink)._M_finish();
        -: 3826:    }
        -: 3827:
        -: 3828:/// @cond undocumented
        -: 3829:namespace __format
        -: 3830:{
        -: 3831:#if 1
        -: 3832:  template<typename _CharT>
        -: 3833:    class _Counting_sink : public _Iter_sink<_CharT, _CharT*>
        -: 3834:    {
        -: 3835:    public:
        -: 3836:      _Counting_sink() : _Iter_sink<_CharT, _CharT*>(nullptr, 0) { }
        -: 3837:
        -: 3838:      [[__gnu__::__always_inline__]]
        -: 3839:      size_t
        -: 3840:      count()
        -: 3841:      {
        -: 3842:	_Counting_sink::_M_overflow();
        -: 3843:	return this->_M_count;
        -: 3844:      }
        -: 3845:    };
        -: 3846:#else
        -: 3847:  template<typename _CharT>
        -: 3848:    class _Counting_sink : public _Buf_sink<_CharT>
        -: 3849:    {
        -: 3850:      size_t _M_count = 0;
        -: 3851:
        -: 3852:      void
        -: 3853:      _M_overflow() override
        -: 3854:      {
        -: 3855:	if (!std::is_constant_evaluated())
        -: 3856:	  _M_count += this->_M_used().size();
        -: 3857:	this->_M_rewind();
        -: 3858:      }
        -: 3859:
        -: 3860:    public:
        -: 3861:      _Counting_sink() = default;
        -: 3862:
        -: 3863:      [[__gnu__::__always_inline__]]
        -: 3864:      size_t
        -: 3865:      count() noexcept
        -: 3866:      {
        -: 3867:	_Counting_sink::_M_overflow();
        -: 3868:	return _M_count;
        -: 3869:      }
        -: 3870:    };
        -: 3871:#endif
        -: 3872:} // namespace __format
        -: 3873:/// @@endcond
        -: 3874:
        -: 3875:  template<typename... _Args>
        -: 3876:    [[nodiscard]]
        -: 3877:    inline size_t
        -: 3878:    formatted_size(format_string<_Args...> __fmt, _Args&&... __args)
        -: 3879:    {
        -: 3880:      __format::_Counting_sink<char> __buf;
        -: 3881:      std::vformat_to(__buf.out(), __fmt.get(),
        -: 3882:		      std::make_format_args(std::forward<_Args>(__args)...));
        -: 3883:      return __buf.count();
        -: 3884:    }
        -: 3885:
        -: 3886:  template<typename... _Args>
        -: 3887:    [[nodiscard]]
        -: 3888:    inline size_t
        -: 3889:    formatted_size(wformat_string<_Args...> __fmt, _Args&&... __args)
        -: 3890:    {
        -: 3891:      __format::_Counting_sink<wchar_t> __buf;
        -: 3892:      std::vformat_to(__buf.out(), __fmt.get(),
        -: 3893:		      std::make_wformat_args(std::forward<_Args>(__args)...));
        -: 3894:      return __buf.count();
        -: 3895:    }
        -: 3896:
        -: 3897:  template<typename... _Args>
        -: 3898:    [[nodiscard]]
        -: 3899:    inline size_t
        -: 3900:    formatted_size(const locale& __loc, format_string<_Args...> __fmt,
        -: 3901:		   _Args&&... __args)
        -: 3902:    {
        -: 3903:      __format::_Counting_sink<char> __buf;
        -: 3904:      std::vformat_to(__buf.out(), __loc, __fmt.get(),
        -: 3905:		      std::make_format_args(std::forward<_Args>(__args)...));
        -: 3906:      return __buf.count();
        -: 3907:    }
        -: 3908:
        -: 3909:  template<typename... _Args>
        -: 3910:    [[nodiscard]]
        -: 3911:    inline size_t
        -: 3912:    formatted_size(const locale& __loc, wformat_string<_Args...> __fmt,
        -: 3913:		   _Args&&... __args)
        -: 3914:    {
        -: 3915:      __format::_Counting_sink<wchar_t> __buf;
        -: 3916:      std::vformat_to(__buf.out(), __loc, __fmt.get(),
        -: 3917:		      std::make_wformat_args(std::forward<_Args>(__args)...));
        -: 3918:      return __buf.count();
        -: 3919:    }
        -: 3920:
        -: 3921:#if __cpp_lib_format_ranges
        -: 3922:  // [format.range], formatting of ranges
        -: 3923:  // [format.range.fmtkind], variable template format_kind
        -: 3924:  enum class range_format {
        -: 3925:    disabled,
        -: 3926:    map,
        -: 3927:    set,
        -: 3928:    sequence,
        -: 3929:    string,
        -: 3930:    debug_string
        -: 3931:  };
        -: 3932:
        -: 3933:  /// @cond undocumented
        -: 3934:  template<typename _Rg>
        -: 3935:    constexpr auto format_kind = not defined(format_kind<_Rg>);
        -: 3936:
        -: 3937:  template<typename _Tp>
        -: 3938:    consteval range_format
        -: 3939:    __fmt_kind()
        -: 3940:    {
        -: 3941:      using _Ref = ranges::range_reference_t<_Tp>;
        -: 3942:      if constexpr (is_same_v<remove_cvref_t<_Ref>, _Tp>)
        -: 3943:	return range_format::disabled;
        -: 3944:      else if constexpr (requires { typename _Tp::key_type; })
        -: 3945:	{
        -: 3946:	  if constexpr (requires { typename _Tp::mapped_type; })
        -: 3947:	    {
        -: 3948:	      using _Up = remove_cvref_t<_Ref>;
        -: 3949:	      if constexpr (__is_pair<_Up>)
        -: 3950:		return range_format::map;
        -: 3951:	      else if constexpr (__is_specialization_of<_Up, tuple>)
        -: 3952:		if constexpr (tuple_size_v<_Up> == 2)
        -: 3953:		  return range_format::map;
        -: 3954:	    }
        -: 3955:	  return range_format::set;
        -: 3956:	}
        -: 3957:      else
        -: 3958:	return range_format::sequence;
        -: 3959:    }
        -: 3960:  /// @endcond
        -: 3961:
        -: 3962:  /// A constant determining how a range should be formatted.
        -: 3963:  template<ranges::input_range _Rg> requires same_as<_Rg, remove_cvref_t<_Rg>>
        -: 3964:    constexpr range_format format_kind<_Rg> = __fmt_kind<_Rg>();
        -: 3965:
        -: 3966:  // [format.range.formatter], class template range_formatter
        -: 3967:  template<typename _Tp, typename _CharT = char>
        -: 3968:    requires same_as<remove_cvref_t<_Tp>, _Tp> && formattable<_Tp, _CharT>
        -: 3969:    class range_formatter; // TODO
        -: 3970:
        -: 3971:/// @cond undocumented
        -: 3972:namespace __format
        -: 3973:{
        -: 3974:  // [format.range.fmtdef], class template range-default-formatter
        -: 3975:  template<range_format _Kind, ranges::input_range _Rg, typename _CharT>
        -: 3976:    struct __range_default_formatter; // TODO
        -: 3977:} // namespace __format
        -: 3978:/// @endcond
        -: 3979:
        -: 3980:  // [format.range.fmtmap], [format.range.fmtset], [format.range.fmtstr],
        -: 3981:  // specializations for maps, sets, and strings
        -: 3982:  template<ranges::input_range _Rg, typename _CharT>
        -: 3983:    requires (format_kind<_Rg> != range_format::disabled)
        -: 3984:      && formattable<ranges::range_reference_t<_Rg>, _CharT>
        -: 3985:    struct formatter<_Rg, _CharT>
        -: 3986:    : __format::__range_default_formatter<format_kind<_Rg>, _Rg, _CharT>
        -: 3987:    { };
        -: 3988:#endif // C++23 formatting ranges
        -: 3989:
        -: 3990:_GLIBCXX_END_NAMESPACE_VERSION
        -: 3991:} // namespace std
        -: 3992:#endif // C++20
        -: 3993:#endif // _GLIBCXX_FORMAT
