        -:    0:Source:/home/jag/projects/pq/include/virial/virial.hpp
        -:    0:Graph:.build/tests/src/input/inputFileParsing/CMakeFiles/testParserManostat.dir/testParserManostat.cpp.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:/*****************************************************************************
        -:    2:<GPL_HEADER>
        -:    3:
        -:    4:    PQ
        -:    5:    Copyright (C) 2023-now  Jakob Gamper
        -:    6:
        -:    7:    This program is free software: you can redistribute it and/or modify
        -:    8:    it under the terms of the GNU General Public License as published by
        -:    9:    the Free Software Foundation, either version 3 of the License, or
        -:   10:    (at your option) any later version.
        -:   11:
        -:   12:    This program is distributed in the hope that it will be useful,
        -:   13:    but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   14:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   15:    GNU General Public License for more details.
        -:   16:
        -:   17:    You should have received a copy of the GNU General Public License
        -:   18:    along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   19:
        -:   20:<GPL_HEADER>
        -:   21:******************************************************************************/
        -:   22:
        -:   23:#ifndef _VIRIAL_HPP_
        -:   24:
        -:   25:#define _VIRIAL_HPP_
        -:   26:
        -:   27:#include "staticMatrix3x3.hpp"   // for StaticMatrix3x3
        -:   28:
        -:   29:#include <string>   // for string
        -:   30:
        -:   31:namespace simulationBox
        -:   32:{
        -:   33:    class SimulationBox;   // forward declaration
        -:   34:}
        -:   35:
        -:   36:namespace physicalData
        -:   37:{
        -:   38:    class PhysicalData;   // forward declaration
        -:   39:}
        -:   40:
        -:   41:/**
        -:   42: * @namespace virial
        -:   43: *
        -:   44: * @brief Namespace for virial calculation
        -:   45: */
        -:   46:namespace virial
        -:   47:{
        -:   48:    /**
        -:   49:     * @class Virial
        -:   50:     *
        -:   51:     * @brief Base class for virial calculation
        -:   52:     *
        -:   53:     * @details implements virial calculation, which is valid for both atomic and molecular systems
        -:   54:     */
        -:   55:    class Virial
        -:   56:    {
        -:   57:      protected:
        -:   58:        std::string _virialType;
        -:   59:
        -:   60:        linearAlgebra::tensor3D _virial;
        -:   61:
        -:   62:      public:
    #####:   63:        virtual ~Virial() = default;
------------------
virial::Virial::~Virial():
function virial::Virial::~Virial() called 0 returned 0% blocks executed 0%
    #####:   63:        virtual ~Virial() = default;
    %%%%%:   63-block  0
call    0 never executed
call    1 never executed
------------------
virial::Virial::~Virial():
function virial::Virial::~Virial() called 0 returned 0% blocks executed 0%
    #####:   63:        virtual ~Virial() = default;
    %%%%%:   63-block  0
call    0 never executed
------------------
        -:   64:
        -:   65:        virtual void calculateVirial(simulationBox::SimulationBox &, physicalData::PhysicalData &);
        -:   66:        virtual void intraMolecularVirialCorrection(simulationBox::SimulationBox &, physicalData::PhysicalData &){};
        -:   67:
        -:   68:        void setVirial(const linearAlgebra::tensor3D &virial) { _virial = virial; }
        -:   69:
        -:   70:        [[nodiscard]] linearAlgebra::tensor3D getVirial() const { return _virial; }
        -:   71:        [[nodiscard]] std::string             getVirialType() const { return _virialType; }
        -:   72:    };
        -:   73:
        -:   74:    /**
        -:   75:     * @class VirialMolecular
        -:   76:     *
        -:   77:     * @brief Class for virial calculation of molecular systems
        -:   78:     *
        -:   79:     * @details overrides calculateVirial() function to include intra-molecular virial correction
        -:   80:     */
        -:   81:    class VirialMolecular : public Virial
        -:   82:    {
        -:   83:      public:
function virial::VirialMolecular::VirialMolecular() called 0 returned 0% blocks executed 0%
    #####:   84:        VirialMolecular() : Virial() { _virialType = "molecular"; }
    %%%%%:   84-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:   84-block  1
    $$$$$:   84-block  2
call    4 never executed
        -:   85:
        -:   86:        void calculateVirial(simulationBox::SimulationBox &, physicalData::PhysicalData &) override;
        -:   87:        void intraMolecularVirialCorrection(simulationBox::SimulationBox &, physicalData::PhysicalData &) override;
        -:   88:    };
        -:   89:
        -:   90:    /**
        -:   91:     * @class VirialAtomic
        -:   92:     *
        -:   93:     * @brief Class for virial calculation of atomic systems
        -:   94:     *
        -:   95:     * @details dummy class for atomic systems, since no virial correction is needed
        -:   96:     *
        -:   97:     */
        -:   98:    class VirialAtomic : public Virial
        -:   99:    {
        -:  100:      public:
        -:  101:        VirialAtomic() : Virial() { _virialType = "atomic"; }
        -:  102:    };
        -:  103:
        -:  104:}   // namespace virial
        -:  105:
        -:  106:#endif   // _VIRIAL_HPP_
