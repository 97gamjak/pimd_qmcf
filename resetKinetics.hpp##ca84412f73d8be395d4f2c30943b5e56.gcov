        -:    0:Source:/home/jag/projects/pq/include/resetKinetics/resetKinetics.hpp
        -:    0:Graph:.build/tests/src/input/inputFileParsing/CMakeFiles/testParserManostat.dir/testParserManostat.cpp.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:/*****************************************************************************
        -:    2:<GPL_HEADER>
        -:    3:
        -:    4:    PQ
        -:    5:    Copyright (C) 2023-now  Jakob Gamper
        -:    6:
        -:    7:    This program is free software: you can redistribute it and/or modify
        -:    8:    it under the terms of the GNU General Public License as published by
        -:    9:    the Free Software Foundation, either version 3 of the License, or
        -:   10:    (at your option) any later version.
        -:   11:
        -:   12:    This program is distributed in the hope that it will be useful,
        -:   13:    but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   14:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   15:    GNU General Public License for more details.
        -:   16:
        -:   17:    You should have received a copy of the GNU General Public License
        -:   18:    along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   19:
        -:   20:<GPL_HEADER>
        -:   21:******************************************************************************/
        -:   22:
        -:   23:#ifndef _RESET_KINETICS_HPP_
        -:   24:
        -:   25:#define _RESET_KINETICS_HPP_
        -:   26:
        -:   27:#include "vector3d.hpp"   // for Vec3D
        -:   28:
        -:   29:#include <cstddef>   // for size_t
        -:   30:
        -:   31:namespace physicalData
        -:   32:{
        -:   33:    class PhysicalData;   // forward declaration
        -:   34:}
        -:   35:
        -:   36:namespace simulationBox
        -:   37:{
        -:   38:    class SimulationBox;   // forward declaration
        -:   39:}
        -:   40:
        -:   41:namespace resetKinetics
        -:   42:{
        -:   43:    /**
        -:   44:     * @class ResetKinetics
        -:   45:     *
        -:   46:     * @brief base class for the reset of the kinetics - represents also class for no reset
        -:   47:     *
        -:   48:     */
        -:   49:    class ResetKinetics
        -:   50:    {
        -:   51:      protected:
        -:   52:        size_t _nStepsTemperatureReset;
        -:   53:        size_t _frequencyTemperatureReset;
        -:   54:        size_t _nStepsMomentumReset;
        -:   55:        size_t _frequencyMomentumReset;
        -:   56:        size_t _nStepsAngularReset;
        -:   57:        size_t _frequencyAngularReset;
        -:   58:
        -:   59:        double               _temperature = 0.0;
        -:   60:        linearAlgebra::Vec3D _momentum;
        -:   61:        linearAlgebra::Vec3D _angularMomentum;
        -:   62:
        -:   63:      public:
function resetKinetics::ResetKinetics::ResetKinetics() called 0 returned 0% blocks executed 0%
    #####:   64:        ResetKinetics() = default;
        -:   65:        ResetKinetics(const size_t nStepsTemperatureReset,
        -:   66:                      const size_t frequencyTemperatureReset,
        -:   67:                      const size_t nStepsMomentumReset,
        -:   68:                      const size_t frequencyMomentumReset,
        -:   69:                      const size_t nStepsAngularReset,
        -:   70:                      const size_t frequencyAngularReset)
        -:   71:            : _nStepsTemperatureReset(nStepsTemperatureReset), _frequencyTemperatureReset(frequencyTemperatureReset),
        -:   72:              _nStepsMomentumReset(nStepsMomentumReset), _frequencyMomentumReset(frequencyMomentumReset),
        -:   73:              _nStepsAngularReset(nStepsAngularReset), _frequencyAngularReset(frequencyAngularReset){};
        -:   74:
        -:   75:        void reset(const size_t step, physicalData::PhysicalData &, simulationBox::SimulationBox &);
        -:   76:        void resetTemperature(simulationBox::SimulationBox &);
        -:   77:        void resetMomentum(simulationBox::SimulationBox &);
        -:   78:        void resetAngularMomentum(simulationBox::SimulationBox &);
        -:   79:
        -:   80:        /********************
        -:   81:         * standard setters *
        -:   82:         *******************/
        -:   83:
        -:   84:        void setTemperature(const double temperature) { _temperature = temperature; }
        -:   85:        void setMomentum(const linearAlgebra::Vec3D &momentum) { _momentum = momentum; }
        -:   86:        void setAngularMomentum(const linearAlgebra::Vec3D &angularMomentum) { _angularMomentum = angularMomentum; }
        -:   87:
        -:   88:        /********************
        -:   89:         * standard getters *
        -:   90:         *******************/
        -:   91:
        -:   92:        [[nodiscard]] size_t getNStepsTemperatureReset() const { return _nStepsTemperatureReset; }
        -:   93:        [[nodiscard]] size_t getFrequencyTemperatureReset() const { return _frequencyTemperatureReset; }
        -:   94:        [[nodiscard]] size_t getNStepsMomentumReset() const { return _nStepsMomentumReset; }
        -:   95:        [[nodiscard]] size_t getFrequencyMomentumReset() const { return _frequencyMomentumReset; }
        -:   96:    };
        -:   97:
        -:   98:}   // namespace resetKinetics
        -:   99:
        -:  100:#endif   // _RESET_KINETICS_HPP_
