        -:    0:Source:/home/jag/projects/pq/include/box/box.hpp
        -:    0:Graph:.build/tests/src/input/inputFileParsing/CMakeFiles/testParserManostat.dir/testParserManostat.cpp.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:/*****************************************************************************
        -:    2:<GPL_HEADER>
        -:    3:
        -:    4:    PQ
        -:    5:    Copyright (C) 2023-now  Jakob Gamper
        -:    6:
        -:    7:    This program is free software: you can redistribute it and/or modify
        -:    8:    it under the terms of the GNU General Public License as published by
        -:    9:    the Free Software Foundation, either version 3 of the License, or
        -:   10:    (at your option) any later version.
        -:   11:
        -:   12:    This program is distributed in the hope that it will be useful,
        -:   13:    but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   14:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   15:    GNU General Public License for more details.
        -:   16:
        -:   17:    You should have received a copy of the GNU General Public License
        -:   18:    along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   19:
        -:   20:<GPL_HEADER>
        -:   21:******************************************************************************/
        -:   22:
        -:   23:#ifndef _BOX_HPP_
        -:   24:
        -:   25:#define _BOX_HPP_
        -:   26:
        -:   27:#include "staticMatrix3x3.hpp"   // for StaticMatrix3x3
        -:   28:#include "vector3d.hpp"          // for Vec3D
        -:   29:
        -:   30:namespace simulationBox
        -:   31:{
        -:   32:    /**
        -:   33:     * @class Box
        -:   34:     *
        -:   35:     * @brief This class represents the unit cell of a general triclinic box
        -:   36:     *
        -:   37:     */
        -:   38:    class Box
        -:   39:    {
        -:   40:      protected:
        -:   41:        linearAlgebra::Vec3D _boxDimensions;
        -:   42:
        -:   43:        bool   _boxSizeHasChanged = false;
        -:   44:        double _volume;
        -:   45:
        -:   46:      public:
        -:   47:        virtual ~Box() = default;
        -:   48:
        -:   49:        [[nodiscard]] virtual double               calculateVolume()                                                = 0;
        -:   50:        [[nodiscard]] virtual linearAlgebra::Vec3D calculateShiftVector(const linearAlgebra::Vec3D &position) const = 0;
        -:   51:        virtual void                               applyPBC(linearAlgebra::Vec3D &position) const                   = 0;
        -:   52:        virtual void                               scaleBox(const linearAlgebra::tensor3D &scalingFactors)          = 0;
        -:   53:
        -:   54:        /*****************************************************
        -:   55:         * virtual methods that are overriden in triclinicBox *
        -:   56:         ******************************************************/
        -:   57:
function simulationBox::Box::getBoxAngles() const called 0 returned 0% blocks executed 0%
    #####:   58:        [[nodiscard]] virtual linearAlgebra::Vec3D                   getBoxAngles() const { return linearAlgebra::Vec3D(90.0); }
    %%%%%:   58-block  0
call    0 never executed
function simulationBox::Box::getBoxMatrix() const called 0 returned 0% blocks executed 0%
    #####:   59:        [[nodiscard]] virtual linearAlgebra::StaticMatrix3x3<double> getBoxMatrix() const
        -:   60:        {
    #####:   61:            return diagonalMatrix(_boxDimensions);
    %%%%%:   61-block  0
call    0 never executed
        -:   62:        }
        -:   63:
function simulationBox::Box::transformIntoOrthogonalSpace(linearAlgebra::Vector3D<double> const&) const called 0 returned 0% blocks executed 0%
    #####:   64:        [[nodiscard]] virtual linearAlgebra::Vec3D transformIntoOrthogonalSpace(const linearAlgebra::Vec3D &position) const
        -:   65:        {
    #####:   66:            return position;
    %%%%%:   66-block  0
call    0 never executed
        -:   67:        }
function simulationBox::Box::transformIntoOrthogonalSpace(linearAlgebra::StaticMatrix3x3<double> const&) const called 0 returned 0% blocks executed 0%
    #####:   68:        [[nodiscard]] virtual linearAlgebra::tensor3D transformIntoOrthogonalSpace(const linearAlgebra::tensor3D &position) const
        -:   69:        {
    #####:   70:            return position;
    %%%%%:   70-block  0
call    0 never executed
        -:   71:        }
function simulationBox::Box::transformIntoSimulationSpace(linearAlgebra::Vector3D<double> const&) const called 0 returned 0% blocks executed 0%
    #####:   72:        [[nodiscard]] virtual linearAlgebra::Vec3D transformIntoSimulationSpace(const linearAlgebra::Vec3D &position) const
        -:   73:        {
    #####:   74:            return position;
    %%%%%:   74-block  0
call    0 never executed
        -:   75:        }
function simulationBox::Box::transformIntoSimulationSpace(linearAlgebra::StaticMatrix3x3<double> const&) const called 0 returned 0% blocks executed 0%
    #####:   76:        [[nodiscard]] virtual linearAlgebra::tensor3D transformIntoSimulationSpace(const linearAlgebra::tensor3D &position) const
        -:   77:        {
    #####:   78:            return position;
    %%%%%:   78-block  0
call    0 never executed
        -:   79:        }
        -:   80:
function simulationBox::Box::setBoxDimensions(linearAlgebra::Vector3D<double> const&) called 0 returned 0% blocks executed 0%
    #####:   81:        virtual void setBoxDimensions(const linearAlgebra::Vec3D &boxDimensions) { _boxDimensions = boxDimensions; }
    %%%%%:   81-block  0
call    0 never executed
        -:   82:
        -:   83:        /********************
        -:   84:         * standard getters *
        -:   85:         ********************/
        -:   86:
        -:   87:        [[nodiscard]] bool getBoxSizeHasChanged() const { return _boxSizeHasChanged; }
        -:   88:
        -:   89:        [[nodiscard]] double getVolume() const { return _volume; }
        -:   90:        [[nodiscard]] double getMinimalBoxDimension() const { return minimum(_boxDimensions); }
        -:   91:
        -:   92:        [[nodiscard]] linearAlgebra::Vec3D getBoxDimensions() const { return _boxDimensions; }
        -:   93:
        -:   94:        /********************
        -:   95:         * standard setters *
        -:   96:         ********************/
        -:   97:
        -:   98:        void setVolume(const double volume) { _volume = volume; }
        -:   99:        void setBoxSizeHasChanged(const bool boxSizeHasChanged) { _boxSizeHasChanged = boxSizeHasChanged; }
        -:  100:    };
        -:  101:
        -:  102:}   // namespace simulationBox
        -:  103:
        -:  104:#endif   // _BOX_HPP_
