        -:    0:Source:/home/jag/software/gcc-13.1.0/install/include/c++/13.1.0/bits/move.h
        -:    0:Graph:.build/tests/src/input/inputFileParsing/CMakeFiles/testParserManostat.dir/testParserManostat.cpp.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:// Move, forward and identity for C++11 + swap -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2007-2023 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/move.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{utility}
        -:   28: */
        -:   29:
        -:   30:#ifndef _MOVE_H
        -:   31:#define _MOVE_H 1
        -:   32:
        -:   33:#include <bits/c++config.h>
        -:   34:#if __cplusplus < 201103L
        -:   35:# include <bits/concept_check.h>
        -:   36:#endif
        -:   37:
        -:   38:namespace std _GLIBCXX_VISIBILITY(default)
        -:   39:{
        -:   40:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   41:
        -:   42:  // Used, in C++03 mode too, by allocators, etc.
        -:   43:  /**
        -:   44:   *  @brief Same as C++11 std::addressof
        -:   45:   *  @ingroup utilities
        -:   46:   */
        -:   47:  template<typename _Tp>
        -:   48:    inline _GLIBCXX_CONSTEXPR _Tp*
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
------------------
simulationBox::Molecule* std::__addressof<simulationBox::Molecule>(simulationBox::Molecule&):
function simulationBox::Molecule* std::__addressof<simulationBox::Molecule>(simulationBox::Molecule&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
char* std::__addressof<char>(char&):
function char* std::__addressof<char>(char&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
int* std::__addressof<int>(int&):
function int* std::__addressof<int>(int&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__addressof<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&):
function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__addressof<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
unsigned long* std::__addressof<unsigned long>(unsigned long&):
function unsigned long* std::__addressof<unsigned long>(unsigned long&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
simulationBox::Molecule** std::__addressof<simulationBox::Molecule*>(simulationBox::Molecule*&):
function simulationBox::Molecule** std::__addressof<simulationBox::Molecule*>(simulationBox::Molecule*&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
simulationBox::Cell** std::__addressof<simulationBox::Cell*>(simulationBox::Cell*&):
function simulationBox::Cell** std::__addressof<simulationBox::Cell*>(simulationBox::Cell*&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
simulationBox::Cell* std::__addressof<simulationBox::Cell>(simulationBox::Cell&):
function simulationBox::Cell* std::__addressof<simulationBox::Cell>(simulationBox::Cell&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
std::vector<int, std::allocator<int> >* std::__addressof<std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >&):
function std::vector<int, std::allocator<int> >* std::__addressof<std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
intraNonBonded::IntraNonBondedContainer* std::__addressof<intraNonBonded::IntraNonBondedContainer>(intraNonBonded::IntraNonBondedContainer&):
function intraNonBonded::IntraNonBondedContainer* std::__addressof<intraNonBonded::IntraNonBondedContainer>(intraNonBonded::IntraNonBondedContainer&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
intraNonBonded::IntraNonBondedMap* std::__addressof<intraNonBonded::IntraNonBondedMap>(intraNonBonded::IntraNonBondedMap&):
function intraNonBonded::IntraNonBondedMap* std::__addressof<intraNonBonded::IntraNonBondedMap>(intraNonBonded::IntraNonBondedMap&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
double* std::__addressof<double>(double&):
function double* std::__addressof<double>(double&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const* std::__addressof<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&):
function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const* std::__addressof<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
std::shared_ptr<simulationBox::Atom>* std::__addressof<std::shared_ptr<simulationBox::Atom> >(std::shared_ptr<simulationBox::Atom>&):
function std::shared_ptr<simulationBox::Atom>* std::__addressof<std::shared_ptr<simulationBox::Atom> >(std::shared_ptr<simulationBox::Atom>&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
settings::ManostatType const* std::__addressof<settings::ManostatType const>(settings::ManostatType const&):
function settings::ManostatType const* std::__addressof<settings::ManostatType const>(settings::ManostatType const&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
simulationBox::MoleculeType* std::__addressof<simulationBox::MoleculeType>(simulationBox::MoleculeType&):
function simulationBox::MoleculeType* std::__addressof<simulationBox::MoleculeType>(simulationBox::MoleculeType&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
constraints::BondConstraint* std::__addressof<constraints::BondConstraint>(constraints::BondConstraint&):
function constraints::BondConstraint* std::__addressof<constraints::BondConstraint>(constraints::BondConstraint&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
forceField::BondForceField* std::__addressof<forceField::BondForceField>(forceField::BondForceField&):
function forceField::BondForceField* std::__addressof<forceField::BondForceField>(forceField::BondForceField&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
forceField::AngleForceField* std::__addressof<forceField::AngleForceField>(forceField::AngleForceField&):
function forceField::AngleForceField* std::__addressof<forceField::AngleForceField>(forceField::AngleForceField&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
forceField::DihedralForceField* std::__addressof<forceField::DihedralForceField>(forceField::DihedralForceField&):
function forceField::DihedralForceField* std::__addressof<forceField::DihedralForceField>(forceField::DihedralForceField&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
forceField::BondType* std::__addressof<forceField::BondType>(forceField::BondType&):
function forceField::BondType* std::__addressof<forceField::BondType>(forceField::BondType&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
forceField::AngleType* std::__addressof<forceField::AngleType>(forceField::AngleType&):
function forceField::AngleType* std::__addressof<forceField::AngleType>(forceField::AngleType&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
forceField::DihedralType* std::__addressof<forceField::DihedralType>(forceField::DihedralType&):
function forceField::DihedralType* std::__addressof<forceField::DihedralType>(forceField::DihedralType&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
std::unique_ptr<input::InputFileParser, std::default_delete<input::InputFileParser> >* std::__addressof<std::unique_ptr<input::InputFileParser, std::default_delete<input::InputFileParser> > >(std::unique_ptr<input::InputFileParser, std::default_delete<input::InputFileParser> >&):
function std::unique_ptr<input::InputFileParser, std::default_delete<input::InputFileParser> >* std::__addressof<std::unique_ptr<input::InputFileParser, std::default_delete<input::InputFileParser> > >(std::unique_ptr<input::InputFileParser, std::default_delete<input::InputFileParser> >&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
char const* std::__addressof<char const>(char const&):
function char const* std::__addressof<char const>(char const&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
std::vector<unsigned long, std::allocator<unsigned long> >* std::__addressof<std::vector<unsigned long, std::allocator<unsigned long> > >(std::vector<unsigned long, std::allocator<unsigned long> >&):
function std::vector<unsigned long, std::allocator<unsigned long> >* std::__addressof<std::vector<unsigned long, std::allocator<unsigned long> > >(std::vector<unsigned long, std::allocator<unsigned long> >&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
std::allocator<std::_Sp_counted_ptr_inplace<simulationBox::OrthorhombicBox, std::allocator<void>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<simulationBox::OrthorhombicBox, std::allocator<void>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<simulationBox::OrthorhombicBox, std::allocator<void>, (__gnu_cxx::_Lock_policy)2> >&):
function std::allocator<std::_Sp_counted_ptr_inplace<simulationBox::OrthorhombicBox, std::allocator<void>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<simulationBox::OrthorhombicBox, std::allocator<void>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<simulationBox::OrthorhombicBox, std::allocator<void>, (__gnu_cxx::_Lock_policy)2> >&) called 0 returned 0% blocks executed 0%
    #####:   49:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   50:    { return __builtin_addressof(__r); }
    %%%%%:   50-block  0
------------------
        -:   51:
        -:   52:#if __cplusplus >= 201103L
        -:   53:
        -:   54:_GLIBCXX_END_NAMESPACE_VERSION
        -:   55:} // namespace
        -:   56:
        -:   57:#include <type_traits> // Brings in std::declval too.
        -:   58:
        -:   59:namespace std _GLIBCXX_VISIBILITY(default)
        -:   60:{
        -:   61:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   62:
        -:   63:  /**
        -:   64:   *  @addtogroup utilities
        -:   65:   *  @{
        -:   66:   */
        -:   67:
        -:   68:  /**
        -:   69:   *  @brief  Forward an lvalue.
        -:   70:   *  @return The parameter cast to the specified type.
        -:   71:   *
        -:   72:   *  This function is used to implement "perfect forwarding".
        -:   73:   */
        -:   74:  template<typename _Tp>
        -:   75:    _GLIBCXX_NODISCARD
        -:   76:    constexpr _Tp&&
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
------------------
std::_Bind_front<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const, physicalData::PhysicalData*>&& std::forward<std::_Bind_front<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const, physicalData::PhysicalData*> >(std::remove_reference<std::_Bind_front<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const, physicalData::PhysicalData*> >::type&):
function std::_Bind_front<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const, physicalData::PhysicalData*>&& std::forward<std::_Bind_front<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const, physicalData::PhysicalData*> >(std::remove_reference<std::_Bind_front<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const, physicalData::PhysicalData*> >::type&) called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
char const& std::forward<char const&>(std::remove_reference<char const&>::type&):
function char const& std::forward<char const&>(std::remove_reference<char const&>::type&) called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
char const (&std::forward<char const (&) [11]>(std::remove_reference<char const (&) [11]>::type&)) [11]:
function char const (&std::forward<char const (&) [11]>(std::remove_reference<char const (&) [11]>::type&)) [11] called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
char const (&std::forward<char const (&) [19]>(std::remove_reference<char const (&) [19]>::type&)) [19]:
function char const (&std::forward<char const (&) [19]>(std::remove_reference<char const (&) [19]>::type&)) [19] called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
char const (&std::forward<char const (&) [12]>(std::remove_reference<char const (&) [12]>::type&)) [12]:
function char const (&std::forward<char const (&) [12]>(std::remove_reference<char const (&) [12]>::type&)) [12] called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
char const (&std::forward<char const (&) [14]>(std::remove_reference<char const (&) [14]>::type&)) [14]:
function char const (&std::forward<char const (&) [14]>(std::remove_reference<char const (&) [14]>::type&)) [14] called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
char const (&std::forward<char const (&) [7]>(std::remove_reference<char const (&) [7]>::type&)) [7]:
function char const (&std::forward<char const (&) [7]>(std::remove_reference<char const (&) [7]>::type&)) [7] called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
char const (&std::forward<char const (&) [13]>(std::remove_reference<char const (&) [13]>::type&)) [13]:
function char const (&std::forward<char const (&) [13]>(std::remove_reference<char const (&) [13]>::type&)) [13] called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
char const (&std::forward<char const (&) [15]>(std::remove_reference<char const (&) [15]>::type&)) [15]:
function char const (&std::forward<char const (&) [15]>(std::remove_reference<char const (&) [15]>::type&)) [15] called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
char const (&std::forward<char const (&) [17]>(std::remove_reference<char const (&) [17]>::type&)) [17]:
function char const (&std::forward<char const (&) [17]>(std::remove_reference<char const (&) [17]>::type&)) [17] called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
char const (&std::forward<char const (&) [16]>(std::remove_reference<char const (&) [16]>::type&)) [16]:
function char const (&std::forward<char const (&) [16]>(std::remove_reference<char const (&) [16]>::type&)) [16] called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*&&std::forward<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const>(std::remove_reference<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const>::type&))() const:
function linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*&&std::forward<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const>(std::remove_reference<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const>::type&))() const called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
physicalData::PhysicalData*&& std::forward<physicalData::PhysicalData*>(std::remove_reference<physicalData::PhysicalData*>::type&):
function physicalData::PhysicalData*&& std::forward<physicalData::PhysicalData*>(std::remove_reference<physicalData::PhysicalData*>::type&) called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
physicalData::PhysicalData*& std::forward<physicalData::PhysicalData*&>(std::remove_reference<physicalData::PhysicalData*&>::type&):
function physicalData::PhysicalData*& std::forward<physicalData::PhysicalData*&>(std::remove_reference<physicalData::PhysicalData*&>::type&) called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
std::default_delete<integrator::VelocityVerlet>&& std::forward<std::default_delete<integrator::VelocityVerlet> >(std::remove_reference<std::default_delete<integrator::VelocityVerlet> >::type&):
function std::default_delete<integrator::VelocityVerlet>&& std::forward<std::default_delete<integrator::VelocityVerlet> >(std::remove_reference<std::default_delete<integrator::VelocityVerlet> >::type&) called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
std::default_delete<virial::VirialMolecular>&& std::forward<std::default_delete<virial::VirialMolecular> >(std::remove_reference<std::default_delete<virial::VirialMolecular> >::type&):
function std::default_delete<virial::VirialMolecular>&& std::forward<std::default_delete<virial::VirialMolecular> >(std::remove_reference<std::default_delete<virial::VirialMolecular> >::type&) called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
std::default_delete<potential::PotentialBruteForce>&& std::forward<std::default_delete<potential::PotentialBruteForce> >(std::remove_reference<std::default_delete<potential::PotentialBruteForce> >::type&):
function std::default_delete<potential::PotentialBruteForce>&& std::forward<std::default_delete<potential::PotentialBruteForce> >(std::remove_reference<std::default_delete<potential::PotentialBruteForce> >::type&) called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::type&):
function std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::type&) called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
std::_Bind_front<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const, physicalData::PhysicalData*>& std::forward<std::_Bind_front<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const, physicalData::PhysicalData*>&>(std::remove_reference<std::_Bind_front<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const, physicalData::PhysicalData*>&>::type&):
function std::_Bind_front<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const, physicalData::PhysicalData*>& std::forward<std::_Bind_front<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const, physicalData::PhysicalData*>&>(std::remove_reference<std::_Bind_front<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const, physicalData::PhysicalData*>&>::type&) called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
integrator::Integrator*& std::forward<integrator::Integrator*&>(std::remove_reference<integrator::Integrator*&>::type&):
function integrator::Integrator*& std::forward<integrator::Integrator*&>(std::remove_reference<integrator::Integrator*&>::type&) called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
virial::Virial*& std::forward<virial::Virial*&>(std::remove_reference<virial::Virial*&>::type&):
function virial::Virial*& std::forward<virial::Virial*&>(std::remove_reference<virial::Virial*&>::type&) called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
potential::Potential*& std::forward<potential::Potential*&>(std::remove_reference<potential::Potential*&>::type&):
function potential::Potential*& std::forward<potential::Potential*&>(std::remove_reference<potential::Potential*&>::type&) called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
char const* const& std::forward<char const* const&>(std::remove_reference<char const* const&>::type&):
function char const* const& std::forward<char const* const&>(std::remove_reference<char const* const&>::type&) called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
std::_Bind_front<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const, physicalData::PhysicalData*> const& std::forward<std::_Bind_front<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const, physicalData::PhysicalData*> const&>(std::remove_reference<std::_Bind_front<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const, physicalData::PhysicalData*> const&>::type&):
function std::_Bind_front<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const, physicalData::PhysicalData*> const& std::forward<std::_Bind_front<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const, physicalData::PhysicalData*> const&>(std::remove_reference<std::_Bind_front<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*)() const, physicalData::PhysicalData*> const&>::type&) called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*&std::forward<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*&)() const>(std::remove_reference<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*&)() const>::type&))() const:
function linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*&std::forward<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*&)() const>(std::remove_reference<linearAlgebra::StaticMatrix3x3<double> (physicalData::PhysicalData::*&)() const>::type&))() const called 0 returned 0% blocks executed 0%
    #####:   77:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   78:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   78-block  0
------------------
        -:   79:
        -:   80:  /**
        -:   81:   *  @brief  Forward an rvalue.
        -:   82:   *  @return The parameter cast to the specified type.
        -:   83:   *
        -:   84:   *  This function is used to implement "perfect forwarding".
        -:   85:   */
        -:   86:  template<typename _Tp>
        -:   87:    _GLIBCXX_NODISCARD
        -:   88:    constexpr _Tp&&
        -:   89:    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
        -:   90:    {
        -:   91:      static_assert(!std::is_lvalue_reference<_Tp>::value,
        -:   92:	  "std::forward must not be used to convert an rvalue to an lvalue");
        -:   93:      return static_cast<_Tp&&>(__t);
        -:   94:    }
        -:   95:
        -:   96:  /**
        -:   97:   *  @brief  Convert a value to an rvalue.
        -:   98:   *  @param  __t  A thing of arbitrary type.
        -:   99:   *  @return The parameter cast to an rvalue-reference to allow moving it.
        -:  100:  */
        -:  101:  template<typename _Tp>
        -:  102:    _GLIBCXX_NODISCARD
        -:  103:    constexpr typename std::remove_reference<_Tp>::type&&
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
std::remove_reference<output::RingPolymerTrajectoryOutput*&>::type&& std::move<output::RingPolymerTrajectoryOutput*&>(output::RingPolymerTrajectoryOutput*&):
function std::remove_reference<output::RingPolymerTrajectoryOutput*&>::type&& std::move<output::RingPolymerTrajectoryOutput*&>(output::RingPolymerTrajectoryOutput*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<std::allocator<char>&>::type&& std::move<std::allocator<char>&>(std::allocator<char>&):
function std::remove_reference<std::allocator<char>&>::type&& std::move<std::allocator<char>&>(std::allocator<char>&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<output::EnergyOutput*&>::type&& std::move<output::EnergyOutput*&>(output::EnergyOutput*&):
function std::remove_reference<output::EnergyOutput*&>::type&& std::move<output::EnergyOutput*&>(output::EnergyOutput*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<output::MomentumOutput*&>::type&& std::move<output::MomentumOutput*&>(output::MomentumOutput*&):
function std::remove_reference<output::MomentumOutput*&>::type&& std::move<output::MomentumOutput*&>(output::MomentumOutput*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<output::TrajectoryOutput*&>::type&& std::move<output::TrajectoryOutput*&>(output::TrajectoryOutput*&):
function std::remove_reference<output::TrajectoryOutput*&>::type&& std::move<output::TrajectoryOutput*&>(output::TrajectoryOutput*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<output::LogOutput*&>::type&& std::move<output::LogOutput*&>(output::LogOutput*&):
function std::remove_reference<output::LogOutput*&>::type&& std::move<output::LogOutput*&>(output::LogOutput*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<output::StdoutOutput*&>::type&& std::move<output::StdoutOutput*&>(output::StdoutOutput*&):
function std::remove_reference<output::StdoutOutput*&>::type&& std::move<output::StdoutOutput*&>(output::StdoutOutput*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<output::RstFileOutput*&>::type&& std::move<output::RstFileOutput*&>(output::RstFileOutput*&):
function std::remove_reference<output::RstFileOutput*&>::type&& std::move<output::RstFileOutput*&>(output::RstFileOutput*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<output::InfoOutput*&>::type&& std::move<output::InfoOutput*&>(output::InfoOutput*&):
function std::remove_reference<output::InfoOutput*&>::type&& std::move<output::InfoOutput*&>(output::InfoOutput*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<output::VirialOutput*&>::type&& std::move<output::VirialOutput*&>(output::VirialOutput*&):
function std::remove_reference<output::VirialOutput*&>::type&& std::move<output::VirialOutput*&>(output::VirialOutput*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<output::StressOutput*&>::type&& std::move<output::StressOutput*&>(output::StressOutput*&):
function std::remove_reference<output::StressOutput*&>::type&& std::move<output::StressOutput*&>(output::StressOutput*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<output::BoxFileOutput*&>::type&& std::move<output::BoxFileOutput*&>(output::BoxFileOutput*&):
function std::remove_reference<output::BoxFileOutput*&>::type&& std::move<output::BoxFileOutput*&>(output::BoxFileOutput*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<output::RingPolymerRestartFileOutput*&>::type&& std::move<output::RingPolymerRestartFileOutput*&>(output::RingPolymerRestartFileOutput*&):
function std::remove_reference<output::RingPolymerRestartFileOutput*&>::type&& std::move<output::RingPolymerRestartFileOutput*&>(output::RingPolymerRestartFileOutput*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<input::InputFileParser*&>::type&& std::move<input::InputFileParser*&>(input::InputFileParser*&):
function std::remove_reference<input::InputFileParser*&>::type&& std::move<input::InputFileParser*&>(input::InputFileParser*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<output::RingPolymerEnergyOutput*&>::type&& std::move<output::RingPolymerEnergyOutput*&>(output::RingPolymerEnergyOutput*&):
function std::remove_reference<output::RingPolymerEnergyOutput*&>::type&& std::move<output::RingPolymerEnergyOutput*&>(output::RingPolymerEnergyOutput*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<std::shared_ptr<simulationBox::OrthorhombicBox>&>::type&& std::move<std::shared_ptr<simulationBox::OrthorhombicBox>&>(std::shared_ptr<simulationBox::OrthorhombicBox>&):
function std::remove_reference<std::shared_ptr<simulationBox::OrthorhombicBox>&>::type&& std::move<std::shared_ptr<simulationBox::OrthorhombicBox>&>(std::shared_ptr<simulationBox::OrthorhombicBox>&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<integrator::VelocityVerlet*&>::type&& std::move<integrator::VelocityVerlet*&>(integrator::VelocityVerlet*&):
function std::remove_reference<integrator::VelocityVerlet*&>::type&& std::move<integrator::VelocityVerlet*&>(integrator::VelocityVerlet*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<integrator::Integrator*&>::type&& std::move<integrator::Integrator*&>(integrator::Integrator*&):
function std::remove_reference<integrator::Integrator*&>::type&& std::move<integrator::Integrator*&>(integrator::Integrator*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<thermostat::Thermostat*&>::type&& std::move<thermostat::Thermostat*&>(thermostat::Thermostat*&):
function std::remove_reference<thermostat::Thermostat*&>::type&& std::move<thermostat::Thermostat*&>(thermostat::Thermostat*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<manostat::Manostat*&>::type&& std::move<manostat::Manostat*&>(manostat::Manostat*&):
function std::remove_reference<manostat::Manostat*&>::type&& std::move<manostat::Manostat*&>(manostat::Manostat*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<virial::VirialMolecular*&>::type&& std::move<virial::VirialMolecular*&>(virial::VirialMolecular*&):
function std::remove_reference<virial::VirialMolecular*&>::type&& std::move<virial::VirialMolecular*&>(virial::VirialMolecular*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<virial::Virial*&>::type&& std::move<virial::Virial*&>(virial::Virial*&):
function std::remove_reference<virial::Virial*&>::type&& std::move<virial::Virial*&>(virial::Virial*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<potential::PotentialBruteForce*&>::type&& std::move<potential::PotentialBruteForce*&>(potential::PotentialBruteForce*&):
function std::remove_reference<potential::PotentialBruteForce*&>::type&& std::move<potential::PotentialBruteForce*&>(potential::PotentialBruteForce*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*&>::type&& std::move<std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*&>(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*&):
function std::remove_reference<std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*&>::type&& std::move<std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*&>(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*&):
function std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*&) called 0 returned 0% blocks executed 0%
    #####:  104:    move(_Tp&& __t) noexcept
    #####:  105:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  105-block  0
------------------
        -:  106:
        -:  107:
        -:  108:  template<typename _Tp>
        -:  109:    struct __move_if_noexcept_cond
        -:  110:    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
        -:  111:                    is_copy_constructible<_Tp>>::type { };
        -:  112:
        -:  113:  /**
        -:  114:   *  @brief  Conditionally convert a value to an rvalue.
        -:  115:   *  @param  __x  A thing of arbitrary type.
        -:  116:   *  @return The parameter, possibly cast to an rvalue-reference.
        -:  117:   *
        -:  118:   *  Same as std::move unless the type's move constructor could throw and the
        -:  119:   *  type is copyable, in which case an lvalue-reference is returned instead.
        -:  120:   */
        -:  121:  template<typename _Tp>
        -:  122:    _GLIBCXX_NODISCARD
        -:  123:    constexpr
        -:  124:    __conditional_t<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>
        -:  125:    move_if_noexcept(_Tp& __x) noexcept
        -:  126:    { return std::move(__x); }
        -:  127:
        -:  128:  // declval, from type_traits.
        -:  129:
        -:  130:#if __cplusplus > 201402L
        -:  131:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  132:  // 2296. std::addressof should be constexpr
        -:  133:# define __cpp_lib_addressof_constexpr 201603L
        -:  134:#endif
        -:  135:  /**
        -:  136:   *  @brief Returns the actual address of the object or function
        -:  137:   *         referenced by r, even in the presence of an overloaded
        -:  138:   *         operator&.
        -:  139:   *  @param  __r  Reference to an object or function.
        -:  140:   *  @return   The actual address.
        -:  141:  */
        -:  142:  template<typename _Tp>
        -:  143:    _GLIBCXX_NODISCARD
        -:  144:    inline _GLIBCXX17_CONSTEXPR _Tp*
    #####:  145:    addressof(_Tp& __r) noexcept
    #####:  146:    { return std::__addressof(__r); }
------------------
settings::ManostatType const* std::addressof<settings::ManostatType const>(settings::ManostatType const&):
function settings::ManostatType const* std::addressof<settings::ManostatType const>(settings::ManostatType const&) called 0 returned 0% blocks executed 0%
    #####:  145:    addressof(_Tp& __r) noexcept
    #####:  146:    { return std::__addressof(__r); }
    %%%%%:  146-block  0
call    0 never executed
------------------
char const* std::addressof<char const>(char const&):
function char const* std::addressof<char const>(char const&) called 0 returned 0% blocks executed 0%
    #####:  145:    addressof(_Tp& __r) noexcept
    #####:  146:    { return std::__addressof(__r); }
    %%%%%:  146-block  0
call    0 never executed
------------------
char* std::addressof<char>(char&):
function char* std::addressof<char>(char&) called 0 returned 0% blocks executed 0%
    #####:  145:    addressof(_Tp& __r) noexcept
    #####:  146:    { return std::__addressof(__r); }
    %%%%%:  146-block  0
call    0 never executed
------------------
        -:  147:
        -:  148:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  149:  // 2598. addressof works on temporaries
        -:  150:  template<typename _Tp>
        -:  151:    const _Tp* addressof(const _Tp&&) = delete;
        -:  152:
        -:  153:  // C++11 version of std::exchange for internal use.
        -:  154:  template <typename _Tp, typename _Up = _Tp>
        -:  155:    _GLIBCXX20_CONSTEXPR
        -:  156:    inline _Tp
        -:  157:    __exchange(_Tp& __obj, _Up&& __new_val)
        -:  158:    {
        -:  159:      _Tp __old_val = std::move(__obj);
        -:  160:      __obj = std::forward<_Up>(__new_val);
        -:  161:      return __old_val;
        -:  162:    }
        -:  163:
        -:  164:  /// @} group utilities
        -:  165:
        -:  166:#define _GLIBCXX_FWDREF(_Tp) _Tp&&
        -:  167:#define _GLIBCXX_MOVE(__val) std::move(__val)
        -:  168:#define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)
        -:  169:#else
        -:  170:#define _GLIBCXX_FWDREF(_Tp) const _Tp&
        -:  171:#define _GLIBCXX_MOVE(__val) (__val)
        -:  172:#define _GLIBCXX_FORWARD(_Tp, __val) (__val)
        -:  173:#endif
        -:  174:
        -:  175:  /**
        -:  176:   *  @addtogroup utilities
        -:  177:   *  @{
        -:  178:   */
        -:  179:
        -:  180:  /**
        -:  181:   *  @brief Swaps two values.
        -:  182:   *  @param  __a  A thing of arbitrary type.
        -:  183:   *  @param  __b  Another thing of arbitrary type.
        -:  184:   *  @return   Nothing.
        -:  185:  */
        -:  186:  template<typename _Tp>
        -:  187:    _GLIBCXX20_CONSTEXPR
        -:  188:    inline
        -:  189:#if __cplusplus >= 201103L
        -:  190:    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
        -:  191:			      is_move_constructible<_Tp>,
        -:  192:			      is_move_assignable<_Tp>>::value>::type
        -:  193:#else
        -:  194:    void
        -:  195:#endif
        -:  196:    swap(_Tp& __a, _Tp& __b)
        -:  197:    _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
        -:  198:				is_nothrow_move_assignable<_Tp>>::value)
        -:  199:    {
        -:  200:#if __cplusplus < 201103L
        -:  201:      // concept requirements
        -:  202:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  203:#endif
        -:  204:      _Tp __tmp = _GLIBCXX_MOVE(__a);
        -:  205:      __a = _GLIBCXX_MOVE(__b);
        -:  206:      __b = _GLIBCXX_MOVE(__tmp);
        -:  207:    }
        -:  208:
        -:  209:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  210:  // DR 809. std::swap should be overloaded for array types.
        -:  211:  /// Swap the contents of two arrays.
        -:  212:  template<typename _Tp, size_t _Nm>
        -:  213:    _GLIBCXX20_CONSTEXPR
        -:  214:    inline
        -:  215:#if __cplusplus >= 201103L
        -:  216:    typename enable_if<__is_swappable<_Tp>::value>::type
        -:  217:#else
        -:  218:    void
        -:  219:#endif
        -:  220:    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
        -:  221:    _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Tp>::value)
        -:  222:    {
        -:  223:      for (size_t __n = 0; __n < _Nm; ++__n)
        -:  224:	swap(__a[__n], __b[__n]);
        -:  225:    }
        -:  226:
        -:  227:  /// @} group utilities
        -:  228:_GLIBCXX_END_NAMESPACE_VERSION
        -:  229:} // namespace
        -:  230:
        -:  231:#endif /* _MOVE_H */
