        -:    0:Source:/home/jag/projects/pq/include/exceptions/exceptions.hpp
        -:    0:Graph:.build/src/input/topologyFileReader/CMakeFiles/topologyFileReader.dir/bondSection.cpp.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:/*****************************************************************************
        -:    2:<GPL_HEADER>
        -:    3:
        -:    4:    PQ
        -:    5:    Copyright (C) 2023-now  Jakob Gamper
        -:    6:
        -:    7:    This program is free software: you can redistribute it and/or modify
        -:    8:    it under the terms of the GNU General Public License as published by
        -:    9:    the Free Software Foundation, either version 3 of the License, or
        -:   10:    (at your option) any later version.
        -:   11:
        -:   12:    This program is distributed in the hope that it will be useful,
        -:   13:    but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   14:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   15:    GNU General Public License for more details.
        -:   16:
        -:   17:    You should have received a copy of the GNU General Public License
        -:   18:    along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   19:
        -:   20:<GPL_HEADER>
        -:   21:******************************************************************************/
        -:   22:
        -:   23:#ifndef _EXCEPTIONS_HPP_
        -:   24:
        -:   25:#define _EXCEPTIONS_HPP_
        -:   26:
        -:   27:#include "color.hpp"
        -:   28:
        -:   29:#include <cstddef>
        -:   30:#include <exception>
        -:   31:#include <string>
        -:   32:#include <string_view>
        -:   33:
        -:   34:namespace customException
        -:   35:{
        -:   36:
        -:   37:    /**
        -:   38:     * @enum ExceptionType
        -:   39:     *
        -:   40:     */
        -:   41:    enum class ExceptionType : size_t
        -:   42:    {
        -:   43:        INPUTFILEEXCEPTION,
        -:   44:        RSTFILEEXCEPTION,
        -:   45:        USERINPUTEXCEPTION,
        -:   46:        MOLDESCRIPTOREXCEPTION,
        -:   47:        USERINPUTEXCEPTIONWARNING,
        -:   48:        GUFFDATEXCEPTION,
        -:   49:        TOPOLOGYEXCEPTION,
        -:   50:        PARAMETERFILEEXCEPTION,
        -:   51:        MANOSTATEXCEPTION,
        -:   52:        INTRANONBONDEDEXCEPTION,
        -:   53:        SHAKEEXCEPTION,
        -:   54:        CELLLISTEXCEPTION,
        -:   55:        RINGPOLYMERRESTARTFILEEXCEPTION
        -:   56:    };
        -:   57:
        -:   58:    /**
        -:   59:     * @class CustomException
        -:   60:     *
        -:   61:     * @brief Custom exception base class
        -:   62:     *
        -:   63:     */
        -:   64:    class CustomException : public std::exception
        -:   65:    {
        -:   66:      protected:
        -:   67:        std::string _message;
        -:   68:
        -:   69:      public:
function customException::CustomException::CustomException(std::basic_string_view<char, std::char_traits<char> >) called 0 returned 0% blocks executed 0%
    #####:   70:        explicit CustomException(const std::string_view message) : _message(message){};
    %%%%%:   70-block  0
call    0 never executed
    %%%%%:   70-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:   70-block  2
    $$$$$:   70-block  3
    $$$$$:   70-block  4
call    4 never executed
        -:   71:        void colorfulOutput(const Color::Code color, const std::string_view) const;
        -:   72:    };
        -:   73:
        -:   74:    /**
        -:   75:     * @class InputFileException inherits from CustomException
        -:   76:     *
        -:   77:     * @brief Exception for input file errors
        -:   78:     *
        -:   79:     */
        -:   80:    class InputFileException : public CustomException
        -:   81:    {
        -:   82:      public:
        -:   83:        using CustomException::CustomException;
        -:   84:
        -:   85:        const char *what() const throw() override;
        -:   86:    };
        -:   87:
        -:   88:    /**
        -:   89:     * @class RstFileException inherits from CustomException
        -:   90:     *
        -:   91:     * @brief Exception for restart file errors
        -:   92:     *
        -:   93:     */
        -:   94:    class RstFileException : public CustomException
        -:   95:    {
        -:   96:      public:
        -:   97:        using CustomException::CustomException;
        -:   98:
        -:   99:        const char *what() const throw() override;
        -:  100:    };
        -:  101:
        -:  102:    /**
        -:  103:     * @class UserInputException inherits from CustomException
        -:  104:     *
        -:  105:     * @brief Exception for user input errors (CLI)
        -:  106:     *
        -:  107:     */
        -:  108:    class UserInputException : public CustomException
        -:  109:    {
        -:  110:      public:
        -:  111:        using CustomException::CustomException;
        -:  112:
        -:  113:        const char *what() const throw() override;
        -:  114:    };
        -:  115:
        -:  116:    /**
        -:  117:     * @class MolDescriptorException inherits from CustomException
        -:  118:     *
        -:  119:     * @brief Exception for MolDescriptor errors
        -:  120:     *
        -:  121:     */
        -:  122:    class MolDescriptorException : public CustomException
        -:  123:    {
        -:  124:      public:
        -:  125:        using CustomException::CustomException;
        -:  126:
        -:  127:        const char *what() const throw() override;
        -:  128:    };
        -:  129:
        -:  130:    /**
        -:  131:     * @class UserInputExceptionWarning inherits from CustomException
        -:  132:     *
        -:  133:     * @brief Exception for user input warnings
        -:  134:     *
        -:  135:     */
        -:  136:    class UserInputExceptionWarning : public CustomException
        -:  137:    {
        -:  138:      public:
        -:  139:        using CustomException::CustomException;
        -:  140:
        -:  141:        const char *what() const throw() override;
        -:  142:    };
        -:  143:
        -:  144:    /**
        -:  145:     * @class GuffDatException inherits from CustomException
        -:  146:     *
        -:  147:     * @brief Exception for guff.dat errors
        -:  148:     *
        -:  149:     */
        -:  150:    class GuffDatException : public CustomException
        -:  151:    {
        -:  152:      public:
        -:  153:        using CustomException::CustomException;
        -:  154:
        -:  155:        const char *what() const throw() override;
        -:  156:    };
        -:  157:
        -:  158:    /**
        -:  159:     * @class TopologyException inherits from CustomException
        -:  160:     *
        -:  161:     * @brief Exception for topology file errors
        -:  162:     */
        -:  163:    class TopologyException : public CustomException
        -:  164:    {
        -:  165:      public:
        -:  166:        using CustomException::CustomException;
        -:  167:
        -:  168:        const char *what() const throw() override;
        -:  169:    };
        -:  170:
        -:  171:    /**
        -:  172:     * @class ParameterFileException inherits from CustomException
        -:  173:     *
        -:  174:     * @brief Exception for parameter file errors
        -:  175:     */
        -:  176:    class ParameterFileException : public CustomException
        -:  177:    {
        -:  178:      public:
        -:  179:        using CustomException::CustomException;
        -:  180:
        -:  181:        const char *what() const throw() override;
        -:  182:    };
        -:  183:
        -:  184:    /**
        -:  185:     * @class ManostatException inherits from CustomException
        -:  186:     *
        -:  187:     * @brief Exception for manostat errors
        -:  188:     */
        -:  189:    class ManostatException : public CustomException
        -:  190:    {
        -:  191:      public:
        -:  192:        using CustomException::CustomException;
        -:  193:
        -:  194:        const char *what() const throw() override;
        -:  195:    };
        -:  196:
        -:  197:    /**
        -:  198:     * @class IntraNonBondedException inherits from CustomException
        -:  199:     *
        -:  200:     * @brief Exception for intra non bonded errors
        -:  201:     */
        -:  202:    class IntraNonBondedException : public CustomException
        -:  203:    {
        -:  204:      public:
        -:  205:        using CustomException::CustomException;
        -:  206:
        -:  207:        const char *what() const throw() override;
        -:  208:    };
        -:  209:
        -:  210:    /**
        -:  211:     * @class ShakeException inherits from CustomException
        -:  212:     *
        -:  213:     * @brief Exception for SHAKE errors
        -:  214:     */
        -:  215:    class ShakeException : public CustomException
        -:  216:    {
        -:  217:      public:
        -:  218:        using CustomException::CustomException;
        -:  219:
        -:  220:        const char *what() const throw() override;
        -:  221:    };
        -:  222:
        -:  223:    /**
        -:  224:     * @class CellListException inherits from CustomException
        -:  225:     *
        -:  226:     * @brief Exception for CellList errors
        -:  227:     */
        -:  228:    class CellListException : public CustomException
        -:  229:    {
        -:  230:      public:
        -:  231:        using CustomException::CustomException;
        -:  232:
        -:  233:        const char *what() const throw() override;
        -:  234:    };
        -:  235:
        -:  236:    /**
        -:  237:     * @class RingPolymerRestartFileException inherits from CustomException
        -:  238:     *
        -:  239:     * @brief Exception for ring polymer restart file errors
        -:  240:     */
        -:  241:    class RingPolymerRestartFileException : public CustomException
        -:  242:    {
        -:  243:      public:
        -:  244:        using CustomException::CustomException;
        -:  245:
        -:  246:        const char *what() const throw() override;
        -:  247:    };
        -:  248:
        -:  249:    /**
        -:  250:     * @class QMRunnerException inherits from CustomException
        -:  251:     *
        -:  252:     * @brief Exception for QMRunner errors
        -:  253:     */
        -:  254:    class QMRunnerException : public CustomException
        -:  255:    {
        -:  256:      public:
        -:  257:        using CustomException::CustomException;
        -:  258:
        -:  259:        const char *what() const throw() override;
        -:  260:    };
        -:  261:
        -:  262:    /**
        -:  263:     * @class MPIException inherits from CustomException
        -:  264:     *
        -:  265:     * @brief Exception for MPI errors
        -:  266:     *
        -:  267:     */
        -:  268:    class MPIException : public CustomException
        -:  269:    {
        -:  270:      public:
        -:  271:        using CustomException::CustomException;
        -:  272:
        -:  273:        const char *what() const throw() override;
        -:  274:    };
        -:  275:
        -:  276:}   // namespace customException
        -:  277:
        -:  278:#endif   // _EXCEPTIONS_HPP_
