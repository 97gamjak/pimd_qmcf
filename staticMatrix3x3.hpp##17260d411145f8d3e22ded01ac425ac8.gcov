        -:    0:Source:/home/jag/projects/pq/include/linearAlgebra/staticMatrix3x3.hpp
        -:    0:Graph:.build/tests/src/input/inputFileParsing/CMakeFiles/testParserManostat.dir/testParserManostat.cpp.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:/*****************************************************************************
        -:    2:<GPL_HEADER>
        -:    3:
        -:    4:    PQ
        -:    5:    Copyright (C) 2023-now  Jakob Gamper
        -:    6:
        -:    7:    This program is free software: you can redistribute it and/or modify
        -:    8:    it under the terms of the GNU General Public License as published by
        -:    9:    the Free Software Foundation, either version 3 of the License, or
        -:   10:    (at your option) any later version.
        -:   11:
        -:   12:    This program is distributed in the hope that it will be useful,
        -:   13:    but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   14:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   15:    GNU General Public License for more details.
        -:   16:
        -:   17:    You should have received a copy of the GNU General Public License
        -:   18:    along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   19:
        -:   20:<GPL_HEADER>
        -:   21:******************************************************************************/
        -:   22:
        -:   23:#ifndef _STATIC_MATRIX_3X3_HPP_
        -:   24:
        -:   25:#define _STATIC_MATRIX_3X3_HPP_
        -:   26:
        -:   27:#include "staticMatrix3x3Class.hpp"   // for StaticMatrix3x3
        -:   28:#include "vector3d.hpp"               // for Vector3D
        -:   29:
        -:   30:#include <cstddef>   // for size_t
        -:   31:#include <ostream>   // for operator<<, ostream
        -:   32:
        -:   33:namespace linearAlgebra
        -:   34:{
        -:   35:
        -:   36:    /**
        -:   37:     * @brief ostream operator for vector3d
        -:   38:     *
        -:   39:     * @param os
        -:   40:     * @param v
        -:   41:     * @return std::ostream&
        -:   42:     */
        -:   43:    template <typename T>
        -:   44:    std::ostream &operator<<(std::ostream &os, const StaticMatrix3x3<T> &mat)
        -:   45:    {
        -:   46:        return os << "[[" << mat[0] << "]\n"
        -:   47:                  << " [" << mat[1] << "]\n"
        -:   48:                  << " [" << mat[2] << "]]";
        -:   49:    }
        -:   50:
        -:   51:    /**
        -:   52:     * @brief transpose a StaticMatrix3x3
        -:   53:     *
        -:   54:     * @param mat
        -:   55:     * @return StaticMatrix3x3<T>
        -:   56:     */
        -:   57:    template <typename T>
        -:   58:    StaticMatrix3x3<T> transpose(const StaticMatrix3x3<T> &mat)
        -:   59:    {
        -:   60:        StaticMatrix3x3<T> result;
        -:   61:
        -:   62:        for (size_t i = 0; i < 3; ++i)
        -:   63:            for (size_t j = 0; j < 3; ++j)
        -:   64:                result[i][j] = mat[j][i];
        -:   65:
        -:   66:        return result;
        -:   67:    }
        -:   68:
        -:   69:    /**
        -:   70:     * @brief operator+ for two StaticMatrix3x3's
        -:   71:     *
        -:   72:     * @param StaticMatrix3x3<T> lhs, StaticMatrix3x3<T> rhs
        -:   73:     * @return StaticMatrix3x3<T>
        -:   74:     */
        -:   75:    template <typename T>
        -:   76:    StaticMatrix3x3<T> operator+(const StaticMatrix3x3<T> &lhs, const StaticMatrix3x3<T> &rhs)
        -:   77:    {
        -:   78:        StaticMatrix3x3<T> result(lhs);
        -:   79:
        -:   80:        result += rhs;
        -:   81:
        -:   82:        return result;
        -:   83:    }
        -:   84:
        -:   85:    /**
        -:   86:     * @brief operator+ for two StaticMatrix3x3's
        -:   87:     *
        -:   88:     * @param StaticMatrix3x3<T> lhs, StaticMatrix3x3<T> rhs
        -:   89:     * @return StaticMatrix3x3<T>
        -:   90:     */
        -:   91:    template <typename T>
        -:   92:    StaticMatrix3x3<T> operator+(const StaticMatrix3x3<T> &lhs, const T &rhs)
        -:   93:    {
        -:   94:        StaticMatrix3x3<T> result(lhs);
        -:   95:
        -:   96:        result = lhs + StaticMatrix3x3<T>(rhs);
        -:   97:
        -:   98:        return result;
        -:   99:    }
        -:  100:
        -:  101:    /**
        -:  102:     * @brief operator+= for two StaticMatrix3x3's
        -:  103:     *
        -:  104:     * @param lhs
        -:  105:     * @param rhs
        -:  106:     */
        -:  107:    template <typename T>
        -:  108:    void operator+=(StaticMatrix3x3<T> &lhs, const StaticMatrix3x3<T> &rhs)
        -:  109:    {
        -:  110:        lhs[0] += rhs[0];
        -:  111:        lhs[1] += rhs[1];
        -:  112:        lhs[2] += rhs[2];
        -:  113:    }
        -:  114:
        -:  115:    /**
        -:  116:     * @brief operator- for two StaticMatrix3x3's
        -:  117:     *
        -:  118:     * @param StaticMatrix3x3<T> lhs, StaticMatrix3x3<T> rhs
        -:  119:     * @return StaticMatrix3x3<T>
        -:  120:     */
        -:  121:    template <typename T>
        -:  122:    StaticMatrix3x3<T> operator-(const StaticMatrix3x3<T> &lhs, const StaticMatrix3x3<T> &rhs)
        -:  123:    {
        -:  124:        StaticMatrix3x3<T> result(lhs);
        -:  125:
        -:  126:        result -= rhs;
        -:  127:
        -:  128:        return result;
        -:  129:    }
        -:  130:
        -:  131:    /**
        -:  132:     * @brief operator-= for two StaticMatrix3x3's
        -:  133:     *
        -:  134:     * @param lhs
        -:  135:     * @param rhs
        -:  136:     */
        -:  137:    template <typename T>
        -:  138:    void operator-=(StaticMatrix3x3<T> &lhs, const StaticMatrix3x3<T> &rhs)
        -:  139:    {
        -:  140:        lhs[0] -= rhs[0];
        -:  141:        lhs[1] -= rhs[1];
        -:  142:        lhs[2] -= rhs[2];
        -:  143:    }
        -:  144:
        -:  145:    /**
        -:  146:     * @brief operator* for two StaticMatrix3x3's
        -:  147:     *
        -:  148:     * @param StaticMatrix3x3<T> lhs, StaticMatrix3x3<T> rhs
        -:  149:     * @return StaticMatrix3x3<T>
        -:  150:     */
        -:  151:    template <typename T>
        -:  152:    StaticMatrix3x3<T> operator*(const StaticMatrix3x3<T> &lhs, const StaticMatrix3x3<T> &rhs)
        -:  153:    {
        -:  154:        StaticMatrix3x3<T> result;
        -:  155:        StaticMatrix3x3<T> rhsTransposed = transpose(rhs);
        -:  156:
        -:  157:        for (size_t i = 0; i < 3; ++i)
        -:  158:            for (size_t j = 0; j < 3; ++j)
        -:  159:                result[i][j] = sum(lhs[i] * rhsTransposed[j]);
        -:  160:
        -:  161:        return result;
        -:  162:    }
        -:  163:
        -:  164:    /**
        -:  165:     * @brief operator* for StaticMatrix3x3 and scalar
        -:  166:     *
        -:  167:     * @param StaticMatrix3x3<T> mat, T t
        -:  168:     * @return StaticMatrix3x3<T>
        -:  169:     */
        -:  170:    template <typename T>
        -:  171:    StaticMatrix3x3<T> operator*(const StaticMatrix3x3<T> &mat, const T t)
        -:  172:    {
        -:  173:        return StaticMatrix3x3<T>(mat[0] * t, mat[1] * t, mat[2] * t);
        -:  174:    }
        -:  175:
        -:  176:    /**
        -:  177:     * @brief operator* for StaticMatrix3x3 and scalar
        -:  178:     *
        -:  179:     * @param T t, StaticMatrix3x3<T> mat
        -:  180:     * @return StaticMatrix3x3<T>
        -:  181:     */
        -:  182:    template <typename T>
        -:  183:    StaticMatrix3x3<T> operator*(const T t, const StaticMatrix3x3<T> &mat)
        -:  184:    {
        -:  185:        return StaticMatrix3x3<T>(mat[0] * t, mat[1] * t, mat[2] * t);
        -:  186:    }
        -:  187:
        -:  188:    /**
        -:  189:     * @brief operator* for StaticMatrix3x3 and Vector3D
        -:  190:     *
        -:  191:     * @tparam T
        -:  192:     * @param mat
        -:  193:     * @param vec
        -:  194:     * @return StaticMatrix3x3<T>
        -:  195:     */
        -:  196:    template <typename T>
        -:  197:    Vector3D<T> operator*(const StaticMatrix3x3<T> &mat, const Vector3D<T> &vec)
        -:  198:    {
        -:  199:        Vector3D<T> result;
        -:  200:
        -:  201:        result[0] = sum(mat[0] * vec);
        -:  202:        result[1] = sum(mat[1] * vec);
        -:  203:        result[2] = sum(mat[2] * vec);
        -:  204:
        -:  205:        return result;
        -:  206:    }
        -:  207:
        -:  208:    /**
        -:  209:     * @brief operator*= for a StaticMatrix3x3 and a scalar
        -:  210:     *
        -:  211:     * @param lhs
        -:  212:     * @param rhs
        -:  213:     */
        -:  214:    template <typename T>
        -:  215:    void operator*=(StaticMatrix3x3<T> &lhs, const T t)
        -:  216:    {
        -:  217:        lhs[0] *= t;
        -:  218:        lhs[1] *= t;
        -:  219:        lhs[2] *= t;
        -:  220:    }
        -:  221:
        -:  222:    /**
        -:  223:     * @brief operator/ for StaticMatrix3x3 and scalar
        -:  224:     *
        -:  225:     * @param StaticMatrix3x3<T> mat, T t
        -:  226:     * @return StaticMatrix3x3<T>
        -:  227:     */
        -:  228:    template <typename T>
        -:  229:    StaticMatrix3x3<T> operator/(const StaticMatrix3x3<T> &mat, const T t)
        -:  230:    {
        -:  231:        return StaticMatrix3x3<T>(mat[0] / t, mat[1] / t, mat[2] / t);
        -:  232:    }
        -:  233:
        -:  234:    /**
        -:  235:     * @brief operator/ for scalar and StaticMatrix3x3
        -:  236:     *
        -:  237:     * @param StaticMatrix3x3<T> mat, T t
        -:  238:     * @return StaticMatrix3x3<T>
        -:  239:     */
        -:  240:    template <typename T>
        -:  241:    StaticMatrix3x3<T> operator/(const T t, const StaticMatrix3x3<T> &mat)
        -:  242:    {
        -:  243:        return StaticMatrix3x3<T>(t / mat[0], t / mat[1], t / mat[2]);
        -:  244:    }
        -:  245:
        -:  246:    /**
        -:  247:     * @brief operator/= for a StaticMatrix3x3 and a scalar
        -:  248:     *
        -:  249:     * @param lhs
        -:  250:     * @param rhs
        -:  251:     */
        -:  252:    template <typename T>
        -:  253:    void operator/=(StaticMatrix3x3<T> &lhs, const T t)
        -:  254:    {
        -:  255:        lhs[0] /= t;
        -:  256:        lhs[1] /= t;
        -:  257:        lhs[2] /= t;
        -:  258:    }
        -:  259:
        -:  260:    /**
        -:  261:     * @brief determinant of a StaticMatrix3x3
        -:  262:     *
        -:  263:     * @param mat
        -:  264:     * @return T
        -:  265:     */
        -:  266:    template <typename T>
        -:  267:    T det(const StaticMatrix3x3<T> &mat)
        -:  268:    {
        -:  269:        auto result = mat[0][0] * mat[1][1] * mat[2][2];
        -:  270:
        -:  271:        result += mat[0][1] * mat[1][2] * mat[2][0];
        -:  272:        result += mat[0][2] * mat[1][0] * mat[2][1];
        -:  273:        result -= mat[0][2] * mat[1][1] * mat[2][0];
        -:  274:        result -= mat[0][1] * mat[1][0] * mat[2][2];
        -:  275:        result -= mat[0][0] * mat[1][2] * mat[2][1];
        -:  276:
        -:  277:        return result;
        -:  278:    }
        -:  279:
        -:  280:    /**
        -:  281:     * @brief tensor product of two Vector3D's
        -:  282:     *
        -:  283:     * @details it performs v1 * v2^T
        -:  284:     *
        -:  285:     * @tparam T
        -:  286:     * @param lhs
        -:  287:     * @param rhs
        -:  288:     * @return StaticMatrix3x3<T>
        -:  289:     */
        -:  290:    template <typename T>
        -:  291:    StaticMatrix3x3<T> tensorProduct(const Vector3D<T> &lhs, const Vector3D<T> &rhs)
        -:  292:    {
        -:  293:
        -:  294:        StaticMatrix3x3<T> lhsMatrix{};
        -:  295:        StaticMatrix3x3<T> rhsMatrix{};
        -:  296:
        -:  297:        lhsMatrix[0] = lhs;
        -:  298:        rhsMatrix[0] = rhs;
        -:  299:
        -:  300:        lhsMatrix = transpose(lhsMatrix);
        -:  301:
        -:  302:        return lhsMatrix * rhsMatrix;
        -:  303:    }
        -:  304:
        -:  305:    /**
        -:  306:     * @brief cofactor matrix of a StaticMatrix3x3
        -:  307:     *
        -:  308:     * @param mat
        -:  309:     * @return StaticMatrix3x3<T>
        -:  310:     */
        -:  311:    template <typename T>
        -:  312:    StaticMatrix3x3<T> cofactorMatrix(const StaticMatrix3x3<T> &mat)
        -:  313:    {
        -:  314:        StaticMatrix3x3<T> result;
        -:  315:
        -:  316:        result[0][0] = mat[1][1] * mat[2][2] - mat[1][2] * mat[2][1];
        -:  317:        result[0][1] = mat[1][2] * mat[2][0] - mat[1][0] * mat[2][2];
        -:  318:        result[0][2] = mat[1][0] * mat[2][1] - mat[1][1] * mat[2][0];
        -:  319:        result[1][0] = mat[0][2] * mat[2][1] - mat[0][1] * mat[2][2];
        -:  320:        result[1][1] = mat[0][0] * mat[2][2] - mat[0][2] * mat[2][0];
        -:  321:        result[1][2] = mat[0][1] * mat[2][0] - mat[0][0] * mat[2][1];
        -:  322:        result[2][0] = mat[0][1] * mat[1][2] - mat[0][2] * mat[1][1];
        -:  323:        result[2][1] = mat[0][2] * mat[1][0] - mat[0][0] * mat[1][2];
        -:  324:        result[2][2] = mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0];
        -:  325:
        -:  326:        return result;
        -:  327:    }
        -:  328:
        -:  329:    /**
        -:  330:     * @brief inverse of a StaticMatrix3x3
        -:  331:     *
        -:  332:     * @param mat
        -:  333:     * @return StaticMatrix3x3<T>
        -:  334:     */
        -:  335:    template <typename T>
        -:  336:    StaticMatrix3x3<T> inverse(const StaticMatrix3x3<T> &mat)
        -:  337:    {
        -:  338:        StaticMatrix3x3<T> result = cofactorMatrix(mat);
        -:  339:
        -:  340:        result = transpose(result);
        -:  341:
        -:  342:        return result / det(mat);
        -:  343:    }
        -:  344:
        -:  345:    /**
        -:  346:     * @brief diagonal of a StaticMatrix3x3
        -:  347:     *
        -:  348:     * @param mat
        -:  349:     * @return Vector3D<T>
        -:  350:     */
        -:  351:    template <typename T>
        -:  352:    Vector3D<T> diagonal(const StaticMatrix3x3<T> &mat)
        -:  353:    {
        -:  354:        return Vector3D<T>(mat[0][0], mat[1][1], mat[2][2]);
        -:  355:    }
        -:  356:
        -:  357:    /**
        -:  358:     * @brief build diagonalMatrix from a Vector3D
        -:  359:     *
        -:  360:     * @param vec
        -:  361:     */
        -:  362:    template <typename T>
function linearAlgebra::StaticMatrix3x3<double> linearAlgebra::diagonalMatrix<double>(linearAlgebra::Vector3D<double> const&) called 0 returned 0% blocks executed 0%
    #####:  363:    StaticMatrix3x3<T> diagonalMatrix(const Vector3D<T> &vec)
        -:  364:    {
    #####:  365:        StaticMatrix3x3<T> result{T()};
    %%%%%:  365-block  0
call    0 never executed
        -:  366:
    #####:  367:        result[0][0] = vec[0];
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  368:        result[1][1] = vec[1];
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  369:        result[2][2] = vec[2];
call    0 never executed
call    1 never executed
call    2 never executed
        -:  370:
    #####:  371:        return result;
        -:  372:    }
        -:  373:
        -:  374:    /**
        -:  375:     * @brief build diagonalMatrix from a scalar
        -:  376:     *
        -:  377:     * @param t
        -:  378:     */
        -:  379:    template <typename T>
        -:  380:    StaticMatrix3x3<T> diagonalMatrix(const T t)
        -:  381:    {
        -:  382:        StaticMatrix3x3<T> result{T()};
        -:  383:
        -:  384:        result[0][0] = t;
        -:  385:        result[1][1] = t;
        -:  386:        result[2][2] = t;
        -:  387:
        -:  388:        return result;
        -:  389:    }
        -:  390:
        -:  391:    /**
        -:  392:     * @brief trace of a StaticMatrix3x3
        -:  393:     *
        -:  394:     * @param mat
        -:  395:     * @return T
        -:  396:     */
        -:  397:    template <typename T>
        -:  398:    T trace(const StaticMatrix3x3<T> &mat)
        -:  399:    {
        -:  400:        return mat[0][0] + mat[1][1] + mat[2][2];
        -:  401:    }
        -:  402:
        -:  403:    /**
        -:  404:     * @brief Kronecker delta
        -:  405:     *
        -:  406:     * @TODO: use concepts here
        -:  407:     */
        -:  408:    template <typename T>
        -:  409:    [[nodiscard]] StaticMatrix3x3<T> kroneckerDeltaMatrix()
        -:  410:    {
        -:  411:        return StaticMatrix3x3<T>(Vec3D{T(1), 0.0, 0.0}, Vec3D{0.0, T(1), 0.0}, Vec3D{0.0, 0.0, T(1)});
        -:  412:    }
        -:  413:
        -:  414:    /**
        -:  415:     * @brief exponential of a StaticMatrix3x3
        -:  416:     *
        -:  417:     */
        -:  418:    template <typename T>
        -:  419:    [[nodiscard]] StaticMatrix3x3<T> exp(const StaticMatrix3x3<T> &mat)
        -:  420:    {
        -:  421:        auto result = StaticMatrix3x3<T>(0.0);
        -:  422:
        -:  423:        for (size_t i = 0; i < 3; ++i)
        -:  424:            for (size_t j = i + 1; j < 3; ++j)
        -:  425:                result[i][j] = ::exp(mat[i][j]);
        -:  426:
        -:  427:        return result;
        -:  428:    }
        -:  429:
        -:  430:}   // namespace linearAlgebra
        -:  431:
        -:  432:#endif   // _STATIC_MATRIX_3X3_HPP_
